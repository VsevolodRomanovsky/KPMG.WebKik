/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackMissingModule() { throw new Error("Cannot find module \"—config\""); }());
	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __dirname) {var isDevBuild = process.argv.indexOf('--env.prod') < 0;
	var path = __webpack_require__(4);
	var webpack = __webpack_require__(5);
	var ExtractTextPlugin = __webpack_require__(340);
	
	
	module.exports = {
	    resolve: {
	        extensions: [ '', '.js' ]
	    },
	    module: {
	        loaders: [
	            { test: /\.(png|woff|woff2|eot|ttf|svg)(\?|$)/, loader: 'url-loader?limit=100000' }         
	        ]
	    },
	    entry: {
	        vendor: [
	            '@angular/common',
	            '@angular/compiler',
	            '@angular/core',
	            '@angular/http',
	            '@angular/platform-browser',
	            '@angular/platform-browser-dynamic',
	            '@angular/router',
	            '@angular/platform-server',
	            'angular2-universal',
	            'angular2-universal-polyfills',
	            'bootstrap-loader/extractStyles',
	            'es6-shim',
	            'es6-promise',
	            'event-source-polyfill',            
	            'zone.js',
	            'rxjs',
	            'ng2-uploader',
	            'bootstrap',
	            'd3',
	            'bootstrap-datepicker',
				'primeng/primeng',
				'@swimlane/ngx-datatable'
	        ]
	    },
	    output: {
	        path: path.join(__dirname, 'wwwroot', 'dist'),
	        filename: '[name].js',
	        library: '[name]_[hash]',
	    },
	    plugins: [
	        new ExtractTextPlugin('vendor.css', { allChunks: true }),
	        new webpack.ProvidePlugin({ $: 'jquery', jQuery: 'jquery' }), // Maps these identifiers to the jQuery package (because Bootstrap expects it to be a global variable)
	        new webpack.optimize.OccurenceOrderPlugin(),
	        new webpack.DllPlugin({
	            path: path.join(__dirname, 'wwwroot', 'dist', '[name]-manifest.json'),
	            name: '[name]_[hash]'
	        })
	    ].concat(isDevBuild ? [] : [
	        new webpack.optimize.UglifyJsPlugin({ compress: { warnings: false } })
	    ])
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), "/"))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(18);

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = vendor_ae97ba1cb2412c1a8644;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }
	
	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }
	
	  return parts;
	}
	
	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};
	
	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;
	
	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();
	
	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }
	
	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }
	
	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)
	
	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');
	
	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};
	
	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';
	
	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');
	
	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }
	
	  return (isAbsolute ? '/' : '') + path;
	};
	
	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};
	
	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};
	
	
	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);
	
	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }
	
	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }
	
	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }
	
	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));
	
	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }
	
	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }
	
	  outputParts = outputParts.concat(toParts.slice(samePartsLength));
	
	  return outputParts.join('/');
	};
	
	exports.sep = '/';
	exports.delimiter = ':';
	
	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];
	
	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }
	
	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }
	
	  return root + dir;
	};
	
	
	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};
	
	
	exports.extname = function(path) {
	  return splitPath(path)[3];
	};
	
	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}
	
	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Compiler = __webpack_require__(6);
	var WebEnvironmentPlugin = __webpack_require__(84);
	var WebpackOptionsApply = __webpack_require__(85);
	var WebpackOptionsDefaulter = __webpack_require__(338);
	
	function webpack(options, callback) {
		new WebpackOptionsDefaulter().process(options);
	
		var compiler = new Compiler();
		compiler.options = options;
		compiler.options = new WebpackOptionsApply().process(options, compiler);
		new WebEnvironmentPlugin(options.inputFileSystem, options.outputFileSystem).apply(compiler);
		if(callback) {
			compiler.run(callback);
		}
		return compiler;
	}
	module.exports = webpack;
	
	webpack.WebpackOptionsDefaulter = WebpackOptionsDefaulter;
	webpack.WebpackOptionsApply = WebpackOptionsApply;
	webpack.Compiler = Compiler;
	webpack.WebEnvironmentPlugin = WebEnvironmentPlugin;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var Tapable = __webpack_require__(8);
	
	var Compilation = __webpack_require__(9);
	var Parser = __webpack_require__(60);
	var Resolver = __webpack_require__(63);
	
	var NormalModuleFactory = __webpack_require__(67);
	var ContextModuleFactory = __webpack_require__(80);
	
	function Watching(compiler, watchOptions, handler) {
		this.startTime = null;
		this.invalid = false;
		this.error = null;
		this.stats = null;
		this.handler = handler;
		if(typeof watchOptions === "number") {
			this.watchOptions = {
				aggregateTimeout: watchOptions
			};
		} else if(watchOptions && typeof watchOptions === "object") {
			this.watchOptions = Object.create(watchOptions);
		} else {
			this.watchOptions = {};
		}
		this.watchOptions.aggregateTimeout = this.watchOptions.aggregateTimeout || 200;
		this.compiler = compiler;
		this.running = true;
		this.compiler.readRecords(function(err) {
			if(err) return this._done(err);
	
			this._go();
		}.bind(this));
	}
	
	Watching.prototype._go = function() {
		this.startTime = new Date().getTime();
		this.running = true;
		this.invalid = false;
		this.compiler.applyPluginsAsync("watch-run", this, function(err) {
			if(err) return this._done(err);
			this.compiler.compile(function(err, compilation) {
				if(err) return this._done(err);
				if(this.invalid) return this._done();
	
				if(this.compiler.applyPluginsBailResult("should-emit", compilation) === false) {
					return this._done(null, compilation);
				}
	
				this.compiler.emitAssets(compilation, function(err) {
					if(err) return this._done(err);
					if(this.invalid) return this._done();
	
					this.compiler.emitRecords(function(err) {
						if(err) return this._done(err);
	
						return this._done(null, compilation);
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};
	
	Watching.prototype._done = function(err, compilation) {
		this.running = false;
		if(this.invalid) return this._go();
		this.error = err || null;
		this.stats = compilation ? compilation.getStats() : null;
		if(this.stats) {
			this.stats.startTime = this.startTime;
			this.stats.endTime = new Date().getTime();
		}
		if(this.stats)
			this.compiler.applyPlugins("done", this.stats);
		else
			this.compiler.applyPlugins("failed", this.error);
		this.handler(this.error, this.stats);
		if(!this.error)
			this.watch(compilation.fileDependencies, compilation.contextDependencies, compilation.missingDependencies);
	};
	
	Watching.prototype.watch = function(files, dirs, missing) {
		this.watcher = this.compiler.watchFileSystem.watch(files, dirs, missing, this.startTime, this.watchOptions, function(err, filesModified, contextModified, missingModified, fileTimestamps, contextTimestamps) {
			this.watcher = null;
			if(err) return this.handler(err);
	
			this.compiler.fileTimestamps = fileTimestamps;
			this.compiler.contextTimestamps = contextTimestamps;
			this.invalidate();
		}.bind(this), function() {
			this.compiler.applyPlugins("invalid");
		}.bind(this));
	};
	
	Watching.prototype.invalidate = function() {
		if(this.watcher) {
			this.watcher.pause();
			this.watcher = null;
		}
		if(this.running) {
			this.invalid = true;
			return false;
		} else {
			this._go();
		}
	};
	
	Watching.prototype.close = function(callback) {
		if(callback === undefined) callback = function() {};
	
		if(this.watcher) {
			this.watcher.close();
			this.watcher = null;
		}
		if(this.running) {
			this.invalid = true;
			this._done = function() {
				callback();
			};
		} else {
			callback();
		}
	};
	
	function Compiler() {
		Tapable.call(this);
	
		this.outputPath = "";
		this.outputFileSystem = null;
		this.inputFileSystem = null;
	
		this.recordsInputPath = null;
		this.recordsOutputPath = null;
		this.records = {};
	
		this.fileTimestamps = {};
		this.contextTimestamps = {};
	
		this.resolvers = {
			normal: new Resolver(null),
			loader: new Resolver(null),
			context: new Resolver(null)
		};
		this.parser = new Parser();
	
		this.options = {};
	}
	module.exports = Compiler;
	
	Compiler.prototype = Object.create(Tapable.prototype);
	Compiler.prototype.constructor = Compiler;
	
	Compiler.Watching = Watching;
	Compiler.prototype.watch = function(watchOptions, handler) {
		this.fileTimestamps = {};
		this.contextTimestamps = {};
		var watching = new Watching(this, watchOptions, handler);
		return watching;
	};
	
	Compiler.prototype.run = function(callback) {
		var startTime = new Date().getTime();
		this.applyPluginsAsync("run", this, function(err) {
			if(err) return callback(err);
	
			this.readRecords(function(err) {
				if(err) return callback(err);
	
				this.compile(function(err, compilation) {
					if(err) return callback(err);
	
					if(this.applyPluginsBailResult("should-emit", compilation) === false) {
						var stats = compilation.getStats();
						stats.startTime = startTime;
						stats.endTime = new Date().getTime();
						this.applyPlugins("done", stats);
						return callback(null, stats);
					}
	
					this.emitAssets(compilation, function(err) {
						if(err) return callback(err);
	
						this.emitRecords(function(err) {
							if(err) return callback(err);
	
							var stats = compilation.getStats();
							stats.startTime = startTime;
							stats.endTime = new Date().getTime();
							this.applyPlugins("done", stats);
							return callback(null, stats);
						}.bind(this));
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};
	
	Compiler.prototype.runAsChild = function(callback) {
		this.compile(function(err, compilation) {
			if(err) return callback(err);
	
			this.parentCompilation.children.push(compilation);
			Object.keys(compilation.assets).forEach(function(name) {
				this.parentCompilation.assets[name] = compilation.assets[name];
			}.bind(this));
	
			var entries = compilation.chunks.filter(function(chunk) {
				return chunk.entry;
			});
			return callback(null, entries, compilation);
		}.bind(this));
	};
	
	Compiler.prototype.purgeInputFileSystem = function() {
		if(this.inputFileSystem && this.inputFileSystem.purge)
			this.inputFileSystem.purge();
	};
	
	Compiler.prototype.emitAssets = function(compilation, callback) {
		var outputPath;
	
		this.applyPluginsAsync("emit", compilation, function(err) {
			if(err) return callback(err);
			outputPath = compilation.getPath(this.outputPath);
			this.outputFileSystem.mkdirp(outputPath, emitFiles.bind(this));
		}.bind(this));
	
		function emitFiles(err) {
			if(err) return callback(err);
	
			__webpack_require__(10).forEach(Object.keys(compilation.assets), function(file, callback) {
	
				var targetFile = file;
				var queryStringIdx = targetFile.indexOf("?");
				if(queryStringIdx >= 0) {
					targetFile = targetFile.substr(0, queryStringIdx);
				}
	
				if(targetFile.match(/\/|\\/)) {
					var dir = path.dirname(targetFile);
					this.outputFileSystem.mkdirp(this.outputFileSystem.join(outputPath, dir), writeOut.bind(this));
				} else writeOut.call(this);
	
				function writeOut(err) {
					if(err) return callback(err);
					var targetPath = this.outputFileSystem.join(outputPath, targetFile);
					var source = compilation.assets[file];
					if(source.existsAt === targetPath) {
						source.emitted = false;
						return callback();
					}
					var content = source.source();
					if(!Buffer.isBuffer(content))
						content = new Buffer(content, "utf-8");
					source.existsAt = targetPath;
					source.emitted = true;
					this.outputFileSystem.writeFile(targetPath, content, callback);
				}
	
			}.bind(this), function(err) {
				if(err) return callback(err);
	
				afterEmit.call(this);
			}.bind(this));
		}
	
		function afterEmit() {
			this.applyPluginsAsync("after-emit", compilation, function(err) {
				if(err) return callback(err);
	
				return callback();
			});
		}
	
	};
	
	Compiler.prototype.emitRecords = function emitRecords(callback) {
		if(!this.recordsOutputPath) return callback();
		var idx1 = this.recordsOutputPath.lastIndexOf("/");
		var idx2 = this.recordsOutputPath.lastIndexOf("\\");
		var recordsOutputPathDirectory = null;
		if(idx1 > idx2) recordsOutputPathDirectory = this.recordsOutputPath.substr(0, idx1);
		if(idx1 < idx2) recordsOutputPathDirectory = this.recordsOutputPath.substr(0, idx2);
		if(!recordsOutputPathDirectory) return writeFile.call(this);
		this.outputFileSystem.mkdirp(recordsOutputPathDirectory, function(err) {
			if(err) return callback(err);
			writeFile.call(this);
		}.bind(this));
	
		function writeFile() {
			this.outputFileSystem.writeFile(this.recordsOutputPath, JSON.stringify(this.records, undefined, 2), callback);
		}
	};
	
	Compiler.prototype.readRecords = function readRecords(callback) {
		if(!this.recordsInputPath) {
			this.records = {};
			return callback();
		}
		this.inputFileSystem.stat(this.recordsInputPath, function(err) {
			// It doesn't exist
			// We can ignore this.
			if(err) return callback();
	
			this.inputFileSystem.readFile(this.recordsInputPath, function(err, content) {
				if(err) return callback(err);
	
				try {
					this.records = JSON.parse(content);
				} catch(e) {
					e.message = "Cannot parse records: " + e.message;
					return callback(e);
				}
	
				return callback();
			}.bind(this));
		}.bind(this));
	};
	
	Compiler.prototype.createChildCompiler = function(compilation, compilerName, outputOptions) {
		var childCompiler = new Compiler();
		for(var name in this._plugins) {
			if(["make", "compile", "emit", "after-emit", "invalid", "done", "this-compilation"].indexOf(name) < 0)
				childCompiler._plugins[name] = this._plugins[name].slice();
		}
		childCompiler.name = compilerName;
		childCompiler.outputPath = this.outputPath;
		childCompiler.inputFileSystem = this.inputFileSystem;
		childCompiler.outputFileSystem = null;
		childCompiler.resolvers = this.resolvers;
		childCompiler.parser = this.parser;
		childCompiler.fileTimestamps = this.fileTimestamps;
		childCompiler.contextTimestamps = this.contextTimestamps;
		if(!this.records[compilerName]) this.records[compilerName] = [];
		this.records[compilerName].push(childCompiler.records = {});
		childCompiler.options = Object.create(this.options);
		childCompiler.options.output = Object.create(childCompiler.options.output);
		for(name in outputOptions) {
			childCompiler.options.output[name] = outputOptions[name];
		}
		childCompiler.parentCompilation = compilation;
		return childCompiler;
	};
	
	Compiler.prototype.isChild = function() {
		return !!this.parentCompilation;
	};
	
	Compiler.prototype.createCompilation = function() {
		return new Compilation(this);
	};
	
	Compiler.prototype.newCompilation = function(params) {
		var compilation = this.createCompilation();
		compilation.fileTimestamps = this.fileTimestamps;
		compilation.contextTimestamps = this.contextTimestamps;
		compilation.name = this.name;
		compilation.records = this.records;
		this.applyPlugins("this-compilation", compilation, params);
		this.applyPlugins("compilation", compilation, params);
		return compilation;
	};
	
	Compiler.prototype.createNormalModuleFactory = function() {
		var normalModuleFactory = new NormalModuleFactory(this.options.context, this.resolvers, this.parser, this.options.module || {});
		this.applyPlugins("normal-module-factory", normalModuleFactory);
		return normalModuleFactory;
	};
	
	Compiler.prototype.createContextModuleFactory = function() {
		var contextModuleFactory = new ContextModuleFactory(this.resolvers, this.inputFileSystem);
		this.applyPlugins("context-module-factory", contextModuleFactory);
		return contextModuleFactory;
	};
	
	Compiler.prototype.newCompilationParams = function() {
		var params = {
			normalModuleFactory: this.createNormalModuleFactory(),
			contextModuleFactory: this.createContextModuleFactory()
		};
		return params;
	};
	
	Compiler.prototype.compile = function(callback) {
		var params = this.newCompilationParams();
		this.applyPlugins("compile", params);
	
		var compilation = this.newCompilation(params);
	
		this.applyPluginsParallel("make", compilation, function(err) {
			if(err) return callback(err);
	
			compilation.seal(function(err) {
				if(err) return callback(err);
	
				this.applyPluginsAsync("after-compile", compilation, function(err) {
					if(err) return callback(err);
	
					return callback(null, compilation);
				});
			}.bind(this));
		}.bind(this));
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(14);

/***/ },
/* 8 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Tapable() {
		this._plugins = {};
	}
	module.exports = Tapable;
	
	function copyProperties(from, to) {
		for(var key in from)
			to[key] = from[key];
		return to;
	}
	
	Tapable.mixin = function mixinTapable(pt) {
		copyProperties(Tapable.prototype, pt);
	}
	
	Tapable.prototype.applyPlugins = function applyPlugins(name) {
		if(!this._plugins[name]) return;
		var args = Array.prototype.slice.call(arguments, 1);
		var plugins = this._plugins[name];
		var old = this._currentPluginApply;
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++)
			plugins[this._currentPluginApply].apply(this, args);
		this._currentPluginApply = old;
	};
	
	Tapable.prototype.applyPluginsWaterfall = function applyPlugins(name, init) {
		if(!this._plugins[name]) return init;
		var args = Array.prototype.slice.call(arguments, 2);
		var plugins = this._plugins[name];
		var current = init;
		var old = this._currentPluginApply;
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++)
			current = plugins[this._currentPluginApply].apply(this, [current].concat(args));
		this._currentPluginApply = old;
		return current;
	};
	
	Tapable.prototype.applyPluginsBailResult = function applyPluginsBailResult(name) {
		if(!this._plugins[name]) return;
		var args = Array.prototype.slice.call(arguments, 1);
		var plugins = this._plugins[name];
		var old = this._currentPluginApply
		for(this._currentPluginApply = 0; this._currentPluginApply < plugins.length; this._currentPluginApply++) {
			var result = plugins[this._currentPluginApply].apply(this, args);
			if(typeof result !== "undefined") {
				this._currentPluginApply = old;
				return result;
			}
		}
		this._currentPluginApply = old;
	};
	
	Tapable.prototype.applyPluginsAsyncSeries = Tapable.prototype.applyPluginsAsync = function applyPluginsAsync(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args.pop();
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var i = 0;
		args.push(copyProperties(callback, function next(err) {
			if(err) return callback(err);
			i++;
			if(i >= plugins.length) {
				return callback();
			}
			plugins[i].apply(this, args);
		}.bind(this)));
		plugins[0].apply(this, args);
	};
	
	Tapable.prototype.applyPluginsAsyncWaterfall = function applyPluginsAsyncWaterfall(name, init, callback) {
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback(null, init);
		var plugins = this._plugins[name];
		var i = 0;
		var next = copyProperties(callback, function(err, value) {
			if(err) return callback(err);
			i++;
			if(i >= plugins.length) {
				return callback(null, value);
			}
			plugins[i].call(this, value, next);
		}.bind(this));
		plugins[0].call(this, init, next);
	};
	
	Tapable.prototype.applyPluginsParallel = function applyPluginsParallel(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args.pop();
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var remaining = plugins.length;
		args.push(copyProperties(callback, function(err) {
			if(remaining < 0) return; // ignore
			if(err) {
				remaining = -1;
				return callback(err);
			}
			remaining--;
			if(remaining == 0) {
				return callback();
			}
		}));
		for(var i = 0; i < plugins.length; i++) {
			plugins[i].apply(this, args);
			if(remaining < 0) return;
		}
	};
	
	Tapable.prototype.applyPluginsParallelBailResult = function applyPluginsParallelBailResult(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callback = args[args.length-1];
		if(!this._plugins[name] || this._plugins[name].length == 0) return callback();
		var plugins = this._plugins[name];
		var currentPos = plugins.length;
		var currentError, currentResult;
		var done = [];
		for(var i = 0; i < plugins.length; i++) {
			args[args.length-1] = (function(i) {
				return copyProperties(callback, function(err, result) {
					if(i >= currentPos) return; // ignore
					done.push(i);
					if(err || result) {
						currentPos = i + 1;
						done = done.filter(function(item) {
							return item <= i;
						});
						currentError = err;
						currentResult = result;
					}
					if(done.length == currentPos) {
						callback(currentError, currentResult);
						currentPos = 0;
					}
				});
			}(i));
			plugins[i].apply(this, args);
		}
	};
	
	
	Tapable.prototype.restartApplyPlugins = function restartApplyPlugins() {
		if(typeof this._currentPluginApply !== "number")
			throw new Error("Tapable.prototype.restartApplyPlugins can only be used inside of any sync plugins application");
		this._currentPluginApply = -1;
	};
	
	
	Tapable.prototype.plugin = function plugin(name, fn) {
		if(Array.isArray(name)) {
			name.forEach(function(name) {
				this.plugin(name, fn);
			}, this);
			return;
		}
		if(!this._plugins[name]) this._plugins[name] = [fn];
		else this._plugins[name].push(fn);
	};
	
	Tapable.prototype.apply = function apply() {
		for(var i = 0; i < arguments.length; i++) {
			arguments[i].apply(this);
		}
	};


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(10);
	
	var Tapable = __webpack_require__(8);
	var EntryModuleNotFoundError = __webpack_require__(12);
	var ModuleNotFoundError = __webpack_require__(13);
	var CriticalDependenciesWarning = __webpack_require__(14);
	var Module = __webpack_require__(15);
	var ArrayMap = __webpack_require__(43);
	var Chunk = __webpack_require__(44);
	var Stats = __webpack_require__(45);
	var MainTemplate = __webpack_require__(48);
	var ChunkTemplate = __webpack_require__(53);
	var HotUpdateChunkTemplate = __webpack_require__(54);
	var ModuleTemplate = __webpack_require__(55);
	var Dependency = __webpack_require__(56);
	var ChunkRenderError = __webpack_require__(57);
	var CachedSource = __webpack_require__(58);
	
	function Compilation(compiler) {
		Tapable.call(this);
		this.compiler = compiler;
		this.resolvers = compiler.resolvers;
		this.inputFileSystem = compiler.inputFileSystem;
	
		var options = this.options = compiler.options;
		this.outputOptions = options && options.output;
		this.bail = options && options.bail;
		this.profile = options && options.profile;
	
		this.mainTemplate = new MainTemplate(this.outputOptions);
		this.chunkTemplate = new ChunkTemplate(this.outputOptions, this.mainTemplate);
		this.hotUpdateChunkTemplate = new HotUpdateChunkTemplate(this.outputOptions);
		this.moduleTemplate = new ModuleTemplate(this.outputOptions);
	
		this.entries = [];
		this.preparedChunks = [];
		this.chunks = [];
		this.namedChunks = {};
		this.modules = [];
		this._modules = {};
		this.cache = null;
		this.records = null;
		this.nextFreeModuleId = 1;
		this.nextFreeChunkId = 0;
		this.nextFreeModuleIndex = 0;
		this.nextFreeModuleIndex2 = 0;
		this.additionalChunkAssets = [];
		this.assets = {};
		this.errors = [];
		this.warnings = [];
		this.children = [];
		this.dependencyFactories = new ArrayMap();
		this.dependencyTemplates = new ArrayMap();
	}
	module.exports = Compilation;
	
	Compilation.prototype = Object.create(Tapable.prototype);
	Compilation.prototype.constructor = Compilation;
	
	Compilation.prototype.templatesPlugin = function(name, fn) {
		this.mainTemplate.plugin(name, fn);
		this.chunkTemplate.plugin(name, fn);
	};
	
	Compilation.prototype.addModule = function(module, cacheGroup) {
		cacheGroup = cacheGroup || "m";
		var identifier = module.identifier();
		if(this._modules[identifier]) {
			return false;
		}
		if(this.cache && this.cache[cacheGroup + identifier]) {
			var cacheModule = this.cache[cacheGroup + identifier];
	
			var rebuild = true;
			if(!cacheModule.error && cacheModule.cacheable && this.fileTimestamps && this.contextTimestamps) {
				rebuild = cacheModule.needRebuild(this.fileTimestamps, this.contextTimestamps);
			}
	
			if(!rebuild) {
				cacheModule.disconnect();
				this._modules[identifier] = cacheModule;
				this.modules.push(cacheModule);
				cacheModule.errors.forEach(function(err) {
					this.errors.push(err);
				}, this);
				cacheModule.warnings.forEach(function(err) {
					this.warnings.push(err);
				}, this);
				return cacheModule;
			} else {
				module.lastId = cacheModule.id;
			}
		}
		this._modules[identifier] = module;
		if(this.cache) {
			this.cache[cacheGroup + identifier] = module;
		}
		this.modules.push(module);
		return true;
	};
	
	Compilation.prototype.getModule = function(module) {
		var identifier = module.identifier();
		return this._modules[identifier];
	};
	
	Compilation.prototype.findModule = function(identifier) {
		return this._modules[identifier];
	};
	
	Compilation.prototype.buildModule = function(module, thisCallback) {
		this.applyPlugins("build-module", module);
		if(module.building) return module.building.push(thisCallback);
		var building = module.building = [thisCallback];
	
		function callback(err) {
			module.building = undefined;
			building.forEach(function(cb) {
				cb(err);
			});
		}
		module.build(this.options, this, this.resolvers.normal, this.inputFileSystem, function(err) {
			module.errors.forEach(function(err) {
				this.errors.push(err);
			}, this);
			module.warnings.forEach(function(err) {
				this.warnings.push(err);
			}, this);
			module.dependencies.sort(Dependency.compare);
			if(err) {
				module.error = err;
				this.applyPlugins("failed-module", module);
				return callback(err);
			}
			this.applyPlugins("succeed-module", module);
			return callback();
		}.bind(this));
	};
	
	Compilation.prototype.processModuleDependencies = function(module, callback) {
		var dependencies = [];
	
		function addDependency(dep) {
			for(var i = 0; i < dependencies.length; i++) {
				if(dep.isEqualResource(dependencies[i][0])) {
					return dependencies[i].push(dep);
				}
			}
			dependencies.push([dep]);
		}
	
		function addDependenciesBlock(block) {
			if(block.dependencies) {
				block.dependencies.forEach(addDependency);
			}
			if(block.blocks) {
				block.blocks.forEach(addDependenciesBlock);
			}
			if(block.variables) {
				block.variables.forEach(function(v) {
					v.dependencies.forEach(addDependency);
				});
			}
		}
		addDependenciesBlock(module);
		this.addModuleDependencies(module, dependencies, this.bail, null, true, callback);
	};
	
	Compilation.prototype.addModuleDependencies = function(module, dependencies, bail, cacheGroup, recursive, callback) {
		var _this = this;
		var start = _this.profile && +new Date();
	
		var factories = [];
		for(var i = 0; i < dependencies.length; i++) {
			var factory = _this.dependencyFactories.get(dependencies[i][0].constructor);
			if(!factory) {
				return callback(new Error("No module factory available for dependency type: " + dependencies[i][0].constructor.name));
			}
			factories[i] = [factory, dependencies[i]];
		}
		async.forEach(factories, function(item, callback) {
			var dependencies = item[1];
			var criticalDependencies = dependencies.filter(function(d) {
				return !!d.critical;
			});
			if(criticalDependencies.length > 0) {
				_this.warnings.push(new CriticalDependenciesWarning(module, criticalDependencies));
			}
	
			var errorAndCallback = function errorAndCallback(err) {
				err.dependencies = dependencies;
				err.origin = module;
				module.dependenciesErrors.push(err);
				_this.errors.push(err);
				if(bail) {
					callback(err);
				} else {
					callback();
				}
			};
			var warningAndCallback = function warningAndCallback(err) {
				err.dependencies = dependencies;
				err.origin = module;
				module.dependenciesWarnings.push(err);
				_this.warnings.push(err);
				callback();
			};
	
			var factory = item[0];
			factory.create(module.context, dependencies[0], function(err, dependantModule) {
				function isOptional() {
					return dependencies.filter(function(d) {
						return !d.optional;
					}).length === 0;
				}
	
				function errorOrWarningAndCallback(err) {
					if(isOptional()) {
						return warningAndCallback(err);
					} else {
						return errorAndCallback(err);
					}
				}
				if(err) {
					return errorOrWarningAndCallback(new ModuleNotFoundError(module, err));
				}
				if(!dependantModule) {
					return process.nextTick(callback);
				}
				if(_this.profile) {
					if(!dependantModule.profile) {
						dependantModule.profile = {};
					}
					var afterFactory = +new Date();
					dependantModule.profile.factory = afterFactory - start;
				}
	
				dependantModule.issuer = module.identifier();
				var newModule = _this.addModule(dependantModule, cacheGroup);
	
				if(!newModule) { // from cache
					dependantModule = _this.getModule(dependantModule);
	
					if(dependantModule.optional) {
						dependantModule.optional = isOptional();
					}
	
					if(dependantModule.id === 0) {
						return errorOrWarningAndCallback(
							new ModuleNotFoundError(module, new Error("a dependency to an entry point is not allowed"))
						);
					}
	
					dependencies.forEach(function(dep) {
						dep.module = dependantModule;
						dependantModule.addReason(module, dep);
					});
	
					if(_this.profile) {
						if(!module.profile) {
							module.profile = {};
						}
						var time = +new Date() - start;
						if(!module.profile.dependencies || time > module.profile.dependencies) {
							module.profile.dependencies = time;
						}
					}
	
					return process.nextTick(callback);
				}
	
				if(newModule instanceof Module) {
					if(_this.profile) {
						newModule.profile = dependantModule.profile;
					}
	
					newModule.optional = isOptional();
					newModule.issuer = dependantModule.issuer;
					dependantModule = newModule;
	
					dependencies.forEach(function(dep) {
						dep.module = dependantModule;
						dependantModule.addReason(module, dep);
					});
	
					if(_this.profile) {
						var afterBuilding = +new Date();
						module.profile.building = afterBuilding - afterFactory;
					}
	
					if(recursive) {
						return process.nextTick(_this.processModuleDependencies.bind(_this, dependantModule, callback));
					} else {
						return process.nextTick(callback);
					}
				}
	
				dependantModule.optional = isOptional();
	
				dependencies.forEach(function(dep) {
					dep.module = dependantModule;
					dependantModule.addReason(module, dep);
				});
	
				_this.buildModule(dependantModule, function(err) {
					if(err) {
						return errorOrWarningAndCallback(err);
					}
	
					if(_this.profile) {
						var afterBuilding = +new Date();
						dependantModule.profile.building = afterBuilding - afterFactory;
					}
	
					if(recursive) {
						_this.processModuleDependencies(dependantModule, callback);
					} else {
						return callback();
					}
				});
	
			});
		}, function(err) {
			if(err) {
				return callback(err);
			}
	
			return callback();
		});
	};
	
	Compilation.prototype._addModuleChain = function process(context, dependency, onModule, callback) {
		var start = this.profile && +new Date();
	
		var errorAndCallback = this.bail ? function errorAndCallback(err) {
			callback(err);
		} : function errorAndCallback(err) {
			err.dependencies = [dependency];
			this.errors.push(err);
			callback();
		}.bind(this);
	
		if(typeof dependency !== "object" || dependency === null || !dependency.constructor) {
			throw new Error("Parameter 'dependency' must be a Dependency");
		}
	
		var moduleFactory = this.dependencyFactories.get(dependency.constructor);
		if(!moduleFactory) {
			throw new Error("No dependency factory available for this dependency type: " + dependency.constructor.name);
		}
	
		moduleFactory.create(context, dependency, function(err, module) {
			if(err) {
				return errorAndCallback(new EntryModuleNotFoundError(err));
			}
	
			if(this.profile) {
				if(!module.profile) {
					module.profile = {};
				}
				var afterFactory = +new Date();
				module.profile.factory = afterFactory - start;
			}
	
			var result = this.addModule(module);
			if(!result) {
				module = this.getModule(module);
	
				onModule(module);
	
				if(this.profile) {
					var afterBuilding = +new Date();
					module.profile.building = afterBuilding - afterFactory;
				}
	
				return callback(null, module);
			}
	
			if(result instanceof Module) {
				if(this.profile) {
					result.profile = module.profile;
				}
	
				module = result;
	
				onModule(module);
	
				moduleReady.call(this);
				return;
			}
	
			onModule(module);
	
			this.buildModule(module, function(err) {
				if(err) {
					return errorAndCallback(err);
				}
	
				if(this.profile) {
					var afterBuilding = +new Date();
					module.profile.building = afterBuilding - afterFactory;
				}
	
				moduleReady.call(this);
			}.bind(this));
	
			function moduleReady() {
				this.processModuleDependencies(module, function(err) {
					if(err) {
						return callback(err);
					}
	
					return callback(null, module);
				});
			}
		}.bind(this));
	};
	
	Compilation.prototype.addEntry = function process(context, entry, name, callback) {
		this._addModuleChain(context, entry, function(module) {
	
			entry.module = module;
			this.entries.push(module);
			module.issuer = null;
			module.id = 0;
	
		}.bind(this), function(err, module) {
			if(err) {
				return callback(err);
			}
	
			if(module) {
				if(module.reasons.length > 0) {
					return callback(new Error("module cannot be added as entry point, because it's already in the bundle"));
				}
				this.preparedChunks.push({
					name: name,
					module: module
				});
			}
			return callback();
		}.bind(this));
	};
	
	Compilation.prototype.prefetch = function process(context, dependency, callback) {
		this._addModuleChain(context, dependency, function(module) {
	
			module.prefetched = true;
			module.issuer = null;
	
		}, callback);
	};
	
	Compilation.prototype.rebuildModule = function(module, thisCallback) {
		if(module.variables.length || module.blocks.length)
			throw new Error("Cannot rebuild a complex module with variables or blocks");
		if(module.rebuilding) {
			return module.rebuilding.push(thisCallback);
		}
		var rebuilding = module.rebuilding = [thisCallback];
	
		function callback(err) {
			module.rebuilding = undefined;
			rebuilding.forEach(function(cb) {
				cb(err);
			});
		}
		var deps = module.dependencies.slice();
		this.buildModule(module, function(err) {
			if(err) return callback(err);
	
			this.processModuleDependencies(module, function(err) {
				if(err) return callback(err);
				deps.forEach(function(d) {
					if(d.module && d.module.removeReason(module, d)) {
						module.chunks.forEach(function(chunk) {
							if(!d.module.hasReasonForChunk(chunk)) {
								if(d.module.removeChunk(chunk)) {
									this.removeChunkFromDependencies(d.module, chunk);
								}
							}
						}, this);
					}
				}, this);
				callback();
			}.bind(this));
	
		}.bind(this));
	};
	
	Compilation.prototype.seal = function seal(callback) {
		this.applyPlugins("seal");
		this.preparedChunks.sort(function(a, b) {
			if(a.name < b.name) return -1;
			if(a.name > b.name) return 1;
			return 0;
		});
		this.preparedChunks.forEach(function(preparedChunk) {
			var module = preparedChunk.module;
			var chunk = this.addChunk(preparedChunk.name, module);
			chunk.initial = chunk.entry = true;
			chunk.addModule(module);
			module.addChunk(chunk);
			if(typeof module.index !== "number") {
				module.index = this.nextFreeModuleIndex++;
			}
			this.processDependenciesBlockForChunk(module, chunk);
			if(typeof module.index2 !== "number") {
				module.index2 = this.nextFreeModuleIndex2++;
			}
		}, this);
		this.sortModules(this.modules);
		this.applyPlugins("optimize");
	
		this.applyPlugins("optimize-modules", this.modules);
		this.applyPlugins("after-optimize-modules", this.modules);
	
		this.applyPlugins("optimize-chunks", this.chunks);
		this.applyPlugins("after-optimize-chunks", this.chunks);
	
		this.applyPluginsAsync("optimize-tree", this.chunks, this.modules, function(err) {
			if(err) {
				return callback(err);
			}
	
			this.applyPlugins("after-optimize-tree", this.chunks, this.modules);
	
			var shouldRecord = this.applyPluginsBailResult("should-record") !== false;
	
			this.applyPlugins("revive-modules", this.modules, this.records);
			this.applyPlugins("optimize-module-order", this.modules);
			this.applyPlugins("before-module-ids", this.modules);
			this.applyModuleIds();
			this.applyPlugins("optimize-module-ids", this.modules);
			this.applyPlugins("after-optimize-module-ids", this.modules);
			if(shouldRecord)
				this.applyPlugins("record-modules", this.modules, this.records);
	
			this.applyPlugins("revive-chunks", this.chunks, this.records);
			this.applyPlugins("optimize-chunk-order", this.chunks);
			this.applyPlugins("before-chunk-ids", this.chunks);
			this.applyChunkIds();
			this.applyPlugins("optimize-chunk-ids", this.chunks);
			this.applyPlugins("after-optimize-chunk-ids", this.chunks);
			if(shouldRecord)
				this.applyPlugins("record-chunks", this.chunks, this.records);
	
			this.sortItems();
			this.applyPlugins("before-hash");
			this.createHash();
			this.applyPlugins("after-hash");
			this.applyPlugins("before-chunk-assets");
			this.createChunkAssets();
			this.applyPlugins("additional-chunk-assets", this.chunks);
			this.summarizeDependencies();
			if(shouldRecord)
				this.applyPlugins("record", this, this.records);
	
			this.applyPluginsAsync("additional-assets", function(err) {
				if(err) {
					return callback(err);
				}
				this.applyPluginsAsync("optimize-chunk-assets", this.chunks, function(err) {
					if(err) {
						return callback(err);
					}
					this.applyPlugins("after-optimize-chunk-assets", this.chunks);
					this.applyPluginsAsync("optimize-assets", this.assets, function(err) {
						if(err) {
							return callback(err);
						}
						this.applyPlugins("after-optimize-assets", this.assets);
						return callback();
					}.bind(this));
				}.bind(this));
			}.bind(this));
		}.bind(this));
	};
	
	Compilation.prototype.sortModules = function sortModules(modules) {
		modules.sort(function(a, b) {
			if(a.index < b.index) return -1;
			if(a.index > b.index) return 1;
			return 0;
		});
	};
	
	Compilation.prototype.addChunk = function addChunk(name, module, loc) {
		var chunk;
		if(name) {
			if(Object.prototype.hasOwnProperty.call(this.namedChunks, name)) {
				chunk = this.namedChunks[name];
				if(module) {
					chunk.addOrigin(module, loc);
				}
				return chunk;
			}
		}
		chunk = new Chunk(name, module, loc);
		this.chunks.push(chunk);
		if(name) {
			this.namedChunks[name] = chunk;
		}
		return chunk;
	};
	
	Compilation.prototype.processDependenciesBlockForChunk = function processDependenciesBlockForChunk(block, chunk) {
		if(block.variables) {
			block.variables.forEach(function(v) {
				v.dependencies.forEach(iteratorDependency, this);
			}, this);
		}
		if(block.dependencies) {
			block.dependencies.forEach(iteratorDependency, this);
		}
		if(block.blocks) {
			block.blocks.forEach(function(b) {
				var c;
				if(!b.chunks) {
					c = this.addChunk(b.chunkName, b.module, b.loc);
					b.chunks = [c];
					c.addBlock(b);
				} else {
					c = b.chunks[0];
				}
				chunk.addChunk(c);
				c.addParent(chunk);
				this.processDependenciesBlockForChunk(b, c);
			}, this);
		}
	
		function iteratorDependency(d) {
			if(!d.module) {
				return;
			}
			if(typeof d.module.index !== "number") {
				d.module.index = this.nextFreeModuleIndex++;
			}
			if(d.weak) {
				return;
			}
			if(d.module.error) {
				d.module = null;
				return;
			}
			if(chunk.addModule(d.module)) {
				d.module.addChunk(chunk);
				this.processDependenciesBlockForChunk(d.module, chunk);
			}
			if(typeof d.module.index2 !== "number") {
				d.module.index2 = this.nextFreeModuleIndex2++;
			}
		}
	};
	
	Compilation.prototype.removeChunkFromDependencies = function removeChunkFromDependencies(block, chunk) {
		block.blocks.forEach(function(b) {
			b.chunks.forEach(function(c) {
				chunk.removeChunk(c);
				c.removeParent(chunk);
				this.removeChunkFromDependencies(b, c);
			}, this);
		}, this);
	
		function iteratorDependency(d) {
			if(!d.module) {
				return;
			}
			if(!d.module.hasReasonForChunk(chunk)) {
				if(d.module.removeChunk(chunk)) {
					this.removeChunkFromDependencies(d.module, chunk);
				}
			}
		}
		block.dependencies.forEach(iteratorDependency, this);
		block.variables.forEach(function(v) {
			v.dependencies.forEach(iteratorDependency, this);
		}, this);
	
	};
	
	Compilation.prototype.applyModuleIds = function applyModuleIds() {
		this.modules.forEach(function(module) {
			if(module.id === null) {
				module.id = this.nextFreeModuleId++;
			}
		}, this);
	};
	
	Compilation.prototype.applyChunkIds = function applyChunkIds() {
		this.chunks.forEach(function(chunk) {
			if(chunk.id === null) {
				chunk.id = this.nextFreeChunkId++;
			}
			if(!chunk.ids) {
				chunk.ids = [chunk.id];
			}
		}, this);
	};
	
	Compilation.prototype.sortItems = function sortItems() {
		function byId(a, b) {
			return a.id - b.id;
		}
		this.chunks.sort(byId);
		this.modules.sort(byId);
		this.modules.forEach(function(module) {
			module.chunks.sort(byId);
			module.reasons.sort(function(a, b) {
				return byId(a.module, b.module);
			});
		});
		this.chunks.forEach(function(chunk) {
			chunk.modules.sort(byId);
		});
	};
	
	Compilation.prototype.summarizeDependencies = function summarizeDependencies() {
		function filterDups(array) {
			var newArray = [];
			for(var i = 0; i < array.length; i++) {
				if(i === 0 || array[i - 1] !== array[i])
					newArray.push(array[i]);
			}
			return newArray;
		}
		this.fileDependencies = [];
		this.contextDependencies = [];
		this.missingDependencies = [];
		this.children.forEach(function(child) {
			this.fileDependencies = this.fileDependencies.concat(child.fileDependencies);
			this.contextDependencies = this.contextDependencies.concat(child.contextDependencies);
			this.missingDependencies = this.missingDependencies.concat(child.missingDependencies);
		}.bind(this));
		this.modules.forEach(function(module) {
			if(module.fileDependencies) {
				module.fileDependencies.forEach(function(item) {
					this.fileDependencies.push(item);
				}, this);
			}
			if(module.contextDependencies) {
				module.contextDependencies.forEach(function(item) {
					this.contextDependencies.push(item);
				}, this);
			}
		}, this);
		this.errors.forEach(function(error) {
			if(Array.isArray(error.missing)) {
				error.missing.forEach(function(item) {
					this.missingDependencies.push(item);
				}, this);
			}
		}, this);
		this.fileDependencies.sort();
		this.fileDependencies = filterDups(this.fileDependencies);
		this.contextDependencies.sort();
		this.contextDependencies = filterDups(this.contextDependencies);
		this.missingDependencies.sort();
		this.missingDependencies = filterDups(this.missingDependencies);
	};
	
	Compilation.prototype.createHash = function createHash() {
		var outputOptions = this.outputOptions;
		var hashFunction = outputOptions.hashFunction;
		var hashDigest = outputOptions.hashDigest;
		var hashDigestLength = outputOptions.hashDigestLength;
		var hash = __webpack_require__(59).createHash(hashFunction);
		this.mainTemplate.updateHash(hash);
		this.chunkTemplate.updateHash(hash);
		this.moduleTemplate.updateHash(hash);
		var i, chunk;
		var chunks = this.chunks.slice();
		chunks.sort(function(a, b) {
			if(a.entry && !b.entry) return 1;
			if(!a.entry && b.entry) return -1;
			return 0;
		});
		for(i = 0; i < chunks.length; i++) {
			chunk = chunks[i];
			var chunkHash = __webpack_require__(59).createHash(hashFunction);
			chunk.updateHash(chunkHash);
			if(chunk.entry) {
				this.mainTemplate.updateHashForChunk(chunkHash, chunk);
			} else {
				this.chunkTemplate.updateHashForChunk(chunkHash);
			}
			this.applyPlugins("chunk-hash", chunk, chunkHash);
			chunk.hash = chunkHash.digest(hashDigest);
			hash.update(chunk.hash);
			chunk.renderedHash = chunk.hash.substr(0, hashDigestLength);
		}
		this.fullHash = hash.digest(hashDigest);
		this.hash = this.fullHash.substr(0, hashDigestLength);
	};
	
	Compilation.prototype.modifyHash = function modifyHash(update) {
		var outputOptions = this.outputOptions;
		var hashFunction = outputOptions.hashFunction;
		var hashDigest = outputOptions.hashDigest;
		var hashDigestLength = outputOptions.hashDigestLength;
		var hash = __webpack_require__(59).createHash(hashFunction);
		hash.update(this.fullHash);
		hash.update(update);
		this.fullHash = hash.digest(hashDigest);
		this.hash = this.fullHash.substr(0, hashDigestLength);
	};
	
	Compilation.prototype.createChunkAssets = function createChunkAssets() {
		var outputOptions = this.outputOptions;
		var filename = outputOptions.filename || "bundle.js";
		var chunkFilename = outputOptions.chunkFilename || "[id]." + filename;
		var namedChunkFilename = outputOptions.namedChunkFilename || null;
		for(var i = 0; i < this.modules.length; i++) {
			var module = this.modules[i];
			if(module.assets) {
				Object.keys(module.assets).forEach(function(name) {
					var file = this.getPath(name);
					this.assets[file] = module.assets[name];
					this.applyPlugins("module-asset", module, file);
				}, this);
			}
		}
		for(i = 0; i < this.chunks.length; i++) {
			var chunk = this.chunks[i];
			chunk.files = [];
			var chunkHash = chunk.hash;
			var source;
			var file;
			var filenameTemplate = chunk.filenameTemplate ? chunk.filenameTemplate :
				chunk.initial ? filename :
				chunkFilename;
			try {
				var useChunkHash = !chunk.entry || (this.mainTemplate.useChunkHash && this.mainTemplate.useChunkHash(chunk));
				var usedHash = useChunkHash ? chunkHash : this.fullHash;
				if(this.cache && this.cache["c" + chunk.id] && this.cache["c" + chunk.id].hash === usedHash) {
					source = this.cache["c" + chunk.id].source;
				} else {
					if(chunk.entry) {
						source = this.mainTemplate.render(this.hash, chunk, this.moduleTemplate, this.dependencyTemplates);
					} else {
						source = this.chunkTemplate.render(chunk, this.moduleTemplate, this.dependencyTemplates);
					}
					if(this.cache) {
						this.cache["c" + chunk.id] = {
							hash: usedHash,
							source: source = (source instanceof CachedSource ? source : new CachedSource(source))
						};
					}
				}
				this.assets[
					file = this.getPath(filenameTemplate, {
						noChunkHash: !useChunkHash,
						chunk: chunk
					})
				] = source;
				chunk.files.push(file);
				this.applyPlugins("chunk-asset", chunk, file);
				file = undefined;
				if(chunk.id !== 0 && namedChunkFilename && chunk.name) {
					this.assets[
						file = this.getPath(namedChunkFilename, {
							noChunkHash: !useChunkHash,
							chunk: chunk
						})
					] = source;
					chunk.files.push(file);
					this.applyPlugins("chunk-asset", chunk, file);
				}
			} catch(err) {
				this.errors.push(new ChunkRenderError(chunk, file || filenameTemplate, err));
			}
		}
	};
	
	Compilation.prototype.getPath = function(filename, data) {
		data = data || {};
		data.hash = data.hash || this.hash;
		return this.mainTemplate.applyPluginsWaterfall("asset-path", filename, data);
	};
	
	Compilation.prototype.getStats = function() {
		return new Stats(this);
	};
	
	Compilation.prototype.createChildCompiler = function(name, outputOptions) {
		return this.compiler.createChildCompiler(this, name, outputOptions);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, setImmediate, process) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	(function () {
	
	    var async = {};
	    function noop() {}
	    function identity(v) {
	        return v;
	    }
	    function toBool(v) {
	        return !!v;
	    }
	    function notId(v) {
	        return !v;
	    }
	
	    // global on the server, window in the browser
	    var previous_async;
	
	    // Establish the root object, `window` (`self`) in the browser, `global`
	    // on the server, or `this` in some virtual machines. We use `self`
	    // instead of `window` for `WebWorker` support.
	    var root = typeof self === 'object' && self.self === self && self ||
	            typeof global === 'object' && global.global === global && global ||
	            this;
	
	    if (root != null) {
	        previous_async = root.async;
	    }
	
	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };
	
	    function only_once(fn) {
	        return function() {
	            if (fn === null) throw new Error("Callback was already called.");
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }
	
	    function _once(fn) {
	        return function() {
	            if (fn === null) return;
	            fn.apply(this, arguments);
	            fn = null;
	        };
	    }
	
	    //// cross-browser compatiblity functions ////
	
	    var _toString = Object.prototype.toString;
	
	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };
	
	    // Ported from underscore.js isObject
	    var _isObject = function(obj) {
	        var type = typeof obj;
	        return type === 'function' || type === 'object' && !!obj;
	    };
	
	    function _isArrayLike(arr) {
	        return _isArray(arr) || (
	            // has a positive integer length property
	            typeof arr.length === "number" &&
	            arr.length >= 0 &&
	            arr.length % 1 === 0
	        );
	    }
	
	    function _arrayEach(arr, iterator) {
	        var index = -1,
	            length = arr.length;
	
	        while (++index < length) {
	            iterator(arr[index], index, arr);
	        }
	    }
	
	    function _map(arr, iterator) {
	        var index = -1,
	            length = arr.length,
	            result = Array(length);
	
	        while (++index < length) {
	            result[index] = iterator(arr[index], index, arr);
	        }
	        return result;
	    }
	
	    function _range(count) {
	        return _map(Array(count), function (v, i) { return i; });
	    }
	
	    function _reduce(arr, iterator, memo) {
	        _arrayEach(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    }
	
	    function _forEachOf(object, iterator) {
	        _arrayEach(_keys(object), function (key) {
	            iterator(object[key], key);
	        });
	    }
	
	    function _indexOf(arr, item) {
	        for (var i = 0; i < arr.length; i++) {
	            if (arr[i] === item) return i;
	        }
	        return -1;
	    }
	
	    var _keys = Object.keys || function (obj) {
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };
	
	    function _keyIterator(coll) {
	        var i = -1;
	        var len;
	        var keys;
	        if (_isArrayLike(coll)) {
	            len = coll.length;
	            return function next() {
	                i++;
	                return i < len ? i : null;
	            };
	        } else {
	            keys = _keys(coll);
	            len = keys.length;
	            return function next() {
	                i++;
	                return i < len ? keys[i] : null;
	            };
	        }
	    }
	
	    // Similar to ES6's rest param (http://ariya.ofilabs.com/2013/03/es6-and-rest-parameter.html)
	    // This accumulates the arguments passed into an array, after a given index.
	    // From underscore.js (https://github.com/jashkenas/underscore/pull/2140).
	    function _restParam(func, startIndex) {
	        startIndex = startIndex == null ? func.length - 1 : +startIndex;
	        return function() {
	            var length = Math.max(arguments.length - startIndex, 0);
	            var rest = Array(length);
	            for (var index = 0; index < length; index++) {
	                rest[index] = arguments[index + startIndex];
	            }
	            switch (startIndex) {
	                case 0: return func.call(this, rest);
	                case 1: return func.call(this, arguments[0], rest);
	            }
	            // Currently unused but handle cases outside of the switch statement:
	            // var args = Array(startIndex + 1);
	            // for (index = 0; index < startIndex; index++) {
	            //     args[index] = arguments[index];
	            // }
	            // args[startIndex] = rest;
	            // return func.apply(this, args);
	        };
	    }
	
	    function _withoutIndex(iterator) {
	        return function (value, index, callback) {
	            return iterator(value, callback);
	        };
	    }
	
	    //// exported async module functions ////
	
	    //// nextTick implementation with browser-compatible fallback ////
	
	    // capture the global reference to guard against fakeTimer mocks
	    var _setImmediate = typeof setImmediate === 'function' && setImmediate;
	
	    var _delay = _setImmediate ? function(fn) {
	        // not a direct alias for IE10 compatibility
	        _setImmediate(fn);
	    } : function(fn) {
	        setTimeout(fn, 0);
	    };
	
	    if (typeof process === 'object' && typeof process.nextTick === 'function') {
	        async.nextTick = process.nextTick;
	    } else {
	        async.nextTick = _delay;
	    }
	    async.setImmediate = _setImmediate ? _delay : async.nextTick;
	
	
	    async.forEach =
	    async.each = function (arr, iterator, callback) {
	        return async.eachOf(arr, _withoutIndex(iterator), callback);
	    };
	
	    async.forEachSeries =
	    async.eachSeries = function (arr, iterator, callback) {
	        return async.eachOfSeries(arr, _withoutIndex(iterator), callback);
	    };
	
	
	    async.forEachLimit =
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        return _eachOfLimit(limit)(arr, _withoutIndex(iterator), callback);
	    };
	
	    async.forEachOf =
	    async.eachOf = function (object, iterator, callback) {
	        callback = _once(callback || noop);
	        object = object || [];
	
	        var iter = _keyIterator(object);
	        var key, completed = 0;
	
	        while ((key = iter()) != null) {
	            completed += 1;
	            iterator(object[key], key, only_once(done));
	        }
	
	        if (completed === 0) callback(null);
	
	        function done(err) {
	            completed--;
	            if (err) {
	                callback(err);
	            }
	            // Check key is null in case iterator isn't exhausted
	            // and done resolved synchronously.
	            else if (key === null && completed <= 0) {
	                callback(null);
	            }
	        }
	    };
	
	    async.forEachOfSeries =
	    async.eachOfSeries = function (obj, iterator, callback) {
	        callback = _once(callback || noop);
	        obj = obj || [];
	        var nextKey = _keyIterator(obj);
	        var key = nextKey();
	        function iterate() {
	            var sync = true;
	            if (key === null) {
	                return callback(null);
	            }
	            iterator(obj[key], key, only_once(function (err) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    key = nextKey();
	                    if (key === null) {
	                        return callback(null);
	                    } else {
	                        if (sync) {
	                            async.setImmediate(iterate);
	                        } else {
	                            iterate();
	                        }
	                    }
	                }
	            }));
	            sync = false;
	        }
	        iterate();
	    };
	
	
	
	    async.forEachOfLimit =
	    async.eachOfLimit = function (obj, limit, iterator, callback) {
	        _eachOfLimit(limit)(obj, iterator, callback);
	    };
	
	    function _eachOfLimit(limit) {
	
	        return function (obj, iterator, callback) {
	            callback = _once(callback || noop);
	            obj = obj || [];
	            var nextKey = _keyIterator(obj);
	            if (limit <= 0) {
	                return callback(null);
	            }
	            var done = false;
	            var running = 0;
	            var errored = false;
	
	            (function replenish () {
	                if (done && running <= 0) {
	                    return callback(null);
	                }
	
	                while (running < limit && !errored) {
	                    var key = nextKey();
	                    if (key === null) {
	                        done = true;
	                        if (running <= 0) {
	                            callback(null);
	                        }
	                        return;
	                    }
	                    running += 1;
	                    iterator(obj[key], key, only_once(function (err) {
	                        running -= 1;
	                        if (err) {
	                            callback(err);
	                            errored = true;
	                        }
	                        else {
	                            replenish();
	                        }
	                    }));
	                }
	            })();
	        };
	    }
	
	
	    function doParallel(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOf, obj, iterator, callback);
	        };
	    }
	    function doParallelLimit(fn) {
	        return function (obj, limit, iterator, callback) {
	            return fn(_eachOfLimit(limit), obj, iterator, callback);
	        };
	    }
	    function doSeries(fn) {
	        return function (obj, iterator, callback) {
	            return fn(async.eachOfSeries, obj, iterator, callback);
	        };
	    }
	
	    function _asyncMap(eachfn, arr, iterator, callback) {
	        callback = _once(callback || noop);
	        arr = arr || [];
	        var results = _isArrayLike(arr) ? [] : {};
	        eachfn(arr, function (value, index, callback) {
	            iterator(value, function (err, v) {
	                results[index] = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }
	
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = doParallelLimit(_asyncMap);
	
	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.inject =
	    async.foldl =
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachOfSeries(arr, function (x, i, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	
	    async.foldr =
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, identity).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	
	    async.transform = function (arr, memo, iterator, callback) {
	        if (arguments.length === 3) {
	            callback = iterator;
	            iterator = memo;
	            memo = _isArray(arr) ? [] : {};
	        }
	
	        async.eachOf(arr, function(v, k, cb) {
	            iterator(memo, v, k, cb);
	        }, function(err) {
	            callback(err, memo);
	        });
	    };
	
	    function _filter(eachfn, arr, iterator, callback) {
	        var results = [];
	        eachfn(arr, function (x, index, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    results.push({index: index, value: x});
	                }
	                callback();
	            });
	        }, function () {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    }
	
	    async.select =
	    async.filter = doParallel(_filter);
	
	    async.selectLimit =
	    async.filterLimit = doParallelLimit(_filter);
	
	    async.selectSeries =
	    async.filterSeries = doSeries(_filter);
	
	    function _reject(eachfn, arr, iterator, callback) {
	        _filter(eachfn, arr, function(value, cb) {
	            iterator(value, function(v) {
	                cb(!v);
	            });
	        }, callback);
	    }
	    async.reject = doParallel(_reject);
	    async.rejectLimit = doParallelLimit(_reject);
	    async.rejectSeries = doSeries(_reject);
	
	    function _createTester(eachfn, check, getResult) {
	        return function(arr, limit, iterator, cb) {
	            function done() {
	                if (cb) cb(getResult(false, void 0));
	            }
	            function iteratee(x, _, callback) {
	                if (!cb) return callback();
	                iterator(x, function (v) {
	                    if (cb && check(v)) {
	                        cb(getResult(true, x));
	                        cb = iterator = false;
	                    }
	                    callback();
	                });
	            }
	            if (arguments.length > 3) {
	                eachfn(arr, limit, iteratee, done);
	            } else {
	                cb = iterator;
	                iterator = limit;
	                eachfn(arr, iteratee, done);
	            }
	        };
	    }
	
	    async.any =
	    async.some = _createTester(async.eachOf, toBool, identity);
	
	    async.someLimit = _createTester(async.eachOfLimit, toBool, identity);
	
	    async.all =
	    async.every = _createTester(async.eachOf, notId, notId);
	
	    async.everyLimit = _createTester(async.eachOfLimit, notId, notId);
	
	    function _findGetResult(v, x) {
	        return x;
	    }
	    async.detect = _createTester(async.eachOf, identity, _findGetResult);
	    async.detectSeries = _createTester(async.eachOfSeries, identity, _findGetResult);
	    async.detectLimit = _createTester(async.eachOfLimit, identity, _findGetResult);
	
	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                callback(null, _map(results.sort(comparator), function (x) {
	                    return x.value;
	                }));
	            }
	
	        });
	
	        function comparator(left, right) {
	            var a = left.criteria, b = right.criteria;
	            return a < b ? -1 : a > b ? 1 : 0;
	        }
	    };
	
	    async.auto = function (tasks, concurrency, callback) {
	        if (typeof arguments[1] === 'function') {
	            // concurrency is optional, shift the args.
	            callback = concurrency;
	            concurrency = null;
	        }
	        callback = _once(callback || noop);
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length;
	        if (!remainingTasks) {
	            return callback(null);
	        }
	        if (!concurrency) {
	            concurrency = remainingTasks;
	        }
	
	        var results = {};
	        var runningTasks = 0;
	
	        var hasError = false;
	
	        var listeners = [];
	        function addListener(fn) {
	            listeners.unshift(fn);
	        }
	        function removeListener(fn) {
	            var idx = _indexOf(listeners, fn);
	            if (idx >= 0) listeners.splice(idx, 1);
	        }
	        function taskComplete() {
	            remainingTasks--;
	            _arrayEach(listeners.slice(0), function (fn) {
	                fn();
	            });
	        }
	
	        addListener(function () {
	            if (!remainingTasks) {
	                callback(null, results);
	            }
	        });
	
	        _arrayEach(keys, function (k) {
	            if (hasError) return;
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = _restParam(function(err, args) {
	                runningTasks--;
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _forEachOf(results, function(val, rkey) {
	                        safeResults[rkey] = val;
	                    });
	                    safeResults[k] = args;
	                    hasError = true;
	
	                    callback(err, safeResults);
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            });
	            var requires = task.slice(0, task.length - 1);
	            // prevent dead-locks
	            var len = requires.length;
	            var dep;
	            while (len--) {
	                if (!(dep = tasks[requires[len]])) {
	                    throw new Error('Has nonexistent dependency in ' + requires.join(', '));
	                }
	                if (_isArray(dep) && _indexOf(dep, k) >= 0) {
	                    throw new Error('Has cyclic dependencies');
	                }
	            }
	            function ready() {
	                return runningTasks < concurrency && _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            }
	            if (ready()) {
	                runningTasks++;
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                addListener(listener);
	            }
	            function listener() {
	                if (ready()) {
	                    runningTasks++;
	                    removeListener(listener);
	                    task[task.length - 1](taskCallback, results);
	                }
	            }
	        });
	    };
	
	
	
	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var DEFAULT_INTERVAL = 0;
	
	        var attempts = [];
	
	        var opts = {
	            times: DEFAULT_TIMES,
	            interval: DEFAULT_INTERVAL
	        };
	
	        function parseTimes(acc, t){
	            if(typeof t === 'number'){
	                acc.times = parseInt(t, 10) || DEFAULT_TIMES;
	            } else if(typeof t === 'object'){
	                acc.times = parseInt(t.times, 10) || DEFAULT_TIMES;
	                acc.interval = parseInt(t.interval, 10) || DEFAULT_INTERVAL;
	            } else {
	                throw new Error('Unsupported argument type for \'times\': ' + typeof t);
	            }
	        }
	
	        var length = arguments.length;
	        if (length < 1 || length > 3) {
	            throw new Error('Invalid arguments - must be either (task), (task, callback), (times, task) or (times, task, callback)');
	        } else if (length <= 2 && typeof times === 'function') {
	            callback = task;
	            task = times;
	        }
	        if (typeof times !== 'function') {
	            parseTimes(opts, times);
	        }
	        opts.callback = callback;
	        opts.task = task;
	
	        function wrappedTask(wrappedCallback, wrappedResults) {
	            function retryAttempt(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            }
	
	            function retryInterval(interval){
	                return function(seriesCallback){
	                    setTimeout(function(){
	                        seriesCallback(null);
	                    }, interval);
	                };
	            }
	
	            while (opts.times) {
	
	                var finalAttempt = !(opts.times-=1);
	                attempts.push(retryAttempt(opts.task, finalAttempt));
	                if(!finalAttempt && opts.interval > 0){
	                    attempts.push(retryInterval(opts.interval));
	                }
	            }
	
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || opts.callback)(data.err, data.result);
	            });
	        }
	
	        // If a callback is passed, run this as a controll flow
	        return opts.callback ? wrappedTask() : wrappedTask;
	    };
	
	    async.waterfall = function (tasks, callback) {
	        callback = _once(callback || noop);
	        if (!_isArray(tasks)) {
	            var err = new Error('First argument to waterfall must be an array of functions');
	            return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        function wrapIterator(iterator) {
	            return _restParam(function (err, args) {
	                if (err) {
	                    callback.apply(null, [err].concat(args));
	                }
	                else {
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    ensureAsync(iterator).apply(null, args);
	                }
	            });
	        }
	        wrapIterator(async.iterator(tasks))();
	    };
	
	    function _parallel(eachfn, tasks, callback) {
	        callback = callback || noop;
	        var results = _isArrayLike(tasks) ? [] : {};
	
	        eachfn(tasks, function (task, key, callback) {
	            task(_restParam(function (err, args) {
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                results[key] = args;
	                callback(err);
	            }));
	        }, function (err) {
	            callback(err, results);
	        });
	    }
	
	    async.parallel = function (tasks, callback) {
	        _parallel(async.eachOf, tasks, callback);
	    };
	
	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel(_eachOfLimit(limit), tasks, callback);
	    };
	
	    async.series = function(tasks, callback) {
	        _parallel(async.eachOfSeries, tasks, callback);
	    };
	
	    async.iterator = function (tasks) {
	        function makeCallback(index) {
	            function fn() {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            }
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        }
	        return makeCallback(0);
	    };
	
	    async.apply = _restParam(function (fn, args) {
	        return _restParam(function (callArgs) {
	            return fn.apply(
	                null, args.concat(callArgs)
	            );
	        });
	    });
	
	    function _concat(eachfn, arr, fn, callback) {
	        var result = [];
	        eachfn(arr, function (x, index, cb) {
	            fn(x, function (err, y) {
	                result = result.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, result);
	        });
	    }
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);
	
	    async.whilst = function (test, iterator, callback) {
	        callback = callback || noop;
	        if (test()) {
	            var next = _restParam(function(err, args) {
	                if (err) {
	                    callback(err);
	                } else if (test.apply(this, args)) {
	                    iterator(next);
	                } else {
	                    callback.apply(null, [null].concat(args));
	                }
	            });
	            iterator(next);
	        } else {
	            callback(null);
	        }
	    };
	
	    async.doWhilst = function (iterator, test, callback) {
	        var calls = 0;
	        return async.whilst(function() {
	            return ++calls <= 1 || test.apply(this, arguments);
	        }, iterator, callback);
	    };
	
	    async.until = function (test, iterator, callback) {
	        return async.whilst(function() {
	            return !test.apply(this, arguments);
	        }, iterator, callback);
	    };
	
	    async.doUntil = function (iterator, test, callback) {
	        return async.doWhilst(iterator, function() {
	            return !test.apply(this, arguments);
	        }, callback);
	    };
	
	    async.during = function (test, iterator, callback) {
	        callback = callback || noop;
	
	        var next = _restParam(function(err, args) {
	            if (err) {
	                callback(err);
	            } else {
	                args.push(check);
	                test.apply(this, args);
	            }
	        });
	
	        var check = function(err, truth) {
	            if (err) {
	                callback(err);
	            } else if (truth) {
	                iterator(next);
	            } else {
	                callback(null);
	            }
	        };
	
	        test(check);
	    };
	
	    async.doDuring = function (iterator, test, callback) {
	        var calls = 0;
	        async.during(function(next) {
	            if (calls++ < 1) {
	                next(null, true);
	            } else {
	                test.apply(this, arguments);
	            }
	        }, iterator, callback);
	    };
	
	    function _queue(worker, concurrency, payload) {
	        if (concurrency == null) {
	            concurrency = 1;
	        }
	        else if(concurrency === 0) {
	            throw new Error('Concurrency must not be zero');
	        }
	        function _insert(q, data, pos, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0 && q.idle()) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    callback: callback || noop
	                };
	
	                if (pos) {
	                    q.tasks.unshift(item);
	                } else {
	                    q.tasks.push(item);
	                }
	
	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	            });
	            async.setImmediate(q.process);
	        }
	        function _next(q, tasks) {
	            return function(){
	                workers -= 1;
	
	                var removed = false;
	                var args = arguments;
	                _arrayEach(tasks, function (task) {
	                    _arrayEach(workersList, function (worker, index) {
	                        if (worker === task && !removed) {
	                            workersList.splice(index, 1);
	                            removed = true;
	                        }
	                    });
	
	                    task.callback.apply(task, args);
	                });
	                if (q.tasks.length + workers === 0) {
	                    q.drain();
	                }
	                q.process();
	            };
	        }
	
	        var workers = 0;
	        var workersList = [];
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            payload: payload,
	            saturated: noop,
	            empty: noop,
	            drain: noop,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	                _insert(q, data, false, callback);
	            },
	            kill: function () {
	                q.drain = noop;
	                q.tasks = [];
	            },
	            unshift: function (data, callback) {
	                _insert(q, data, true, callback);
	            },
	            process: function () {
	                while(!q.paused && workers < q.concurrency && q.tasks.length){
	
	                    var tasks = q.payload ?
	                        q.tasks.splice(0, q.payload) :
	                        q.tasks.splice(0, q.tasks.length);
	
	                    var data = _map(tasks, function (task) {
	                        return task.data;
	                    });
	
	                    if (q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    workersList.push(tasks[0]);
	                    var cb = only_once(_next(q, tasks));
	                    worker(data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            workersList: function () {
	                return workersList;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                var resumeCount = Math.min(q.concurrency, q.tasks.length);
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= resumeCount; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    }
	
	    async.queue = function (worker, concurrency) {
	        var q = _queue(function (items, cb) {
	            worker(items[0], cb);
	        }, concurrency, 1);
	
	        return q;
	    };
	
	    async.priorityQueue = function (worker, concurrency) {
	
	        function _compareTasks(a, b){
	            return a.priority - b.priority;
	        }
	
	        function _binarySearch(sequence, item, compare) {
	            var beg = -1,
	                end = sequence.length - 1;
	            while (beg < end) {
	                var mid = beg + ((end - beg + 1) >>> 1);
	                if (compare(item, sequence[mid]) >= 0) {
	                    beg = mid;
	                } else {
	                    end = mid - 1;
	                }
	            }
	            return beg;
	        }
	
	        function _insert(q, data, priority, callback) {
	            if (callback != null && typeof callback !== "function") {
	                throw new Error("task callback must be a function");
	            }
	            q.started = true;
	            if (!_isArray(data)) {
	                data = [data];
	            }
	            if(data.length === 0) {
	                // call drain immediately if there are no tasks
	                return async.setImmediate(function() {
	                    q.drain();
	                });
	            }
	            _arrayEach(data, function(task) {
	                var item = {
	                    data: task,
	                    priority: priority,
	                    callback: typeof callback === 'function' ? callback : noop
	                };
	
	                q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);
	
	                if (q.tasks.length === q.concurrency) {
	                    q.saturated();
	                }
	                async.setImmediate(q.process);
	            });
	        }
	
	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);
	
	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	            _insert(q, data, priority, callback);
	        };
	
	        // Remove unshift function
	        delete q.unshift;
	
	        return q;
	    };
	
	    async.cargo = function (worker, payload) {
	        return _queue(worker, 1, payload);
	    };
	
	    function _console_fn(name) {
	        return _restParam(function (fn, args) {
	            fn.apply(null, args.concat([_restParam(function (err, args) {
	                if (typeof console === 'object') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _arrayEach(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            })]));
	        });
	    }
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/
	
	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        var has = Object.prototype.hasOwnProperty;
	        hasher = hasher || identity;
	        var memoized = _restParam(function memoized(args) {
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (has.call(memo, key)) {   
	                async.setImmediate(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (has.call(queues, key)) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([_restParam(function (args) {
	                    memo[key] = args;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                        q[i].apply(null, args);
	                    }
	                })]));
	            }
	        });
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };
	
	    async.unmemoize = function (fn) {
	        return function () {
	            return (fn.unmemoized || fn).apply(null, arguments);
	        };
	    };
	
	    function _times(mapper) {
	        return function (count, iterator, callback) {
	            mapper(_range(count), iterator, callback);
	        };
	    }
	
	    async.times = _times(async.map);
	    async.timesSeries = _times(async.mapSeries);
	    async.timesLimit = function (count, limit, iterator, callback) {
	        return async.mapLimit(_range(count), limit, iterator, callback);
	    };
	
	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return _restParam(function (args) {
	            var that = this;
	
	            var callback = args[args.length - 1];
	            if (typeof callback == 'function') {
	                args.pop();
	            } else {
	                callback = noop;
	            }
	
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([_restParam(function (err, nextargs) {
	                    cb(err, nextargs);
	                })]));
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        });
	    };
	
	    async.compose = function (/* functions... */) {
	        return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };
	
	
	    function _applyEach(eachfn) {
	        return _restParam(function(fns, args) {
	            var go = _restParam(function(args) {
	                var that = this;
	                var callback = args.pop();
	                return eachfn(fns, function (fn, _, cb) {
	                    fn.apply(that, args.concat([cb]));
	                },
	                callback);
	            });
	            if (args.length) {
	                return go.apply(this, args);
	            }
	            else {
	                return go;
	            }
	        });
	    }
	
	    async.applyEach = _applyEach(async.eachOf);
	    async.applyEachSeries = _applyEach(async.eachOfSeries);
	
	
	    async.forever = function (fn, callback) {
	        var done = only_once(callback || noop);
	        var task = ensureAsync(fn);
	        function next(err) {
	            if (err) {
	                return done(err);
	            }
	            task(next);
	        }
	        next();
	    };
	
	    function ensureAsync(fn) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            args.push(function () {
	                var innerArgs = arguments;
	                if (sync) {
	                    async.setImmediate(function () {
	                        callback.apply(null, innerArgs);
	                    });
	                } else {
	                    callback.apply(null, innerArgs);
	                }
	            });
	            var sync = true;
	            fn.apply(this, args);
	            sync = false;
	        });
	    }
	
	    async.ensureAsync = ensureAsync;
	
	    async.constant = _restParam(function(values) {
	        var args = [null].concat(values);
	        return function (callback) {
	            return callback.apply(this, args);
	        };
	    });
	
	    async.wrapSync =
	    async.asyncify = function asyncify(func) {
	        return _restParam(function (args) {
	            var callback = args.pop();
	            var result;
	            try {
	                result = func.apply(this, args);
	            } catch (e) {
	                return callback(e);
	            }
	            // if result is Promise object
	            if (_isObject(result) && typeof result.then === "function") {
	                result.then(function(value) {
	                    callback(null, value);
	                })["catch"](function(err) {
	                    callback(err.message ? err : new Error(err));
	                });
	            } else {
	                callback(null, result);
	            }
	        });
	    };
	
	    // Node.js
	    if (typeof module === 'object' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }
	
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(11).setImmediate, __webpack_require__(2)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(39);

/***/ },
/* 12 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function EntryModuleNotFoundError(err) {
		Error.call(this);
		Error.captureStackTrace(this, EntryModuleNotFoundError);
		this.name = "EntryModuleNotFoundError";
		this.message = "Entry module not found: " + err;
		this.details = err.details;
		this.error = err;
	}
	module.exports = EntryModuleNotFoundError;
	
	EntryModuleNotFoundError.prototype = Object.create(Error.prototype);


/***/ },
/* 13 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleNotFoundError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleNotFoundError);
		this.name = "ModuleNotFoundError";
		this.message = "Module not found: " + err;
		this.details = err.details;
		this.missing = err.missing;
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleNotFoundError;
	
	ModuleNotFoundError.prototype = Object.create(Error.prototype);


/***/ },
/* 14 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CriticalDependenciesWarning(module, dependencies) {
		Error.call(this);
		Error.captureStackTrace(this, CriticalDependenciesWarning);
		this.name = "CriticalDependenciesWarning";
		this.message = "Critical dependencies:";
		this.message += dependencies.filter(function(d) {
			return typeof d.critical === "string" || d.loc;
		}).map(function(dep) {
			var line = [];
			if(dep.loc) line.push(dep.loc.start.line + ":" + dep.loc.start.column + "-" +
				(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column);
			if(typeof dep.critical === "string") line.push(dep.critical);
			return "\n" + line.join(" ");
		}).join("");
		this.dependencies = dependencies;
		this.origin = this.module = module;
	}
	module.exports = CriticalDependenciesWarning;
	
	CriticalDependenciesWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlock = __webpack_require__(16);
	var ModuleReason = __webpack_require__(41);
	
	var debugId = 1000;
	
	function Module() {
		DependenciesBlock.call(this);
		this.context = null;
		this.reasons = [];
		this.debugId = debugId++;
		this.lastId = -1;
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.chunks = [];
		this.warnings = [];
		this.dependenciesWarnings = [];
		this.errors = [];
		this.dependenciesErrors = [];
	}
	module.exports = Module;
	
	Module.prototype = Object.create(DependenciesBlock.prototype);
	
	Module.prototype.disconnect = function() {
		this.reasons.length = 0;
		this.lastId = this.id;
		this.id = null;
		this.index = null;
		this.index2 = null;
		this.chunks.length = 0;
		DependenciesBlock.prototype.disconnect.call(this);
	};
	
	Module.prototype.addChunk = function(chunk) {
		var idx = this.chunks.indexOf(chunk);
		if(idx < 0)
			this.chunks.push(chunk);
	};
	
	Module.prototype._removeAndDo = __webpack_require__(42);
	
	Module.prototype.removeChunk = function(chunk) {
		return this._removeAndDo("chunks", chunk, "removeModule");
	};
	
	Module.prototype.addReason = function(module, dependency) {
		this.reasons.push(new ModuleReason(module, dependency));
	};
	
	Module.prototype.removeReason = function(module, dependency) {
		for(var i = 0; i < this.reasons.length; i++) {
			var r = this.reasons[i];
			if(r.module === module && r.dependency === dependency) {
				this.reasons.splice(i, 1);
				return true;
			}
		}
		return false;
	};
	
	Module.prototype.hasReasonForChunk = function(chunk) {
		for(var i = 0; i < this.reasons.length; i++) {
			var r = this.reasons[i];
			if(r.chunks) {
				if(r.chunks.indexOf(chunk) >= 0)
					return true;
			} else if(r.module.chunks.indexOf(chunk) >= 0)
				return true;
		}
		return false;
	};
	
	function addToSet(set, items) {
		items.forEach(function(item) {
			if(set.indexOf(item) < 0)
				set.push(item);
		});
	}
	
	Module.prototype.rewriteChunkInReasons = function(oldChunk, newChunks) {
		this.reasons.forEach(function(r) {
			if(!r.chunks) {
				if(r.module.chunks.indexOf(oldChunk) < 0)
					return;
				r.chunks = r.module.chunks;
			}
			r.chunks = r.chunks.reduce(function(arr, c) {
				addToSet(arr, c !== oldChunk ? [c] : newChunks);
				return arr;
			}, []);
		});
	};
	
	Module.prototype.toString = function() {
		return "Module[" + (this.id || this.debugId) + "]";
	};
	
	Module.prototype.needRebuild = function( /* fileTimestamps, contextTimestamps */ ) {
		return true;
	};
	
	Module.prototype.updateHash = function(hash) {
		hash.update(this.id + "");
		DependenciesBlock.prototype.updateHash.call(this, hash);
	};
	
	Module.prototype.identifier = null;
	Module.prototype.readableIdentifier = null;
	Module.prototype.build = null;
	Module.prototype.source = null;
	Module.prototype.size = null;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlockVariable = __webpack_require__(17);
	
	function DependenciesBlock() {
		this.dependencies = [];
		this.blocks = [];
		this.variables = [];
	}
	module.exports = DependenciesBlock;
	
	DependenciesBlock.prototype.addBlock = function(block) {
		this.blocks.push(block);
		block.parent = this;
	};
	
	DependenciesBlock.prototype.addVariable = function(name, expression, dependencies) {
		for(var i = 0; i < this.variables.length; i++) {
			var v = this.variables[i];
			if(v.name === name && v.expression === expression) return;
		}
		this.variables.push(new DependenciesBlockVariable(name, expression, dependencies));
	};
	
	DependenciesBlock.prototype.addDependency = function(dependency) {
		this.dependencies.push(dependency);
	};
	
	DependenciesBlock.prototype.updateHash = function(hash) {
		this.dependencies.forEach(function(d) {
			d.updateHash(hash);
		});
		this.blocks.forEach(function(b) {
			b.updateHash(hash);
		});
		this.variables.forEach(function(v) {
			v.updateHash(hash);
		});
	};
	
	DependenciesBlock.prototype.disconnect = function() {
		function disconnect(i) {
			i.disconnect();
		}
		this.dependencies.forEach(disconnect);
		this.blocks.forEach(disconnect);
		this.variables.forEach(disconnect);
	};
	
	DependenciesBlock.prototype.hasDependencies = function() {
		return this.dependencies.length > 0 ||
			this.blocks.concat(this.variables).some(function(item) {
				return item.hasDependencies();
			});
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ReplaceSource = __webpack_require__(18);
	var RawSource = __webpack_require__(40);
	
	function DependenciesBlockVariable(name, expression, dependencies) {
		this.name = name;
		this.expression = expression;
		this.dependencies = dependencies || [];
	}
	module.exports = DependenciesBlockVariable;
	
	DependenciesBlockVariable.prototype.updateHash = function(hash) {
		hash.update(this.name);
		hash.update(this.expression);
		this.dependencies.forEach(function(d) {
			d.updateHash(hash);
		});
	};
	
	DependenciesBlockVariable.prototype.expressionSource = function(dependencyTemplates, outputOptions, requestShortener) {
		var source = new ReplaceSource(new RawSource(this.expression));
		this.dependencies.forEach(function(dep) {
			var template = dependencyTemplates.get(dep.constructor);
			if(!template) throw new Error("No template for dependency: " + dep.constructor.name);
			template.apply(dep, source, outputOptions, requestShortener, dependencyTemplates);
		});
		return source;
	};
	
	DependenciesBlockVariable.prototype.disconnect = function() {
		this.dependencies.forEach(function(d) {
			d.disconnect();
		});
	};
	
	DependenciesBlockVariable.prototype.hasDependencies = function() {
		return this.dependencies.length > 0;
	};


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(19);
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(31).fromStringWithSourceMap;
	var SourceMapConsumer = __webpack_require__(20).SourceMapConsumer;
	
	function ReplaceSource(source, name) {
		Source.call(this);
		this._source = source;
		this._name = name;
		this.replacements = [];
	}
	module.exports = ReplaceSource;
	
	ReplaceSource.prototype = Object.create(Source.prototype);
	ReplaceSource.prototype.constructor = ReplaceSource;
	
	ReplaceSource.prototype.replace = function(start, end, newValue) {
		this.replacements.push([start, end, newValue]);
	};
	
	ReplaceSource.prototype.insert = function(pos, newValue) {
		this.replacements.push([pos, pos-1, newValue]);
	};
	
	ReplaceSource.prototype.source = function(options) {
		return this._replaceString(this._source.source());
	};
	
	ReplaceSource.prototype._sortReplacements = function() {
		this.replacements.forEach(function(item, idx) {
			item[3] = idx;
		});
		this.replacements.sort(function(a, b) {
			var diff = b[1] - a[1];
			if(diff !== 0)
				return diff;
			return b[3] - a[3];
		});
	
	};
	
	ReplaceSource.prototype._replaceString = function(str) {
		this._sortReplacements();
		var result = [str];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitString(remSource, Math.floor(repl[1]+1));
			var splitted2 = this._splitString(splitted1[0], Math.floor(repl[0]));
			result.push(splitted1[1], repl[2], splitted2[0]);
		}, this);
		result = result.reverse();
		return result.join("");
	};
	
	__webpack_require__(39)(ReplaceSource.prototype);
	
	ReplaceSource.prototype.node = function(options) {
		this._sortReplacements();
		var result = [this._source.node(options)];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitSourceNode(remSource, Math.floor(repl[1]+1));
			if(Array.isArray(splitted1)) {
				var splitted2 = this._splitSourceNode(splitted1[0], Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(splitted1[1], this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(splitted1[1], this._replacementToSourceNode(splitted1[1], repl[2]), splitted1[0]);
				}
			} else {
				var splitted2 = this._splitSourceNode(remSource, Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(repl[2], remSource);
				}
			}
		}, this);
		result = result.reverse();
		return new SourceNode(null, null, null, result);
	};
	
	ReplaceSource.prototype.listMap = function(options) {
		var map = this._source.listMap(options);
		if(map.children.length !== 1) {
			var code = map.toString();
			code = this._replaceString(code).split("\n");
			var currentIndex = 0;
			map.mapGeneratedCode(function(str) {
				var idx = -1;
				var count = -1;
				do {
					count++;
					idx = str.indexOf("\n", idx + 1);
				} while(idx >= 0);
				if(!count) return "";
				var result = code.slice(currentIndex, currentIndex + count).join("\n") + "\n";
				currentIndex += count;
				return result;
			});
			map.add(code.slice(currentIndex).join("\n"));
		} else {
			map.mapGeneratedCode(this._replaceString.bind(this));
		}
		return map;
	};
	
	ReplaceSource.prototype._replacementToSourceNode = function(oldNode, newString) {
		var map = oldNode.toStringWithSourceMap({ file: "?" }).map;
		var original = new SourceMapConsumer(map.toJSON()).originalPositionFor({ line: 1, column: 0 });
		if(original) {
			return new SourceNode(original.line, original.column, original.source, newString);
		} else {
			return newString;
		}
	};
	
	ReplaceSource.prototype._splitSourceNode = function(node, position) {
		if(typeof node === "string") {
			if(node.length <= position) return position - node.length;
			return [node.substr(0, position), node.substr(position)];
		} else {
			for(var i = 0; i < node.children.length; i++) {
				position = this._splitSourceNode(node.children[i], position);
				if(Array.isArray(position)) {
					var leftNode = new SourceNode(
						node.line,
						node.column,
						node.source,
						node.children.slice(0, i).concat([position[0]]),
						node.name
					);
					var rightNode = new SourceNode(
						node.line,
						node.column,
						node.source,
						[position[1]].concat(node.children.slice(i+1)),
						node.name
					);
					leftNode.sourceContents = node.sourceContents;
					return [leftNode, rightNode];
				}
			}
			return position;
		}
	};
	
	ReplaceSource.prototype._splitString = function(str, position) {
		return [str.substr(0, position), str.substr(position)];
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceMapConsumer = __webpack_require__(20).SourceMapConsumer;
	
	function Source() {}
	
	module.exports = Source;
	
	Source.prototype.source = null;
	
	Source.prototype.size = function() {
		return this.source().length;
	};
	
	Source.prototype.map = function(options) {
		return null;
	};
	
	Source.prototype.sourceAndMap = function(options) {
		return {
			source: this.source(),
			map: this.map()
		};
	};
	
	Source.prototype.node = null;
	
	Source.prototype.listNode = null;
	
	Source.prototype.updateHash = function(hash) {
		var source = this.source();
		hash.update(source || "");
	};


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(21).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(27).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(30).SourceNode;


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var base64VLQ = __webpack_require__(22);
	  var util = __webpack_require__(24);
	  var ArraySet = __webpack_require__(25).ArraySet;
	  var MappingList = __webpack_require__(26).MappingList;
	
	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }
	
	  SourceMapGenerator.prototype._version = 3;
	
	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };
	
	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }
	
	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };
	
	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }
	
	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };
	
	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);
	
	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }
	
	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }
	
	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }
	
	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };
	
	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }
	
	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };
	
	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();
	
	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }
	
	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }
	
	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }
	
	      }, this);
	      this._sources = newSources;
	      this._names = newNames;
	
	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };
	
	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };
	
	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;
	
	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];
	
	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }
	
	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;
	
	        if (mapping.source != null) {
	          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
	                                     - previousSource);
	          previousSource = this._sources.indexOf(mapping.source);
	
	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;
	
	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;
	
	          if (mapping.name != null) {
	            result += base64VLQ.encode(this._names.indexOf(mapping.name)
	                                       - previousName);
	            previousName = this._names.indexOf(mapping.name);
	          }
	        }
	      }
	
	      return result;
	    };
	
	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };
	
	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }
	
	      return map;
	    };
	
	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };
	
	  exports.SourceMapGenerator = SourceMapGenerator;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var base64 = __webpack_require__(23);
	
	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011
	
	  var VLQ_BASE_SHIFT = 5;
	
	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }
	
	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }
	
	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;
	
	    var vlq = toVLQSigned(aValue);
	
	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);
	
	    return encoded;
	  };
	
	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;
	
	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }
	
	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }
	
	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);
	
	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	
	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + aNumber);
	  };
	
	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'
	
	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'
	
	    var zero = 48;     // '0'
	    var nine = 57;     // '9'
	
	    var plus = 43;     // '+'
	    var slash = 47;    // '/'
	
	    var littleOffset = 26;
	    var numberOffset = 52;
	
	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }
	
	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }
	
	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }
	
	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }
	
	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }
	
	    // Invalid base64 digit.
	    return -1;
	  };
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;
	
	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;
	
	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;
	
	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;
	
	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = (path.charAt(0) === '/');
	
	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');
	
	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }
	
	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;
	
	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }
	
	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }
	
	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }
	
	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }
	
	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	
	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;
	
	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	
	    aRoot = aRoot.replace(/\/$/, '');
	
	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }
	
	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }
	
	      ++level;
	    }
	
	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;
	
	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;
	
	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;
	
	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByOriginalPositions = compareByOriginalPositions;
	
	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }
	
	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return mappingA.name - mappingB.name;
	  };
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	
	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }
	
	    if (aStr1 > aStr2) {
	      return 1;
	    }
	
	    return -1;
	  }
	
	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }
	
	    return strcmp(mappingA.name, mappingB.name);
	  };
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var util = __webpack_require__(24);
	
	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }
	
	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };
	
	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };
	
	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var isDuplicate = this.has(aStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[util.toSetString(aStr)] = idx;
	    }
	  };
	
	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    return Object.prototype.hasOwnProperty.call(this._set,
	                                                util.toSetString(aStr));
	  };
	
	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    if (this.has(aStr)) {
	      return this._set[util.toSetString(aStr)];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };
	
	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };
	
	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };
	
	  exports.ArraySet = ArraySet;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var util = __webpack_require__(24);
	
	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }
	
	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }
	
	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };
	
	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    var mapping;
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };
	
	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };
	
	  exports.MappingList = MappingList;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var util = __webpack_require__(24);
	  var binarySearch = __webpack_require__(28);
	  var ArraySet = __webpack_require__(25).ArraySet;
	  var base64VLQ = __webpack_require__(22);
	  var quickSort = __webpack_require__(29).quickSort;
	
	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }
	
	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;
	
	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.
	
	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }
	
	      return this.__generatedMappings;
	    }
	  });
	
	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }
	
	      return this.__originalMappings;
	    }
	  });
	
	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };
	
	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;
	
	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	
	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	
	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }
	
	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };
	
	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');
	
	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };
	
	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);
	
	      var mappings = [];
	
	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	
	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;
	
	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });
	
	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;
	
	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });
	
	            mapping = this._originalMappings[++index];
	          }
	        }
	      }
	
	      return mappings;
	    };
	
	  exports.SourceMapConsumer = SourceMapConsumer;
	
	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);
	
	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }
	
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    sources = sources.map(util.normalize);
	
	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);
	
	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }
	
	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	
	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);
	
	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;
	
	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.
	
	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];
	
	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;
	
	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;
	
	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }
	
	          destOriginalMappings.push(destMapping);
	        }
	
	        destGeneratedMappings.push(destMapping);
	      }
	
	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	
	      return smc;
	    };
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;
	
	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });
	
	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;
	
	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;
	
	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);
	
	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }
	
	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }
	
	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }
	
	            cachedSegments[str] = segment;
	          }
	
	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;
	
	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];
	
	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;
	
	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;
	
	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }
	
	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }
	
	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;
	
	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };
	
	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.
	
	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }
	
	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };
	
	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];
	
	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];
	
	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }
	
	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };
	
	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };
	
	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );
	
	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];
	
	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }
	
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };
	
	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };
	
	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * availible.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }
	
	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }
	
	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }
	
	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }
	
	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }
	
	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };
	
	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);
	
	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };
	
	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );
	
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];
	
	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }
	
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };
	
	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	
	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }
	
	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');
	
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }
	
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	
	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');
	
	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;
	
	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }
	
	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	
	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;
	
	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      };
	      return sources;
	    }
	  });
	
	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };
	
	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }
	
	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];
	
	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }
	
	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };
	
	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };
	
	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	
	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };
	
	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	
	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }
	
	      return {
	        line: null,
	        column: null
	      };
	    };
	
	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[i];
	
	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);
	
	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);
	
	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.column +
	              (section.generatedOffset.generatedLine === mapping.generatedLine)
	              ? section.generatedOffset.generatedColumn - 1
	              : 0,
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };
	
	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        };
	      };
	
	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };
	
	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;
	
	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }
	
	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }
	
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }
	
	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }
	
	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }
	
	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }
	
	    return index;
	  };
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.
	
	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }
	
	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }
	
	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.
	
	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.
	
	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;
	
	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];
	
	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }
	
	      swap(ary, i + 1, j);
	      var q = i + 1;
	
	      // (2) Recurse on each half.
	
	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }
	
	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {
	
	  var SourceMapGenerator = __webpack_require__(21).SourceMapGenerator;
	  var util = __webpack_require__(24);
	
	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;
	
	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;
	
	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";
	
	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }
	
	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();
	
	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };
	
	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	
	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;
	
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            var code = "";
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }
	
	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });
	
	      return node;
	
	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };
	
	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };
	
	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };
	
	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };
	
	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };
	
	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };
	
	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };
	
	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }
	
	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };
	
	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };
	
	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });
	
	    return { code: generated.code, map: map };
	  };
	
	  exports.SourceNode = SourceNode;
	
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	exports.SourceListMap = __webpack_require__(32);
	exports.SourceNode = __webpack_require__(35);
	exports.CodeNode = __webpack_require__(33);
	exports.MappingsContext = __webpack_require__(37);
	exports.fromStringWithSourceMap = __webpack_require__(38);


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var CodeNode = __webpack_require__(33);
	var SourceNode = __webpack_require__(35);
	var MappingsContext = __webpack_require__(37);
	
	function SourceListMap(generatedCode, source, originalSource) {
		if(Array.isArray(generatedCode)) {
			this.children = generatedCode;
		} else {
			this.children = [];
			if(generatedCode || source)
				this.add(generatedCode, source, originalSource);
		}
	}
	module.exports = SourceListMap;
	
	SourceListMap.prototype.add = function(generatedCode, source, originalSource) {
		if(typeof generatedCode === "string") {
			if(source) {
				this.children.push(new SourceNode(generatedCode, source, originalSource));
			} else if(this.children.length > 0 && this.children[this.children.length - 1].addGeneratedCode) {
				this.children[this.children.length - 1].addGeneratedCode(generatedCode);
			} else {
				this.children.push(new CodeNode(generatedCode));
			}
		} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {
			this.children.push(generatedCode);
		} else if(generatedCode.children) {
			generatedCode.children.forEach(function(sln) {
				this.children.push(sln);
			}, this);
		} else {
			throw new Error("Invalid arguments to SourceListMap.prototype.add: Expected string, Node or SourceListMap");
		}
	};
	
	SourceListMap.prototype.preprend = function(source) {
		if(typeof generatedCode === "string") {
			if(source) {
				this.children.unshift(new SourceNode(generatedCode, source, originalSource));
			} else if(this.children.length > 0 && this.children[this.children.length - 1].preprendGeneratedCode) {
				this.children[this.children.length - 1].preprendGeneratedCode(generatedCode);
			} else {
				this.children.unshift(new CodeNode(generatedCode));
			}
		} else if(generatedCode.getMappings && generatedCode.getGeneratedCode) {
			this.children.unshift(generatedCode);
		} else if(generatedCode.children) {
			generatedCode.children.slice().reverse().forEach(function(sln) {
				this.children.unshift(sln);
			}, this);
		} else {
			throw new Error("Invalid arguments to SourceListMap.prototype.prerend: Expected string, Node or SourceListMap");
		}
	};
	
	SourceListMap.prototype.mapGeneratedCode = function(fn) {
		this.children.forEach(function(sln) {
			sln.mapGeneratedCode(fn);
		});
	};
	
	SourceListMap.prototype.toString = function() {
		return this.children.map(function(sln) {
			return sln.getGeneratedCode();
		}).join("");
	};
	
	SourceListMap.prototype.toStringWithSourceMap = function(options) {
		var mappingsContext = new MappingsContext();
		var source = this.children.map(function(sln) {
			return sln.generatedCode;
		}).join("");
		var mappings = this.children.map(function(sln) {
			return sln.getMappings(mappingsContext);
		}).join("");
		return {
			source: source,
			map: {
				version: 3,
				file: options && options.file,
				sources: mappingsContext.sources,
				sourcesContent: mappingsContext.hasSourceContent ? mappingsContext.sourcesContent : undefined,
				mappings: mappings
			}
		};
	}


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var getNumberOfLines = __webpack_require__(34).getNumberOfLines;
	
	function CodeNode(generatedCode) {
		this.generatedCode = generatedCode;
	}
	module.exports = CodeNode;
	
	CodeNode.prototype.clone = function() {
		return new CodeNode(this.generatedCode);
	}
	
	CodeNode.prototype.getGeneratedCode = function() {
		return this.generatedCode;
	};
	
	CodeNode.prototype.getMappings = function(mappingsContext) {
		var lines = getNumberOfLines(this.generatedCode);
		return Array(lines+1).join(";");
	};
	
	CodeNode.prototype.addGeneratedCode = function(generatedCode) {
		this.generatedCode += generatedCode;
	};
	
	CodeNode.prototype.mapGeneratedCode = function(fn) {
		this.generatedCode = fn(this.generatedCode);
	};


/***/ },
/* 34 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	exports.getNumberOfLines = function getNumberOfLines(str) {
		var nr = -1;
		var idx = -1;
		do {
			nr++
			idx = str.indexOf("\n", idx + 1);
		} while(idx >= 0);
		return nr;
	};


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var base64VLQ = __webpack_require__(36);
	var getNumberOfLines = __webpack_require__(34).getNumberOfLines;
	
	function SourceNode(generatedCode, source, originalSource, startingLine) {
		this.generatedCode = generatedCode;
		this.originalSource = originalSource;
		this.source = source;
		this.startingLine = startingLine || 1;
	}
	module.exports = SourceNode;
	
	SourceNode.prototype.clone = function() {
		return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);
	}
	
	var LINE_MAPPING = "AACA;";
	var LAST_LINE_MAPPING = "AACA";
	
	SourceNode.prototype.getGeneratedCode = function() {
		return this.generatedCode;
	};
	
	SourceNode.prototype.getMappings = function(mappingsContext) {
		var lines = getNumberOfLines(this.generatedCode);
		var sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);
		var mappings = "A"; // generated column 0
		mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index
		mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index
		mappings += "A"; // original column 0
		if(lines !== 0)
			mappings += ";"
		mappingsContext.currentSource = sourceIdx;
		mappingsContext.currentOriginalLine = (lines || 1) + this.startingLine - 1;
		mappings += Array(lines).join(LINE_MAPPING);
		if(lines !== 0 && this.generatedCode[this.generatedCode.length - 1] !== "\n") {
			mappings += LAST_LINE_MAPPING;
			mappingsContext.currentOriginalLine++;
		}
		return mappings;
	};
	
	SourceNode.prototype.mapGeneratedCode = function(fn) {
		this.generatedCode = fn(this.generatedCode);
	};


/***/ },
/* 36 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	/*eslint no-bitwise:0,quotes:0,global-strict:0*/
	
	var charToIntMap = {};
	var intToCharMap = {};
	
	'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	  .split('')
	  .forEach(function (ch, index) {
	    charToIntMap[ch] = index;
	    intToCharMap[index] = ch;
	  });
	
	var base64 = {};
	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	base64.encode = function base64_encode(aNumber) {
	  if (aNumber in intToCharMap) {
	    return intToCharMap[aNumber];
	  }
	  throw new TypeError("Must be between 0 and 63: " + aNumber);
	};
	
	/**
	 * Decode a single base 64 digit to an integer.
	 */
	base64.decode = function base64_decode(aChar) {
	  if (aChar in charToIntMap) {
	    return charToIntMap[aChar];
	  }
	  throw new TypeError("Not a valid base 64 digit: " + aChar);
	};
	
	
	
	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011
	
	var VLQ_BASE_SHIFT = 5;
	
	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}
	
	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}
	
	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;
	
	  var vlq = toVLQSigned(aValue);
	
	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);
	
	  return encoded;
	};
	
	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aOutParam) {
	  var i = 0;
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;
	
	  do {
	    if (i >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	    digit = base64.decode(aStr.charAt(i++));
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);
	
	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aStr.slice(i);
	};


/***/ },
/* 37 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MappingsContext() {
		this.sources = [];
		this.sourcesContent = [];
		this.hasSourceContent = false;
		this.currentOriginalLine = 1;
		this.currentSource = 0;
	}
	module.exports = MappingsContext;
	
	MappingsContext.prototype.ensureSource = function(source, originalSource) {
		var idx = this.sources.indexOf(source);
		if(idx >= 0)
			return idx;
		idx = this.sources.length;
		this.sources.push(source);
		this.sourcesContent.push(originalSource);
		if(typeof originalSource === "string")
			this.hasSourceContent = true;
		return idx;
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var base64VLQ = __webpack_require__(36);
	var SourceNode = __webpack_require__(35);
	var CodeNode = __webpack_require__(33);
	var SourceListMap = __webpack_require__(32);
	
	module.exports = function fromStringWithSourceMap(code, map) {
		var sources = map.sources;
		var sourcesContent = map.sourcesContent;
		var mappings = map.mappings.split(";");
		var lines = code.split("\n");
		var nodes = [];
		var currentNode = null;
		var currentLine = 1;
		var currentSourceIdx = 0;
		var currentSourceNodeLine;
		mappings.forEach(function(mapping, idx) {
			var line = lines[idx];
			if(typeof line === 'undefined') return;
			if(idx !== lines.length - 1) line += "\n";
			if(!mapping)
				return addCode(line);
			mapping = { value: 0, rest: mapping };
			var lineAdded = false;
			while(mapping.rest)
				lineAdded = processMapping(mapping, line, lineAdded) || lineAdded;
			if(!lineAdded)
				addCode(line);
		});
		if(mappings.length < lines.length) {
			var idx = mappings.length;
			while(!lines[idx].trim() && idx < lines.length-1) {
				addCode(lines[idx] + "\n");
				idx++;
			}
			addCode(lines.slice(idx).join("\n"));
		}
		return new SourceListMap(nodes);
		function processMapping(mapping, line, ignore) {
			if(mapping.rest && mapping.rest[0] !== ",") {
				base64VLQ.decode(mapping.rest, mapping);
			}
			if(!mapping.rest)
				return false;
			if(mapping.rest[0] === ",") {
				mapping.rest = mapping.rest.substr(1);
				return false;
			}
	
			base64VLQ.decode(mapping.rest, mapping);
			var sourceIdx = mapping.value + currentSourceIdx;
			currentSourceIdx = sourceIdx;
	
			if(mapping.rest && mapping.rest[0] !== ",") {
				base64VLQ.decode(mapping.rest, mapping);
				var linePosition = mapping.value + currentLine;
				currentLine = linePosition;
			} else {
				var linePosition = currentLine;
			}
	
			if(mapping.rest) {
				var next = mapping.rest.indexOf(",");
				mapping.rest = next === -1 ? "" : mapping.rest.substr(next);
			}
	
			if(!ignore) {
				addSource(line, sources ? sources[sourceIdx] : null, sourcesContent ? sourcesContent[sourceIdx] : null, linePosition)
				return true;
			}
		}
		function addCode(generatedCode) {
			if(currentNode && currentNode instanceof CodeNode) {
				currentNode.addGeneratedCode(generatedCode);
			} else if(currentNode && currentNode instanceof SourceNode && !generatedCode.trim()) {
				currentNode.generatedCode += generatedCode;
				currentSourceNodeLine++;
			} else {
				currentNode = new CodeNode(generatedCode);
				nodes.push(currentNode);
			}
		}
		function addSource(generatedCode, source, originalSource, linePosition) {
			if(currentNode && currentNode instanceof SourceNode &&
				currentNode.source === source &&
				currentSourceNodeLine === linePosition
			) {
				currentNode.generatedCode += generatedCode;
				currentSourceNodeLine++;
			} else {
				currentNode = new SourceNode(generatedCode, source, originalSource, linePosition);
				currentSourceNodeLine = linePosition + 1;
				nodes.push(currentNode);
			}
		}
	};


/***/ },
/* 39 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function mixinSourceAndMap(proto) {
		proto.map = function(options) {
			options = options || {};
			if(options.columns === false) {
				return this.listMap(options).toStringWithSourceMap().map;
			}
	
			return this.node(options).toStringWithSourceMap({file:"x"}).map.toJSON();
		};
	
		proto.sourceAndMap = function(options) {
			options = options || {};
			if(options.columns === false) {
				//console.log(this.listMap(options).debugInfo());
				return this.listMap(options).toStringWithSourceMap();
			}
	
			var res = this.node(options).toStringWithSourceMap({file:"x"});
			return {
				source: res.code,
				map: res.map.toJSON()
			};
		};
	}


/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(19);
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	
	function RawSource(value) {
		Source.call(this);
		this._value = value;
	}
	module.exports = RawSource;
	
	RawSource.prototype = Object.create(Source.prototype);
	RawSource.prototype.constructor = RawSource;
	
	RawSource.prototype.source = function() {
		return this._value;
	};
	
	RawSource.prototype.map = function(options) {
		return null;
	};
	
	RawSource.prototype.node = function(options) {
		return new SourceNode(null, null, null, this._value);
	};
	
	RawSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value);
	};
	
	RawSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 41 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleReason(module, dependency) {
		this.module = module;
		this.dependency = dependency;
	}
	module.exports = ModuleReason;


/***/ },
/* 42 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function removeAndDo(collection, thing, action) {
		var idx = this[collection].indexOf(thing);
		if(idx >= 0) {
			this[collection].splice(idx, 1);
			thing[action](this);
			return true;
		}
		return false;
	};


/***/ },
/* 43 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ArrayMap() {
		this.keys = [];
		this.values = [];
	}
	module.exports = ArrayMap;
	
	ArrayMap.prototype.get = function(key) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				return this.values[i];
			}
		}
		return;
	};
	
	ArrayMap.prototype.set = function(key, value) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				this.values[i] = value;
				return this;
			}
		}
		this.keys.push(key);
		this.values.push(value);
		return this;
	};
	
	ArrayMap.prototype.remove = function(key) {
		for(var i = 0; i < this.keys.length; i++) {
			if(this.keys[i] === key) {
				this.keys.splice(i, 1);
				this.values.splice(i, 1);
				return true;
			}
		}
		return false;
	};
	
	ArrayMap.prototype.clone = function() {
		var newMap = new ArrayMap();
		for(var i = 0; i < this.keys.length; i++) {
			newMap.keys.push(this.keys[i]);
			newMap.values.push(this.values[i]);
		}
		return newMap;
	};


/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Chunk(name, module, loc) {
		this.id = null;
		this.ids = null;
		this.name = name;
		this.modules = [];
		this.chunks = [];
		this.parents = [];
		this.blocks = [];
		this.origins = [];
		this.files = [];
		this.rendered = false;
		this.entry = false;
		this.initial = false;
		if(module) {
			this.origins.push({
				module: module,
				loc: loc,
				name: name
			});
		}
	}
	module.exports = Chunk;
	
	Chunk.prototype.addModule = function(module) {
		if(this.modules.indexOf(module) >= 0) {
			return false;
		}
		this.modules.push(module);
		return true;
	};
	
	Chunk.prototype._removeAndDo = __webpack_require__(42);
	
	Chunk.prototype.removeModule = function(module) {
		this._removeAndDo("modules", module, "removeChunk");
	};
	
	Chunk.prototype.removeChunk = function(chunk) {
		this._removeAndDo("chunks", chunk, "removeParent");
	};
	
	Chunk.prototype.removeParent = function(chunk) {
		this._removeAndDo("parents", chunk, "removeChunk");
	};
	
	function createAdder(collection) {
		return function(chunk) {
			if(chunk === this) {
				return false;
			}
			if(this[collection].indexOf(chunk) >= 0) {
				return false;
			}
			this[collection].push(chunk);
			return true;
		};
	}
	
	Chunk.prototype.addChunk = createAdder("chunks");
	
	Chunk.prototype.addParent = createAdder("parents");
	
	Chunk.prototype.addBlock = function(block) {
		if(this.blocks.indexOf(block) >= 0) {
			return false;
		}
		this.blocks.push(block);
		return true;
	};
	
	Chunk.prototype.addOrigin = function(module, loc) {
		this.origins.push({
			module: module,
			loc: loc,
			name: this.name
		});
	};
	
	Chunk.prototype.remove = function(reason) {
		this.modules.slice().forEach(function(m) {
			m.removeChunk(this);
		}, this);
		this.parents.forEach(function(c) {
			var idx = c.chunks.indexOf(this);
			if(idx >= 0) {
				c.chunks.splice(idx, 1);
			}
			this.chunks.forEach(function(cc) {
				cc.addParent(c);
			});
		}, this);
		this.chunks.forEach(function(c) {
			var idx = c.parents.indexOf(this);
			if(idx >= 0) {
				c.parents.splice(idx, 1);
			}
			this.parents.forEach(function(cc) {
				cc.addChunk(c);
			});
		}, this);
		this.blocks.forEach(function(b) {
			var idx = b.chunks.indexOf(this);
			if(idx >= 0) {
				b.chunks.splice(idx, 1);
				if(b.chunks.length === 0) {
					b.chunks = null;
					b.chunkReason = reason;
				}
			}
		}, this);
	};
	
	Chunk.prototype.integrate = function(other, reason) {
		if(!this.canBeIntegrated(other)) {
			return false;
		}
	
		var otherModules = other.modules.slice();
		otherModules.forEach(function(m) {
			m.removeChunk(other);
			m.addChunk(this);
			this.addModule(m);
			m.rewriteChunkInReasons(other, [this]);
		}, this);
		other.modules.length = 0;
	
		function moveChunks(chunks, kind, onChunk) {
			chunks.forEach(function(c) {
				var idx = c[kind].indexOf(other);
				if(idx >= 0) {
					c[kind].splice(idx, 1);
				}
				onChunk(c);
			});
		}
		moveChunks(other.parents, "chunks", function(c) {
			if(c !== this && this.addParent(c)) {
				c.addChunk(this);
			}
		}.bind(this));
		other.parents.length = 0;
		moveChunks(other.chunks, "parents", function(c) {
			if(c !== this && this.addChunk(c)) {
				c.addParent(this);
			}
		}.bind(this));
		other.chunks.length = 0;
		other.blocks.forEach(function(b) {
			b.chunks = (b.chunks || [this]).map(function(c) {
				return c === other ? this : c;
			}, this);
			b.chunkReason = reason;
			this.addBlock(b);
		}, this);
		other.blocks.length = 0;
		other.origins.forEach(function(origin) {
			if(!origin.reasons) {
				origin.reasons = [reason];
			} else if(origin.reasons[0] !== reason) {
				origin.reasons.unshift(reason);
			}
			this.origins.push(origin);
		}, this);
		return true;
	};
	
	Chunk.prototype.isEmpty = function() {
		return this.modules.length === 0;
	};
	
	Chunk.prototype.updateHash = function(hash) {
		hash.update(this.id + " ");
		hash.update(this.ids ? this.ids.join(",") : "");
		hash.update(this.name + "");
		this.modules.forEach(function(m) {
			m.updateHash(hash);
		});
	};
	
	Chunk.prototype.size = function(options) {
		var CHUNK_OVERHEAD = options.chunkOverhead || 10000;
		var ENTRY_CHUNK_MULTIPLICATOR = options.entryChunkMultiplicator || 10;
	
		var modulesSize = this.modules.reduce(function(a, b) {
			return a + b.size();
		}, 0);
		return modulesSize * (this.initial ? ENTRY_CHUNK_MULTIPLICATOR : 1) + CHUNK_OVERHEAD;
	};
	
	Chunk.prototype.canBeIntegrated = function(other) {
		if(other.initial) {
			return false;
		}
		if(this.initial) {
			if(other.parents.length !== 1 || other.parents[0] !== this) {
				return false;
			}
		}
		return true;
	};
	
	Chunk.prototype.integratedSize = function(other, options) {
		// Chunk if it's possible to integrate this chunk
		if(!this.canBeIntegrated(other)) {
			return false;
		}
	
		var CHUNK_OVERHEAD = options.chunkOverhead || 10000;
		var ENTRY_CHUNK_MULTIPLICATOR = options.entryChunkMultiplicator || 10;
	
		var mergedModules = this.modules.slice();
		other.modules.forEach(function(m) {
			if(this.modules.indexOf(m) < 0) {
				mergedModules.push(m);
			}
		}, this);
	
		var modulesSize = mergedModules.map(function(m) {
			return m.size();
		}).reduce(function(a, b) {
			return a + b;
		}, 0);
		return modulesSize * (this.initial || other.initial ? ENTRY_CHUNK_MULTIPLICATOR : 1) + CHUNK_OVERHEAD;
	};
	
	Chunk.prototype.getChunkMaps = function(includeEntries, realHash) {
		var chunksProcessed = [];
		var chunkHashMap = {};
		var chunkNameMap = {};
		(function addChunk(c) {
			if(chunksProcessed.indexOf(c) >= 0) return;
			chunksProcessed.push(c);
			if(!c.entry || includeEntries) {
				chunkHashMap[c.id] = realHash ? c.hash : c.renderedHash;
				if(c.name)
					chunkNameMap[c.id] = c.name;
			}
			c.chunks.forEach(addChunk);
		}(this));
		return {
			hash: chunkHashMap,
			name: chunkNameMap
		};
	};
	
	Chunk.prototype.toString = function() {
		return "Chunk[" + this.modules.join() + "]";
	};


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequestShortener = __webpack_require__(46);
	
	function Stats(compilation) {
		this.compilation = compilation;
		this.hash = compilation.hash;
	}
	module.exports = Stats;
	
	Stats.prototype.hasWarnings = function() {
		return this.compilation.warnings.length > 0;
	};
	
	Stats.prototype.hasErrors = function() {
		return this.compilation.errors.length > 0;
	};
	
	Stats.prototype.toJson = function toJson(options, forToString) {
		if(typeof options === "boolean" || typeof options === "string") {
			options = Stats.presetToOptions(options);
		} else if(!options) {
			options = {};
		}
	
		function d(v, def) {
			return v === undefined ? def : v;
		}
		var compilation = this.compilation;
		var requestShortener = new RequestShortener(d(options.context, process.cwd()));
		var showHash = d(options.hash, true);
		var showVersion = d(options.version, true);
		var showTimings = d(options.timings, true);
		var showAssets = d(options.assets, true);
		var showChunks = d(options.chunks, true);
		var showChunkModules = d(options.chunkModules, !!forToString);
		var showChunkOrigins = d(options.chunkOrigins, !forToString);
		var showModules = d(options.modules, !forToString);
		var showCachedModules = d(options.cached, true);
		var showCachedAssets = d(options.cachedAssets, true);
		var showReasons = d(options.reasons, !forToString);
		var showChildren = d(options.children, true);
		var showSource = d(options.source, !forToString);
		var showErrors = d(options.errors, true);
		var showErrorDetails = d(options.errorDetails, !forToString);
		var showWarnings = d(options.warnings, true);
		var showPublicPath = d(options.publicPath, !forToString);
		var excludeModules = [].concat(d(options.exclude, [])).map(function(str) {
			if(typeof str !== "string") return str;
			return new RegExp("[\\\\/]" + str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + "([\\\\/]|$|!|\\?)");
		});
		var sortModules = d(options.modulesSort, "id");
		var sortChunks = d(options.chunksSort, "id");
		var sortAssets = d(options.assetsSort, "");
	
		function moduleFilter(module) {
			if(!showCachedModules && !module.built) {
				return false;
			}
			if(excludeModules.length === 0)
				return true;
			var ident = module.identifier();
			return !excludeModules.some(function(regExp) {
				return regExp.test(ident);
			});
		}
	
		function sortByField(field) {
			if(!field) return function() {
				return 0;
			};
			if(field[0] === "!") {
				field = field.substr(1);
				return function(a, b) {
					if(a[field] === b[field]) return 0;
					return a[field] < b[field] ? 1 : -1;
				};
			}
			return function(a, b) {
				if(a[field] === b[field]) return 0;
				return a[field] < b[field] ? -1 : 1;
			};
		}
	
		function formatError(e) {
			var text = "";
			if(typeof e === "string")
				e = {
					message: e
				};
			if(e.chunk) {
				text += "chunk " + (e.chunk.name || e.chunk.id) +
					(e.chunk.entry ? " [entry]" : e.chunk.initial ? " [initial]" : "") + "\n";
			}
			if(e.file) {
				text += e.file + "\n";
			}
			if(e.module && e.module.readableIdentifier && typeof e.module.readableIdentifier === "function") {
				text += e.module.readableIdentifier(requestShortener) + "\n";
			}
			text += e.message;
			if(showErrorDetails && e.details) text += "\n" + e.details;
			if(showErrorDetails && e.missing) text += e.missing.map(function(item) {
				return "\n[" + item + "]";
			}).join("");
			if(e.dependencies && e.origin) {
				text += "\n @ " + e.origin.readableIdentifier(requestShortener);
				e.dependencies.forEach(function(dep) {
					if(!dep.loc) return;
					if(typeof dep.loc === "string") return;
					if(!dep.loc.start) return;
					if(!dep.loc.end) return;
					text += " " + dep.loc.start.line + ":" + dep.loc.start.column + "-" +
						(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column;
				});
			}
			return text;
		}
	
		var obj = {
			errors: compilation.errors.map(formatError),
			warnings: compilation.warnings.map(formatError)
		};
	
		//We just hint other renderers since actually omitting
		//errors/warnings from the JSON would be kind of weird.
		Object.defineProperty(obj, "_showWarnings", {
			value: showWarnings,
			enumerable: false
		});
		Object.defineProperty(obj, "_showErrors", {
			value: showErrors,
			enumerable: false
		});
	
		if(showVersion) {
			obj.version = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"../package.json\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).version;
		}
	
		if(showHash) obj.hash = this.hash;
		if(showTimings && this.startTime && this.endTime) {
			obj.time = this.endTime - this.startTime;
		}
		if(showPublicPath) {
			obj.publicPath = this.compilation.mainTemplate.getPublicPath({
				hash: this.compilation.hash
			});
		}
		if(showAssets) {
			var assetsByFile = {};
			obj.assetsByChunkName = {};
			obj.assets = Object.keys(compilation.assets).map(function(asset) {
				var obj = {
					name: asset,
					size: compilation.assets[asset].size(),
					chunks: [],
					chunkNames: [],
					emitted: compilation.assets[asset].emitted
				};
				assetsByFile[asset] = obj;
				return obj;
			}).filter(function(asset) {
				return showCachedAssets || asset.emitted;
			});
			compilation.chunks.forEach(function(chunk) {
				chunk.files.forEach(function(asset) {
					if(assetsByFile[asset]) {
						chunk.ids.forEach(function(id) {
							assetsByFile[asset].chunks.push(id);
						});
						if(chunk.name) {
							assetsByFile[asset].chunkNames.push(chunk.name);
							if(obj.assetsByChunkName[chunk.name])
								obj.assetsByChunkName[chunk.name] = [].concat(obj.assetsByChunkName[chunk.name]).concat([asset]);
							else
								obj.assetsByChunkName[chunk.name] = asset;
						}
					}
				});
			});
			obj.assets.sort(sortByField(sortAssets));
		}
	
		function fnModule(module) {
			var obj = {
				id: module.id,
				identifier: module.identifier(),
				name: module.readableIdentifier(requestShortener),
				index: module.index,
				index2: module.index2,
				size: module.size(),
				cacheable: !!module.cacheable,
				built: !!module.built,
				optional: !!module.optional,
				prefetched: !!module.prefetched,
				chunks: module.chunks.map(function(chunk) {
					return chunk.id;
				}),
				assets: Object.keys(module.assets || {}),
				issuer: module.issuer,
				profile: module.profile,
				failed: !!module.error,
				errors: module.errors && module.dependenciesErrors && (module.errors.length + module.dependenciesErrors.length),
				warnings: module.errors && module.dependenciesErrors && (module.warnings.length + module.dependenciesWarnings.length)
			};
			if(showReasons) {
				obj.reasons = module.reasons.filter(function(reason) {
					return reason.dependency && reason.module;
				}).map(function(reason) {
					var obj = {
						moduleId: reason.module.id,
						moduleIdentifier: reason.module.identifier(),
						module: reason.module.readableIdentifier(requestShortener),
						moduleName: reason.module.readableIdentifier(requestShortener),
						type: reason.dependency.type,
						userRequest: reason.dependency.userRequest
					};
					var dep = reason.dependency;
					if(dep.templateModules) obj.templateModules = dep.templateModules.map(function(module) {
						return module.id;
					});
					if(typeof dep.loc === "object") obj.loc = dep.loc.start.line + ":" + dep.loc.start.column + "-" +
						(dep.loc.start.line !== dep.loc.end.line ? dep.loc.end.line + ":" : "") + dep.loc.end.column;
					return obj;
				}).sort(function(a, b) {
					return a.moduleId - b.moduleId;
				});
			}
			if(showSource && module._source) {
				obj.source = module._source.source();
			}
			return obj;
		}
		if(showChunks) {
			obj.chunks = compilation.chunks.map(function(chunk) {
				var obj = {
					id: chunk.id,
					rendered: chunk.rendered,
					initial: !!chunk.initial,
					entry: !!chunk.entry,
					extraAsync: !!chunk.extraAsync,
					size: chunk.modules.reduce(function(size, module) {
						return size + module.size();
					}, 0),
					names: chunk.name ? [chunk.name] : [],
					files: chunk.files.slice(),
					hash: chunk.renderedHash,
					parents: chunk.parents.map(function(c) {
						return c.id;
					})
				};
				if(showChunkModules) {
					obj.modules = chunk.modules.filter(moduleFilter).map(fnModule);
					obj.filteredModules = chunk.modules.length - obj.modules.length;
					obj.modules.sort(sortByField(sortModules));
				}
				if(showChunkOrigins) {
					obj.origins = chunk.origins.map(function(origin) {
						return {
							moduleId: origin.module ? origin.module.id : undefined,
							module: origin.module ? origin.module.identifier() : "",
							moduleIdentifier: origin.module ? origin.module.identifier() : "",
							moduleName: origin.module ? origin.module.readableIdentifier(requestShortener) : "",
							loc: typeof origin.loc === "object" ? obj.loc = origin.loc.start.line + ":" + origin.loc.start.column + "-" +
								(origin.loc.start.line !== origin.loc.end.line ? origin.loc.end.line + ":" : "") + origin.loc.end.column : "",
							name: origin.name,
							reasons: origin.reasons || []
						};
					});
				}
				return obj;
			});
			obj.chunks.sort(sortByField(sortChunks));
		}
		if(showModules) {
			obj.modules = compilation.modules.filter(moduleFilter).map(fnModule);
			obj.filteredModules = compilation.modules.length - obj.modules.length;
			obj.modules.sort(sortByField(sortModules));
		}
		if(showChildren) {
			obj.children = compilation.children.map(function(child) {
				var obj = new Stats(child).toJson(options, forToString);
				delete obj.hash;
				delete obj.version;
				obj.name = child.name;
				return obj;
			});
		}
		return obj;
	};
	
	Stats.prototype.toString = function toString(options) {
		if(typeof options === "boolean" || typeof options === "string") {
			options = Stats.presetToOptions(options);
		} else if(!options) options = {};
	
		function d(v, def) {
			return v === undefined ? def : v;
		}
		var useColors = d(options.colors, false);
	
		var obj = this.toJson(options, true);
	
		return Stats.jsonToString(obj, useColors);
	};
	
	Stats.jsonToString = function jsonToString(obj, useColors) {
		var buf = [];
	
		function normal(str) {
			buf.push(str);
		}
	
		function bold(str) {
			if(useColors) buf.push("\u001b[1m");
			buf.push(str);
			if(useColors) buf.push("\u001b[22m");
		}
	
		function yellow(str) {
			if(useColors) buf.push("\u001b[1m\u001b[33m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}
	
		function red(str) {
			if(useColors) buf.push("\u001b[1m\u001b[31m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}
	
		function green(str) {
			if(useColors) buf.push("\u001b[1m\u001b[32m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}
	
		function cyan(str) {
			if(useColors) buf.push("\u001b[1m\u001b[36m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}
	
		function magenta(str) {
			if(useColors) buf.push("\u001b[1m\u001b[35m");
			buf.push(str);
			if(useColors) buf.push("\u001b[39m\u001b[22m");
		}
	
		function coloredTime(time) {
			var times = [800, 400, 200, 100];
			if(obj.time) {
				times = [obj.time / 2, obj.time / 4, obj.time / 8, obj.time / 16];
			}
			if(time < times[3])
				normal(time + "ms");
			else if(time < times[2])
				bold(time + "ms");
			else if(time < times[1])
				green(time + "ms");
			else if(time < times[0])
				yellow(time + "ms");
			else
				red(time + "ms");
		}
	
		function newline() {
			buf.push("\n");
		}
	
		function table(array, formats, align, splitter) {
			var rows = array.length;
			var cols = array[0].length;
			var colSizes = new Array(cols);
			for(var col = 0; col < cols; col++)
				colSizes[col] = 3;
			for(var row = 0; row < rows; row++) {
				for(var col = 0; col < cols; col++) {
					var value = array[row][col] + "";
					if(value.length > colSizes[col]) {
						colSizes[col] = value.length;
					}
				}
			}
			for(var row = 0; row < rows; row++) {
				for(var col = 0; col < cols; col++) {
					var format = row === 0 ? bold : formats[col];
					var value = array[row][col] + "";
					var l = value.length;
					if(align[col] === "l")
						format(value);
					for(; l < colSizes[col] && col !== cols - 1; l++)
						normal(" ");
					if(align[col] === "r")
						format(value);
					if(col + 1 < cols)
						normal(splitter || "  ");
				}
				newline();
			}
		}
	
		function formatSize(size) {
			if(size <= 0) return "0 bytes";
	
			var abbreviations = ["bytes", "kB", "MB", "GB"];
			var index = Math.floor(Math.log(size) / Math.log(1000));
	
			return +(size / Math.pow(1000, index))
				.toPrecision(3) + " " + abbreviations[index];
		}
	
		if(obj.hash) {
			normal("Hash: ");
			bold(obj.hash);
			newline();
		}
		if(obj.version) {
			normal("Version: webpack ");
			bold(obj.version);
			newline();
		}
		if(typeof obj.time === "number") {
			normal("Time: ");
			bold(obj.time);
			normal("ms");
			newline();
		}
		if(obj.publicPath) {
			normal("PublicPath: ");
			bold(obj.publicPath);
			newline();
		}
		if(obj.assets && obj.assets.length > 0) {
			var t = [
				["Asset", "Size", "Chunks", "", "Chunk Names"]
			];
			obj.assets.forEach(function(asset) {
				t.push([
					asset.name,
					formatSize(asset.size),
					asset.chunks.join(", "),
					asset.emitted ? "[emitted]" : "",
					asset.chunkNames.join(", ")
				]);
			});
			table(t, [green, normal, bold, green, normal], "rrrll");
		}
		var modulesByIdentifier = {};
		if(obj.modules) {
			obj.modules.forEach(function(module) {
				modulesByIdentifier["$" + module.identifier] = module;
			});
		} else if(obj.chunks) {
			obj.chunks.forEach(function(chunk) {
				if(chunk.modules) {
					chunk.modules.forEach(function(module) {
						modulesByIdentifier["$" + module.identifier] = module;
					});
				}
			});
		}
	
		function processProfile(module) {
			if(module.profile) {
				normal("      ");
				var sum = 0,
					allowSum = true;
				var path = [];
				var current = module;
				while(current.issuer) {
					if(!modulesByIdentifier["$" + current.issuer]) {
						normal(" ... ->");
						allowSum = false;
						break;
					}
					path.unshift(current = modulesByIdentifier["$" + current.issuer]);
				}
				path.forEach(function(module) {
					normal(" [");
					normal(module.id);
					normal("] ");
					if(module.profile) {
						var time = (module.profile.factory || 0) + (module.profile.building || 0);
						coloredTime(time);
						sum += time;
						normal(" ");
					}
					normal("->");
				});
				Object.keys(module.profile).forEach(function(key) {
					normal(" " + key + ":");
					var time = module.profile[key];
					coloredTime(time);
					sum += time;
				});
				if(allowSum) {
					normal(" = ");
					coloredTime(sum);
				}
				newline();
			}
		}
	
		function processModuleAttributes(module) {
			normal(" ");
			normal(formatSize(module.size));
			if(module.chunks) {
				module.chunks.forEach(function(chunk) {
					normal(" {");
					yellow(chunk);
					normal("}");
				});
			}
			if(!module.cacheable) {
				red(" [not cacheable]");
			}
			if(module.optional) {
				yellow(" [optional]");
			}
			if(module.built) {
				green(" [built]");
			}
			if(module.prefetched) {
				magenta(" [prefetched]");
			}
			if(module.failed)
				red(" [failed]");
			if(module.warnings)
				yellow(" [" + module.warnings + " warning" + (module.warnings === 1 ? "" : "s") + "]");
			if(module.errors)
				red(" [" + module.errors + " error" + (module.errors === 1 ? "" : "s") + "]");
		}
		if(obj.chunks) {
			obj.chunks.forEach(function(chunk) {
				normal("chunk ");
				if(chunk.id < 1000) normal(" ");
				if(chunk.id < 100) normal(" ");
				if(chunk.id < 10) normal(" ");
				normal("{");
				yellow(chunk.id);
				normal("} ");
				green(chunk.files.join(", "));
				if(chunk.names && chunk.names.length > 0) {
					normal(" (");
					normal(chunk.names.join(", "));
					normal(")");
				}
				normal(" ");
				normal(formatSize(chunk.size));
				chunk.parents.forEach(function(id) {
					normal(" {");
					yellow(id);
					normal("}");
				});
				if(chunk.rendered) {
					green(" [rendered]");
				}
				newline();
				if(chunk.origins) {
					chunk.origins.forEach(function(origin) {
						normal("    > ");
						if(origin.reasons && origin.reasons.length) {
							yellow(origin.reasons.join(" "));
							normal(" ");
						}
						if(origin.name) {
							normal(origin.name);
							normal(" ");
						}
						if(origin.module) {
							normal("[");
							normal(origin.moduleId);
							normal("] ");
							var module = modulesByIdentifier["$" + origin.module];
							if(module) {
								bold(module.name);
								normal(" ");
							}
							if(origin.loc) {
								normal(origin.loc);
							}
						}
						newline();
					});
				}
				if(chunk.modules) {
					chunk.modules.forEach(function(module) {
						normal(" ");
						if(module.id < 1000) normal(" ");
						if(module.id < 100) normal(" ");
						if(module.id < 10) normal(" ");
						normal("[");
						normal(module.id);
						normal("] ");
						bold(module.name);
						processModuleAttributes(module);
						newline();
						if(module.reasons) {
							module.reasons.forEach(function(reason) {
								normal("        ");
								normal(reason.type);
								normal(" ");
								cyan(reason.userRequest);
								if(reason.templateModules) cyan(reason.templateModules.join(" "));
								normal(" [");
								normal(reason.moduleId);
								normal("] ");
								magenta(reason.module);
								if(reason.loc) {
									normal(" ");
									normal(reason.loc);
								}
								newline();
							});
						}
						processProfile(module);
					});
					if(chunk.filteredModules > 0) {
						normal("     + " + chunk.filteredModules + " hidden modules");
						newline();
					}
				}
			});
		}
		if(obj.modules) {
			obj.modules.forEach(function(module) {
				if(module.id < 1000) normal(" ");
				if(module.id < 100) normal(" ");
				if(module.id < 10) normal(" ");
				normal("[");
				normal(module.id);
				normal("] ");
				bold(module.name || module.identifier);
				processModuleAttributes(module);
				newline();
				if(module.reasons) {
					module.reasons.forEach(function(reason) {
						normal("       ");
						normal(reason.type);
						normal(" ");
						cyan(reason.userRequest);
						if(reason.templateModules) cyan(reason.templateModules.join(" "));
						normal(" [");
						normal(reason.moduleId);
						normal("] ");
						magenta(reason.module);
						if(reason.loc) {
							normal(" ");
							normal(reason.loc);
						}
						newline();
					});
				}
				processProfile(module);
			});
			if(obj.filteredModules > 0) {
				normal("    + " + obj.filteredModules + " hidden modules");
				newline();
			}
		}
		if(obj._showWarnings && obj.warnings) {
			obj.warnings.forEach(function(warning) {
				newline();
				yellow("WARNING in " + warning);
				newline();
			});
		}
		if(obj._showErrors && obj.errors) {
			obj.errors.forEach(function(error) {
				newline();
				red("ERROR in " + error);
				newline();
			});
		}
		if(obj.children) {
			obj.children.forEach(function(child) {
				if(child.name) {
					normal("Child ");
					bold(child.name);
					normal(":");
				} else {
					normal("Child");
				}
				newline();
				buf.push("    ");
				buf.push(Stats.jsonToString(child, useColors).replace(/\n/g, "\n    "));
				newline();
			});
		}
	
		while(buf[buf.length - 1] === "\n") buf.pop();
		return buf.join("");
	};
	
	Stats.presetToOptions = function(name) {
		//Accepted values: none, errors-only, minimal, normal, verbose
		//Any other falsy value will behave as 'none', truthy values as 'normal'
		var pn = (typeof name === "string") && name.toLowerCase() || name;
		if(pn === "none" || !pn) {
			return {
				hash: false,
				version: false,
				timings: false,
				assets: false,
				chunks: false,
				modules: false,
				reasons: false,
				children: false,
				source: false,
				errors: false,
				errorDetails: false,
				warnings: false,
				publicPath: false
			};
		} else {
			return {
				assets: pn === "verbose",
				version: pn === "verbose",
				timings: pn !== "errors-only" && pn !== "minimal",
				hash: pn !== "errors-only" && pn !== "minimal",
				chunks: pn !== "errors-only",
				chunkModules: pn === "verbose",
				//warnings: pn !== "errors-only",
				errorDetails: pn !== "errors-only" && pn !== "minimal",
				reasons: pn === "verbose",
				colors: true
			};
		}
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	
	function RequestShortener(directory) {
		directory = directory.replace(/\\/g, "/");
		var parentDirectory = path.dirname(directory);
		if(/[\/\\]$/.test(directory)) directory = directory.substr(0, directory.length - 1);
		if(directory) {
			var currentDirectoryRegExp = directory.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			currentDirectoryRegExp = new RegExp("^" + currentDirectoryRegExp + "|(!)" + currentDirectoryRegExp, "g");
	
			this.currentDirectoryRegExp = currentDirectoryRegExp;
		}
	
		if(/[\/\\]$/.test(parentDirectory)) parentDirectory = parentDirectory.substr(0, parentDirectory.length - 1);
		if(parentDirectory && parentDirectory !== directory) {
			var parentDirectoryRegExp = parentDirectory.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			parentDirectoryRegExp = new RegExp("^" + parentDirectoryRegExp + "|(!)" + parentDirectoryRegExp, "g");
	
			this.parentDirectoryRegExp = parentDirectoryRegExp;
		}
	
		if(__dirname.length >= 2) {
			var buildins = path.join(__dirname, "..").replace(/\\/g, "/");
			var buildinsAsModule = currentDirectoryRegExp && currentDirectoryRegExp.test(buildins);
			var buildinsRegExp = buildins.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
			buildinsRegExp = new RegExp("^" + buildinsRegExp + "|(!)" + buildinsRegExp, "g");
	
			this.buildinsAsModule = buildinsAsModule;
			this.buildinsRegExp = buildinsRegExp;
		}
	
		this.nodeModulesRegExp = /\/node_modules\//g;
		this.indexJsRegExp = /\/index.js(!|\?|\(query\))/g;
	}
	module.exports = RequestShortener;
	
	RequestShortener.prototype.shorten = function(request) {
		if(!request)
			return request;
		request = request.replace(/\\/g, "/");
		if(this.buildinsAsModule && this.buildinsRegExp)
			request = request.replace(this.buildinsRegExp, "!(webpack)");
		if(this.currentDirectoryRegExp)
			request = request.replace(this.currentDirectoryRegExp, "!.");
		if(this.parentDirectoryRegExp)
			request = request.replace(this.parentDirectoryRegExp, "!..");
		if(!this.buildinsAsModule && this.buildinsRegExp)
			request = request.replace(this.buildinsRegExp, "!(webpack)");
		request = request.replace(this.nodeModulesRegExp, "/~/");
		request = request.replace(this.indexJsRegExp, "$1");
		return request.replace(/^!|!$/, "");
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 47 */,
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var OriginalSource = __webpack_require__(50);
	var PrefixSource = __webpack_require__(51);
	var Template = __webpack_require__(52);
	
	function MainTemplate(outputOptions) {
		Template.call(this, outputOptions);
		this.plugin("startup", function(source, chunk, hash) {
			var buf = [];
			if(chunk.modules.some(function(m) {
					return m.id === 0;
				})) {
				buf.push("");
				buf.push("// Load entry module and return exports");
				buf.push("return " + this.renderRequireFunctionForModule(hash, chunk, "0") + "(0);");
			}
			return this.asString(buf);
		});
		this.plugin("render", function(bootstrapSource, chunk, hash, moduleTemplate, dependencyTemplates) {
			var source = new ConcatSource();
			source.add("/******/ (function(modules) { // webpackBootstrap\n");
			source.add(new PrefixSource("/******/", bootstrapSource));
			source.add("/******/ })\n");
			source.add("/************************************************************************/\n");
			source.add("/******/ (");
			var modules = this.renderChunkModules(chunk, moduleTemplate, dependencyTemplates, "/******/ ");
			source.add(this.applyPluginsWaterfall("modules", modules, chunk, hash, moduleTemplate, dependencyTemplates));
			source.add(")");
			return source;
		});
		this.plugin("local-vars", function(source /*, chunk, hash*/ ) {
			return this.asString([
				source,
				"// The module cache",
				"var installedModules = {};"
			]);
		});
		this.plugin("require", function(source, chunk, hash) {
			return this.asString([
				source,
				"// Check if module is in cache",
				"if(installedModules[moduleId])",
				this.indent("return installedModules[moduleId].exports;"),
				"",
				"// Create a new module (and put it into the cache)",
				"var module = installedModules[moduleId] = {",
				this.indent(this.applyPluginsWaterfall("module-obj", "", chunk, hash, "moduleId")),
				"};",
				"",
				"// Execute the module function",
				"modules[moduleId].call(module.exports, module, module.exports, " + this.renderRequireFunctionForModule(hash, chunk, "moduleId") + ");",
				"",
				"// Flag the module as loaded",
				"module.loaded = true;",
				"",
				"// Return the exports of the module",
				"return module.exports;"
			]);
		});
		this.plugin("module-obj", function( /*source, chunk, hash, varModuleId*/ ) {
			return this.asString([
				"exports: {},",
				"id: moduleId,",
				"loaded: false"
			]);
		});
		this.plugin("require-extensions", function(source, chunk, hash) {
			var buf = [];
			if(chunk.chunks.length > 0) {
				buf.push("// This file contains only the entry chunk.");
				buf.push("// The chunk loading function for additional chunks");
				buf.push(this.requireFn + ".e = function requireEnsure(chunkId, callback) {");
				buf.push(this.indent(this.applyPluginsWaterfall("require-ensure", "throw new Error('Not chunk loading available');", chunk, hash, "chunkId")));
				buf.push("};");
			}
			buf.push("");
			buf.push("// expose the modules object (__webpack_modules__)");
			buf.push(this.requireFn + ".m = modules;");
	
			buf.push("");
			buf.push("// expose the module cache");
			buf.push(this.requireFn + ".c = installedModules;");
	
			var publicPath = this.getPublicPath({
				hash: hash
			});
			buf.push("");
			buf.push("// __webpack_public_path__");
			buf.push(this.requireFn + ".p = " + JSON.stringify(publicPath) + ";");
			return this.asString(buf);
		});
	}
	module.exports = MainTemplate;
	
	MainTemplate.prototype = Object.create(Template.prototype);
	MainTemplate.prototype.requireFn = "__webpack_require__";
	MainTemplate.prototype.render = function(hash, chunk, moduleTemplate, dependencyTemplates) {
		var buf = [];
		buf.push(this.applyPluginsWaterfall("bootstrap", "", chunk, hash, moduleTemplate, dependencyTemplates));
		buf.push(this.applyPluginsWaterfall("local-vars", "", chunk, hash));
		buf.push("");
		buf.push("// The require function");
		buf.push("function " + this.requireFn + "(moduleId) {");
		buf.push(this.indent(this.applyPluginsWaterfall("require", "", chunk, hash)));
		buf.push("}");
		buf.push("");
		buf.push(this.asString(this.applyPluginsWaterfall("require-extensions", "", chunk, hash)));
		buf.push(this.asString(this.applyPluginsWaterfall("startup", "", chunk, hash)));
		var source = this.applyPluginsWaterfall("render", new OriginalSource(this.prefix(buf, " \t") + "\n", "webpack/bootstrap " + hash), chunk, hash, moduleTemplate, dependencyTemplates);
		if(chunk.modules.some(function(module) {
				return module.id === 0;
			})) {
			source = this.applyPluginsWaterfall("render-with-entry", source, chunk, hash);
		}
		if(!source) throw new Error("Compiler error: MainTemplate plugin 'render' should return something");
		chunk.rendered = true;
		return new ConcatSource(source, ";");
	};
	
	MainTemplate.prototype.renderRequireFunctionForModule = function(hash, chunk, varModuleId) {
		return this.applyPluginsWaterfall("module-require", this.requireFn, chunk, hash, varModuleId);
	};
	
	MainTemplate.prototype.renderAddModule = function(hash, chunk, varModuleId, varModule) {
		return this.applyPluginsWaterfall("add-module", "modules[" + varModuleId + "] = " + varModule + ";", chunk, hash, varModuleId, varModule);
	};
	
	MainTemplate.prototype.renderCurrentHashCode = function(hash, length) {
		length = length || Infinity;
		return this.applyPluginsWaterfall("current-hash", JSON.stringify(hash.substr(0, length)), length);
	};
	
	MainTemplate.prototype.entryPointInChildren = function(chunk) {
		function checkChildren(chunk, alreadyCheckedChunks) {
			return chunk.chunks.some(function(child) {
				if(alreadyCheckedChunks.indexOf(child) >= 0) return;
				alreadyCheckedChunks.push(child);
				return child.modules.some(function(module) {
					return module.id === 0;
				}) || checkChildren(child, alreadyCheckedChunks);
			});
		}
		return checkChildren(chunk, []);
	};
	
	MainTemplate.prototype.getPublicPath = function(options) {
		return this.applyPluginsWaterfall("asset-path", this.outputOptions.publicPath || "", options);
	};
	
	MainTemplate.prototype.updateHash = function(hash) {
		hash.update("maintemplate");
		hash.update("3");
		hash.update(this.outputOptions.publicPath + "");
		this.applyPlugins("hash", hash);
	};
	
	MainTemplate.prototype.updateHashForChunk = function(hash, chunk) {
		this.updateHash(hash);
		this.applyPlugins("hash-for-chunk", hash, chunk);
	};
	
	MainTemplate.prototype.useChunkHash = function(chunk) {
		var paths = this.applyPluginsWaterfall("global-hash-paths", []);
		return !this.applyPluginsBailResult("global-hash", chunk, paths);
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(19);
	
	function ConcatSource() {
		Source.call(this);
		this.children = Array.prototype.slice.call(arguments);
	}
	module.exports = ConcatSource;
	
	ConcatSource.prototype = Object.create(Source.prototype);
	ConcatSource.prototype.constructor = ConcatSource;
	
	ConcatSource.prototype.add = function(item) {
		this.children.push(item);
	};
	
	ConcatSource.prototype.source = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item : item.source();
		}).join("");
	};
	
	ConcatSource.prototype.size = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item.length : item.size();
		}).reduce(function(sum, s) { return sum + s; }, 0);
	};
	
	__webpack_require__(39)(ConcatSource.prototype);
	
	ConcatSource.prototype.node = function(options) {
		var node = new SourceNode(null, null, null, this.children.map(function(item) {
			return typeof item === "string" ? item : item.node(options);
		}));
		return node;
	};
	
	ConcatSource.prototype.listMap = function(options) {
		var map = new SourceListMap();
		this.children.forEach(function(item) {
			if(typeof item === "string")
				map.add(item);
			else
				map.add(item.listMap(options));
		});
		return map;
	};
	
	ConcatSource.prototype.updateHash = function(hash) {
		this.children.forEach(function(item) {
			if (typeof item === "string") {
				hash.update(item)
			} else {
				item.updateHash(hash);
			}
		});
	};


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceMapConsumer = __webpack_require__(20).SourceMapConsumer;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(19);
	
	function isSplitter(c) {
		switch(c) {
		case 10: // \n
		case 13: // \r
		case 59: // ;
		case 123: // {
		case 125: // }
		return true;
		}
		return false;
	}
	function _splitCode(code) {
		var result = [];
		var i = 0, j = 0;
		for(; i < code.length; i++) {
			if(isSplitter(code.charCodeAt(i))) {
				while(isSplitter(code.charCodeAt(++i)));
				result.push(code.substring(j, i));
				j = i;
			}
		}
		if(j < code.length)
			result.push(code.substr(j));
		return result;
	}
	
	function OriginalSource(value, name) {
		Source.call(this);
		this._value = value;
		this._name = name;
	}
	
	module.exports = OriginalSource;
	
	OriginalSource.prototype = Object.create(Source.prototype);
	OriginalSource.prototype.constructor = OriginalSource;
	
	OriginalSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(39)(OriginalSource.prototype);
	
	OriginalSource.prototype.node = function(options) {
		options = options || {};
		var sourceMap = this._sourceMap;
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				var pos = 0;
				if(options.columns === false) {
					return new SourceNode(idx+1, 0, name,
						(line + (idx != lines.length-1 ? "\n" : ""))
					);
				}
				return new SourceNode(null, null, null,
					_splitCode(line + (idx != lines.length-1 ? "\n" : "")).map(function(item) {
						if(/^\s*$/.test(item)) return item;
						var res = new SourceNode(idx+1, pos, name, item);
						pos += item.length;
						return res;
					})
				);
			})
		);
		node.setSourceContent(name, value);
		return node;
	};
	
	OriginalSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._value)
	};
	
	OriginalSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(19);
	var SourceNode = __webpack_require__(20).SourceNode;
	
	function PrefixSource(prefix, source) {
		Source.call(this);
		this._source = source;
		this._prefix = prefix;
	}
	module.exports = PrefixSource;
	
	PrefixSource.prototype = Object.create(Source.prototype);
	PrefixSource.prototype.constructor = PrefixSource;
	
	PrefixSource.prototype.source = function() {
		var node = typeof this._source === "string" ? this._source : this._source.source();
		var prefix = this._prefix;
		return prefix + node.replace(/\n(.)/g, "\n" + prefix + "$1");
	};
	
	__webpack_require__(39)(PrefixSource.prototype);
	
	PrefixSource.prototype.node = function(options) {
		var node = this._source.node(options);
		var append = [this._prefix];
		return new SourceNode(null, null, null, [
			cloneAndPrefix(node, this._prefix, append)
		]);
	};
	
	PrefixSource.prototype.listMap = function(options) {
		var prefix = this._prefix;
		var map = this._source.listMap(options);
		map.mapGeneratedCode(function(code) {
			return prefix + code.replace(/\n(.)/g, "\n" + prefix + "$1");
		});
		return map;
	};
	
	PrefixSource.prototype.updateHash = function(hash) {
		if(typeof this._source === "string")
			hash.update(this._source);
		else
			this._source.updateHash(hash);
		if(typeof this._prefix === "string")
			hash.update(this._prefix);
		else
			this._prefix.updateHash(hash);
	};
	
	function cloneAndPrefix(node, prefix, append) {
		if(typeof node === "string") {
			var result = node.replace(/\n(.)/g, "\n" + prefix + "$1");
			if(append.length > 0) result = append.pop() + result;
			if(/\n$/.test(node)) append.push(prefix);
			return result;
		} else {
			var newNode = new SourceNode(
				node.line,
				node.column,
				node.source,
				node.children.map(function(node) {
					return cloneAndPrefix(node, prefix, append);
				}),
				node.name
			);
			newNode.sourceContents = node.sourceContents;
			return newNode;
		}
	};


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(8);
	var ConcatSource = __webpack_require__(49);
	
	function Template(outputOptions) {
		Tapable.call(this);
		this.outputOptions = outputOptions || {};
	}
	module.exports = Template;
	
	Template.getFunctionContent = function(fn) {
		return fn.toString().replace(/^function\s?\(\)\s?\{\n?|\n?\}$/g, "").replace(/^\t/mg, "");
	};
	
	Template.toIdentifier = function(str) {
		if(typeof str !== "string") return "";
		return str.replace(/^[^a-zA-Z$_]/, "_").replace(/[^a-zA-Z0-9$_]/g, "_");
	};
	
	Template.prototype = Object.create(Tapable.prototype);
	Template.prototype.constructor = Template;
	
	Template.prototype.indent = function indent(str) {
		if(Array.isArray(str)) {
			return str.map(indent).join("\n");
		} else {
			str = str.trimRight();
			if(!str) return "";
			var ind = (str[0] === "\n" ? "" : "\t");
			return ind + str.replace(/\n([^\n])/g, "\n\t$1");
		}
	};
	
	Template.prototype.prefix = function(str, prefix) {
		if(Array.isArray(str)) {
			str = str.join("\n");
		}
		str = str.trim();
		if(!str) return "";
		var ind = (str[0] === "\n" ? "" : prefix);
		return ind + str.replace(/\n([^\n])/g, "\n" + prefix + "$1");
	};
	
	Template.prototype.asString = function(str) {
		if(Array.isArray(str)) {
			return str.join("\n");
		}
		return str;
	};
	
	Template.prototype.getModulesArrayBounds = function(modules) {
		if(modules.some(function(module) {
				return typeof module.id !== "number";
			}))
			return false;
		var maxId = -Infinity;
		var minId = Infinity;
		modules.forEach(function(module) {
			if(maxId < module.id) maxId = module.id;
			if(minId > module.id) minId = module.id;
		});
		if(minId < 16 + ("" + minId).length) {
			// add minId x ',' instead of 'Array(minId).concat(...)'
			minId = 0;
		}
		var objectOverhead = modules.map(function(module) {
			var idLength = (module.id + "").length;
			return idLength + 2;
		}).reduce(function(a, b) {
			return a + b;
		}, -1);
		var arrayOverhead = minId === 0 ? maxId : 16 + ("" + minId).length + maxId;
		return arrayOverhead < objectOverhead ? [minId, maxId] : false;
	};
	
	Template.prototype.renderChunkModules = function(chunk, moduleTemplate, dependencyTemplates, prefix) {
		if(!prefix) prefix = "";
		var source = new ConcatSource();
		if(chunk.modules.length === 0) {
			source.add("[]");
			return source;
		}
		var bounds = this.getModulesArrayBounds(chunk.modules);
		if(bounds) {
			// Render a spare array
			var minId = bounds[0];
			var maxId = bounds[1];
			if(minId !== 0) source.add("Array(" + minId + ").concat(");
			source.add("[\n");
			var modules = {};
			chunk.modules.forEach(function(module) {
				modules[module.id] = module;
			});
			for(var idx = minId; idx <= maxId; idx++) {
				var module = modules[idx];
				if(idx !== minId) source.add(",\n");
				source.add("/* " + idx + " */");
				if(module) {
					source.add("\n");
					source.add(moduleTemplate.render(module, dependencyTemplates, chunk));
				}
			}
			source.add("\n" + prefix + "]");
			if(minId !== 0) source.add(")");
		} else {
			// Render an object
			source.add("{\n");
			chunk.modules.forEach(function(module, idx) {
				if(idx !== 0) source.add(",\n");
				source.add("\n/***/ " + JSON.stringify(module.id) + ":\n");
				source.add(moduleTemplate.render(module, dependencyTemplates, chunk));
			});
			source.add("\n\n" + prefix + "}");
		}
		return source;
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var Template = __webpack_require__(52);
	
	function ChunkTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}
	
	module.exports = ChunkTemplate;
	
	ChunkTemplate.prototype = Object.create(Template.prototype);
	ChunkTemplate.prototype.render = function(chunk, moduleTemplate, dependencyTemplates) {
		var modules = this.renderChunkModules(chunk, moduleTemplate, dependencyTemplates);
		var core = this.applyPluginsWaterfall("modules", modules, chunk, moduleTemplate, dependencyTemplates);
		var source = this.applyPluginsWaterfall("render", core, chunk, moduleTemplate, dependencyTemplates);
		if(chunk.modules.some(function(module) {
				return module.id === 0;
			})) {
			source = this.applyPluginsWaterfall("render-with-entry", source, chunk);
		}
		chunk.rendered = true;
		return new ConcatSource(source, ";");
	};
	
	ChunkTemplate.prototype.updateHash = function(hash) {
		hash.update("ChunkTemplate");
		hash.update("2");
		this.applyPlugins("hash", hash);
	};
	
	ChunkTemplate.prototype.updateHashForChunk = function(hash, chunk) {
		this.updateHash(hash);
		this.applyPlugins("hash-for-chunk", hash, chunk);
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	
	function HotUpdateChunkTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}
	
	module.exports = HotUpdateChunkTemplate;
	
	HotUpdateChunkTemplate.prototype = Object.create(Template.prototype);
	HotUpdateChunkTemplate.prototype.render = function(id, modules, hash, moduleTemplate, dependencyTemplates) {
		var modulesSource = this.renderChunkModules({
			id: id,
			modules: modules
		}, moduleTemplate, dependencyTemplates);
		var core = this.applyPluginsWaterfall("modules", modulesSource, modules, moduleTemplate, dependencyTemplates);
		var source = this.applyPluginsWaterfall("render", core, modules, hash, id, moduleTemplate, dependencyTemplates);
		return source;
	};
	
	HotUpdateChunkTemplate.prototype.updateHash = function(hash) {
		hash.update("HotUpdateChunkTemplate");
		hash.update("1");
		this.applyPlugins("hash", hash);
	};


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	
	function ModuleTemplate(outputOptions) {
		Template.call(this, outputOptions);
	}
	module.exports = ModuleTemplate;
	
	ModuleTemplate.prototype = Object.create(Template.prototype);
	ModuleTemplate.prototype.render = function(module, dependencyTemplates, chunk) {
		var moduleSource = module.source(dependencyTemplates, this.outputOptions, this.requestShortener);
		moduleSource = this.applyPluginsWaterfall("module", moduleSource, module, chunk, dependencyTemplates);
		moduleSource = this.applyPluginsWaterfall("render", moduleSource, module, chunk, dependencyTemplates);
		return this.applyPluginsWaterfall("package", moduleSource, module, chunk, dependencyTemplates);
	};
	
	ModuleTemplate.prototype.updateHash = function(hash) {
		hash.update("1");
		this.applyPlugins("hash", hash);
	};


/***/ },
/* 56 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Dependency() {
		this.module = null;
	}
	module.exports = Dependency;
	
	Dependency.prototype.isEqualResource = function( /* other */ ) {
		return false;
	};
	
	Dependency.prototype.updateHash = function(hash) {
		hash.update((this.module && this.module.id) + "");
	};
	
	Dependency.prototype.disconnect = function() {
		this.module = null;
	};
	
	Dependency.compare = function(a, b) {
		return Dependency.compareLocations(a.loc, b.loc);
	};
	
	Dependency.compareLocations = function(a, b) {
		if(typeof a === "string") {
			if(typeof b === "string") {
				if(a < b) return -1;
				if(a > b) return 1;
				return 0;
			} else if(typeof b === "object") {
				return 1;
			} else {
				return 0;
			}
		} else if(typeof a === "object") {
			if(typeof b === "string") {
				return -1;
			} else if(typeof b === "object") {
				if(a.start) a = a.start;
				if(b.start) b = b.start;
				if(a.line < b.line) return -1;
				if(a.line > b.line) return 1;
				if(a.column < b.column) return -1;
				if(a.column > b.column) return 1;
				if(a.index < b.index) return -1;
				if(a.index > b.index) return 1;
				return 0;
			} else {
				return 0;
			}
		}
	};


/***/ },
/* 57 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ChunkRenderError(chunk, file, error) {
		Error.call(this);
		Error.captureStackTrace(this, ChunkRenderError);
		this.name = "ChunkRenderError";
		this.error = error;
		this.message = error.message;
		this.details = error.stack;
		this.file = file;
		this.chunk = chunk;
	}
	module.exports = ChunkRenderError;
	
	ChunkRenderError.prototype = Object.create(Error.prototype);


/***/ },
/* 58 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CachedSource(source) {
		this._source = source;
		this._cachedSource = undefined;
		this._cachedSize = undefined;
		this._cachedMaps = {};
	}
	module.exports = CachedSource;
	
	CachedSource.prototype.source = function() {
		if(typeof this._cachedSource !== "undefined") return this._cachedSource;
		return this._cachedSource = this._source.source();
	};
	
	CachedSource.prototype.size = function() {
		if(typeof this._cachedSize !== "undefined") return this._cachedSize;
		if(typeof this._cachedSource !== "undefined")
			return this._cachedSize = this._cachedSource.length;
		return this._cachedSize = this._source.size();
	};
	
	CachedSource.prototype.sourceAndMap = function(options) {
		var key = JSON.stringify(options);
		if(typeof this._cachedSource !== "undefined" && key in this._cachedMaps)
			return { source: this._cachedSource, map: this._cachedMaps[key] };
		else if(typeof this._cachedSource !== "undefined") {
			return { source: this._cachedSource, map: this._cachedMaps[key] = this._source.map(options) };
		} else if(key in this._cachedMaps) {
			return { source: this._cachedSource = this._source.source(), map: this._cachedMaps[key] };
		}
		var result = this._source.sourceAndMap(options);
		this._cachedSource = result.source;
		this._cachedMaps[key] = result.map;
		return { source: this._cachedSource, map: this._cachedMaps[key] };
	};
	
	CachedSource.prototype.node = function(options) {
		return this._source.node(options);
	};
	
	CachedSource.prototype.listMap = function(options) {
		return this._source.listMap(options);
	}
	
	CachedSource.prototype.map = function(options) {
		if(!options) options = {};
		var key = JSON.stringify(options);
		if(key in this._cachedMaps)
			return this._cachedMaps[key];
		return this._cachedMaps[key] = this._source.map();
	};
	
	CachedSource.prototype.updateHash = function(hash) {
		this._source.updateHash(hash);
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(137);

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var acorn = __webpack_require__(61);
	var Tapable = __webpack_require__(8);
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	function Parser(options) {
		Tapable.call(this);
		this.options = options;
		this.initializeEvaluating();
	}
	module.exports = Parser;
	
	// Syntax: https://developer.mozilla.org/en/SpiderMonkey/Parser_API
	
	Parser.prototype = Object.create(Tapable.prototype);
	Parser.prototype.constructor = Parser;
	
	Parser.prototype.initializeEvaluating = function() {
		function joinRanges(startRange, endRange) {
			if(!endRange) return startRange;
			if(!startRange) return endRange;
			return [startRange[0], endRange[1]];
		}
		this.plugin("evaluate Literal", function(expr) {
			switch(typeof expr.value) {
				case "number":
					return new BasicEvaluatedExpression().setNumber(expr.value).setRange(expr.range);
				case "string":
					return new BasicEvaluatedExpression().setString(expr.value).setRange(expr.range);
				case "boolean":
					return new BasicEvaluatedExpression().setBoolean(expr.value).setRange(expr.range);
			}
			if(expr.value === null)
				return new BasicEvaluatedExpression().setNull().setRange(expr.range);
			if(expr.value instanceof RegExp)
				return new BasicEvaluatedExpression().setRegExp(expr.value).setRange(expr.range);
		});
		this.plugin("evaluate LogicalExpression", function(expr) {
			var left;
			var leftAsBool;
			var right;
			if(expr.operator === "&&") {
				left = this.evaluateExpression(expr.left);
				leftAsBool = left && left.asBool();
				if(leftAsBool === false) return left.setRange(expr.range);
				if(leftAsBool !== true) return;
				right = this.evaluateExpression(expr.right);
				return right.setRange(expr.range);
			} else if(expr.operator === "||") {
				left = this.evaluateExpression(expr.left);
				leftAsBool = left && left.asBool();
				if(leftAsBool === true) return left.setRange(expr.range);
				if(leftAsBool !== false) return;
				right = this.evaluateExpression(expr.right);
				return right.setRange(expr.range);
			}
		});
		this.plugin("evaluate BinaryExpression", function(expr) {
			var left;
			var right;
			var res;
			if(expr.operator === "+") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				res = new BasicEvaluatedExpression();
				if(left.isString()) {
					if(right.isString()) {
						res.setString(left.string + right.string);
					} else if(right.isNumber()) {
						res.setString(left.string + right.number);
					} else if(right.isWrapped() && right.prefix && right.prefix.isString()) {
						res.setWrapped(
							new BasicEvaluatedExpression()
							.setString(left.string + right.prefix.string)
							.setRange(joinRanges(left.range, right.prefix.range)),
							right.postfix);
					} else {
						res.setWrapped(left, null);
					}
				} else if(left.isNumber()) {
					if(right.isString()) {
						res.setString(left.number + right.string);
					} else if(right.isNumber()) {
						res.setNumber(left.number + right.number);
					}
				} else if(left.isWrapped()) {
					if(left.postfix && left.postfix.isString() && right.isString()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(left.postfix.string + right.string)
							.setRange(joinRanges(left.postfix.range, right.range))
						);
					} else if(left.postfix && left.postfix.isString() && right.isNumber()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(left.postfix.string + right.number)
							.setRange(joinRanges(left.postfix.range, right.range))
						);
					} else if(right.isString()) {
						res.setWrapped(left.prefix, right);
					} else if(right.isNumber()) {
						res.setWrapped(left.prefix,
							new BasicEvaluatedExpression()
							.setString(right.number + "")
							.setRange(right.range));
					} else {
						res.setWrapped(left.prefix, new BasicEvaluatedExpression());
					}
				} else {
					if(right.isString()) {
						res.setWrapped(null, right);
					}
				}
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "-") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				res = new BasicEvaluatedExpression();
				res.setNumber(left.number - right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "*") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				res = new BasicEvaluatedExpression();
				res.setNumber(left.number * right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "/") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				if(!left.isNumber() || !right.isNumber()) return;
				res = new BasicEvaluatedExpression();
				res.setNumber(left.number / right.number);
				res.setRange(expr.range);
				return res;
			} else if(expr.operator === "==" || expr.operator === "===") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				res = new BasicEvaluatedExpression();
				res.setRange(expr.range);
				if(left.isString() && right.isString()) {
					return res.setBoolean(left.string === right.string);
				} else if(left.isNumber() && right.isNumber()) {
					return res.setBoolean(left.number === right.number);
				} else if(left.isBoolean() && right.isBoolean()) {
					return res.setBoolean(left.bool === right.bool);
				}
			} else if(expr.operator === "!=" || expr.operator === "!==") {
				left = this.evaluateExpression(expr.left);
				right = this.evaluateExpression(expr.right);
				if(!left || !right) return;
				res = new BasicEvaluatedExpression();
				res.setRange(expr.range);
				if(left.isString() && right.isString()) {
					return res.setBoolean(left.string !== right.string);
				} else if(left.isNumber() && right.isNumber()) {
					return res.setBoolean(left.number !== right.number);
				} else if(left.isBoolean() && right.isBoolean()) {
					return res.setBoolean(left.bool !== right.bool);
				}
			}
		});
		this.plugin("evaluate UnaryExpression", function(expr) {
			if(expr.operator === "typeof") {
				var res;
				if(expr.argument.type === "Identifier") {
					var name = this.scope.renames["$" + expr.argument.name] || expr.argument.name;
					if(this.scope.definitions.indexOf(name) === -1) {
						res = this.applyPluginsBailResult("evaluate typeof " + name, expr);
						if(res !== undefined) return res;
					}
				}
				if(expr.argument.type === "MemberExpression") {
					var expression = expr.argument;
					var exprName = [];
					while(expression.type === "MemberExpression" && !expression.computed) {
						exprName.unshift(this.scope.renames["$" + expression.property.name] || expression.property.name);
						expression = expression.object;
					}
					if(expression.type === "Identifier") {
						exprName.unshift(this.scope.renames["$" + expression.name] || expression.name);
						if(this.scope.definitions.indexOf(name) === -1) {
							exprName = exprName.join(".");
							res = this.applyPluginsBailResult("evaluate typeof " + exprName, expr);
							if(res !== undefined) return res;
						}
					}
				}
				if(expr.argument.type === "FunctionExpression") {
					return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
				}
				var arg = this.evaluateExpression(expr.argument);
				if(arg.isString() || arg.isWrapped()) return new BasicEvaluatedExpression().setString("string").setRange(expr.range);
				else if(arg.isNumber()) return new BasicEvaluatedExpression().setString("number").setRange(expr.range);
				else if(arg.isBoolean()) return new BasicEvaluatedExpression().setString("boolean").setRange(expr.range);
				else if(arg.isArray() || arg.isConstArray() || arg.isRegExp()) return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
			} else if(expr.operator === "!") {
				var argument = this.evaluateExpression(expr.argument);
				if(!argument) return;
				if(argument.isBoolean()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.bool).setRange(expr.range);
				} else if(argument.isString()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.string).setRange(expr.range);
				} else if(argument.isNumber()) {
					return new BasicEvaluatedExpression().setBoolean(!argument.number).setRange(expr.range);
				}
			}
		});
		this.plugin("evaluate typeof undefined", function(expr) {
			return new BasicEvaluatedExpression().setString("undefined").setRange(expr.range);
		});
		this.plugin("evaluate Identifier", function(expr) {
			var name = this.scope.renames["$" + expr.name] || expr.name;
			if(this.scope.definitions.indexOf(expr.name) === -1) {
				var result = this.applyPluginsBailResult("evaluate Identifier " + name, expr);
				if(result) return result;
				return new BasicEvaluatedExpression().setIdentifier(name).setRange(expr.range);
			} else {
				return this.applyPluginsBailResult("evaluate defined Identifier " + name, expr);
			}
		});
		this.plugin("evaluate MemberExpression", function(expression) {
			var expr = expression;
			var exprName = [];
			while(expr.type === "MemberExpression" && !expr.computed) {
				exprName.unshift(expr.property.name);
				expr = expr.object;
			}
			if(expr.type === "Identifier") {
				var name = this.scope.renames["$" + expr.name] || expr.name;
				if(this.scope.definitions.indexOf(name) === -1) {
					exprName.unshift(name);
					exprName = exprName.join(".");
					if(this.scope.definitions.indexOf(expr.name) === -1) {
						var result = this.applyPluginsBailResult("evaluate Identifier " + exprName, expression);
						if(result) return result;
						return new BasicEvaluatedExpression().setIdentifier(exprName).setRange(expression.range);
					} else {
						return this.applyPluginsBailResult("evaluate defined Identifier " + exprName, expression);
					}
				}
			}
		});
		this.plugin("evaluate CallExpression", function(expr) {
			if(expr.callee.type !== "MemberExpression") return;
			if(expr.callee.computed) return;
			var param = this.evaluateExpression(expr.callee.object);
			if(!param) return;
			return this.applyPluginsBailResult("evaluate CallExpression ." + expr.callee.property.name, expr, param);
		});
		this.plugin("evaluate CallExpression .replace", function(expr, param) {
			if(!param.isString()) return;
			if(expr.arguments.length !== 2) return;
			var arg1 = this.evaluateExpression(expr.arguments[0]);
			var arg2 = this.evaluateExpression(expr.arguments[1]);
			if(!arg1.isString() && !arg1.isRegExp()) return;
			arg1 = arg1.regExp || arg1.string;
			if(!arg2.isString()) return;
			arg2 = arg2.string;
			return new BasicEvaluatedExpression().setString(param.string.replace(arg1, arg2)).setRange(expr.range);
		});
		["substr", "substring"].forEach(function(fn) {
			this.plugin("evaluate CallExpression ." + fn, function(expr, param) {
				if(!param.isString()) return;
				var arg1;
				var result, str = param.string;
				switch(expr.arguments.length) {
					case 1:
						arg1 = this.evaluateExpression(expr.arguments[0]);
						if(!arg1.isNumber()) return;
						result = str[fn](arg1.number);
						break;
					case 2:
						arg1 = this.evaluateExpression(expr.arguments[0]);
						var arg2 = this.evaluateExpression(expr.arguments[1]);
						if(!arg1.isNumber()) return;
						if(!arg2.isNumber()) return;
						result = str[fn](arg1.number, arg2.number);
						break;
					default:
						return;
				}
				return new BasicEvaluatedExpression().setString(result).setRange(expr.range);
			});
		}, this);
		this.plugin("evaluate CallExpression .split", function(expr, param) {
			if(!param.isString()) return;
			if(expr.arguments.length !== 1) return;
			var result;
			var arg = this.evaluateExpression(expr.arguments[0]);
			if(arg.isString()) {
				result = param.string.split(arg.string);
			} else if(arg.isRegExp()) {
				result = param.string.split(arg.regExp);
			} else return;
			return new BasicEvaluatedExpression().setArray(result).setRange(expr.range);
		});
		this.plugin("evaluate ConditionalExpression", function(expr) {
			var condition = this.evaluateExpression(expr.test);
			var conditionValue = condition.asBool();
			var res;
			if(conditionValue === undefined) {
				var consequent = this.evaluateExpression(expr.consequent);
				var alternate = this.evaluateExpression(expr.alternate);
				if(!consequent || !alternate) return;
				res = new BasicEvaluatedExpression();
				if(consequent.isConditional())
					res.setOptions(consequent.options);
				else
					res.setOptions([consequent]);
				if(alternate.isConditional())
					res.addOptions(alternate.options);
				else
					res.addOptions([alternate]);
			} else {
				res = this.evaluateExpression(conditionValue ? expr.consequent : expr.alternate);
			}
			res.setRange(expr.range);
			return res;
		});
		this.plugin("evaluate ArrayExpression", function(expr) {
			var items = expr.elements.map(function(element) {
				return element !== null && this.evaluateExpression(element);
			}, this);
			if(items.filter(function(i) {
					return !i;
				}).length > 0) return;
			return new BasicEvaluatedExpression().setItems(items).setRange(expr.range);
		});
	};
	
	Parser.prototype.getRenameIdentifier = function getRenameIdentifier(expr) {
		var result = this.evaluateExpression(expr);
		if(!result) return;
		if(result.isIdentifier()) return result.identifier;
		return;
	};
	
	Parser.prototype.walkClass = function walkClass(classy) {
		if(classy.superClass)
			this.walkExpression(classy.superClass);
		if(classy.body && classy.body.type === "ClassBody") {
			classy.body.body.forEach(function(methodDefinition) {
				if(methodDefinition.type === "MethodDefinition")
					this.walkMethodDefinition(methodDefinition);
			}, this);
		}
	};
	
	Parser.prototype.walkMethodDefinition = function walkMethodDefinition(methodDefinition) {
		if(methodDefinition.computed && methodDefinition.key)
			this.walkExpression(methodDefinition.key);
		if(methodDefinition.value)
			this.walkExpression(methodDefinition.value);
	};
	
	Parser.prototype.walkStatements = function walkStatements(statements) {
		statements.forEach(function(statement) {
			this.walkStatement(statement);
		}, this);
	};
	
	Parser.prototype.walkStatement = function walkStatement(statement) {
		if(this.applyPluginsBailResult("statement", statement) !== undefined) return;
		if(this["walk" + statement.type])
			this["walk" + statement.type](statement);
	};
	
	// Real Statements
	Parser.prototype.walkBlockStatement = function walkBlockStatement(statement) {
		this.walkStatements(statement.body);
	};
	
	Parser.prototype.walkExpressionStatement = function walkExpressionStatement(statement) {
		this.walkExpression(statement.expression);
	};
	
	Parser.prototype.walkIfStatement = function walkIfStatement(statement) {
		var result = this.applyPluginsBailResult("statement if", statement);
		if(result === undefined) {
			this.walkExpression(statement.test);
			this.walkStatement(statement.consequent);
			if(statement.alternate)
				this.walkStatement(statement.alternate);
		} else {
			if(result)
				this.walkStatement(statement.consequent);
			else if(statement.alternate)
				this.walkStatement(statement.alternate);
		}
	};
	
	Parser.prototype.walkLabeledStatement = function walkLabeledStatement(statement) {
		var result = this.applyPluginsBailResult("label " + statement.label.name, statement);
		if(result !== true)
			this.walkStatement(statement.body);
	};
	
	Parser.prototype.walkWithStatement = function walkWithStatement(statement) {
		this.walkExpression(statement.object);
		this.walkStatement(statement.body);
	};
	
	Parser.prototype.walkSwitchStatement = function walkSwitchStatement(statement) {
		this.walkExpression(statement.discriminant);
		this.walkSwitchCases(statement.cases);
	};
	
	Parser.prototype.walkReturnStatement =
		Parser.prototype.walkThrowStatement = function walkArgumentStatement(statement) {
			if(statement.argument)
				this.walkExpression(statement.argument);
		};
	
	Parser.prototype.walkTryStatement = function walkTryStatement(statement) {
		if(this.scope.inTry) {
			this.walkStatement(statement.block);
		} else {
			this.scope.inTry = true;
			this.walkStatement(statement.block);
			this.scope.inTry = false;
		}
		if(statement.handler)
			this.walkCatchClause(statement.handler);
		if(statement.finalizer)
			this.walkStatement(statement.finalizer);
	};
	
	Parser.prototype.walkWhileStatement =
		Parser.prototype.walkDoWhileStatement = function walkLoopStatement(statement) {
			this.walkExpression(statement.test);
			this.walkStatement(statement.body);
		};
	
	Parser.prototype.walkForStatement = function walkForStatement(statement) {
		if(statement.init) {
			if(statement.init.type === "VariableDeclaration")
				this.walkStatement(statement.init);
			else
				this.walkExpression(statement.init);
		}
		if(statement.test)
			this.walkExpression(statement.test);
		if(statement.update)
			this.walkExpression(statement.update);
		this.walkStatement(statement.body);
	};
	
	Parser.prototype.walkForInStatement = function walkForInStatement(statement) {
		if(statement.left.type === "VariableDeclaration")
			this.walkStatement(statement.left);
		else
			this.walkExpression(statement.left);
		this.walkExpression(statement.right);
		this.walkStatement(statement.body);
	};
	
	Parser.prototype.walkForOfStatement = function walkForOfStatement(statement) {
		if(statement.left.type === "VariableDeclaration")
			this.walkStatement(statement.left);
		else
			this.walkExpression(statement.left);
		this.walkExpression(statement.right);
		this.walkStatement(statement.body);
	};
	
	// Declarations
	Parser.prototype.walkFunctionDeclaration = function walkFunctionDeclaration(statement) {
		this.scope.renames["$" + statement.id.name] = undefined;
		this.scope.definitions.push(statement.id.name);
		this.inScope(statement.params, function() {
			if(statement.body.type === "BlockStatement")
				this.walkStatement(statement.body);
			else
				this.walkExpression(statement.body);
		}.bind(this));
	};
	
	Parser.prototype.walkVariableDeclaration = function walkVariableDeclaration(statement) {
		if(statement.declarations)
			this.walkVariableDeclarators(statement.declarations);
	};
	
	Parser.prototype.walkClassDeclaration = function walkClassDeclaration(statement) {
		this.walkClass(statement);
	};
	
	Parser.prototype.walkSwitchCases = function walkSwitchCases(switchCases) {
		switchCases.forEach(function(switchCase) {
			if(switchCase.test)
				this.walkExpression(switchCase.test);
			this.walkStatements(switchCase.consequent);
		}, this);
	};
	
	Parser.prototype.walkCatchClause = function walkCatchClause(catchClause) {
		if(catchClause.guard)
			this.walkExpression(catchClause.guard);
		this.inScope([catchClause.param], function() {
			this.walkStatement(catchClause.body);
		}.bind(this));
	};
	
	Parser.prototype.walkVariableDeclarators = function walkVariableDeclarators(declarators) {
		declarators.forEach(function(declarator) {
			switch(declarator.type) {
				case "VariableDeclarator":
					var renameIdentifier = declarator.init && this.getRenameIdentifier(declarator.init);
					if(renameIdentifier && declarator.id.type === "Identifier" && this.applyPluginsBailResult("can-rename " + renameIdentifier, declarator.init)) {
						// renaming with "var a = b;"
						if(!this.applyPluginsBailResult("rename " + renameIdentifier, declarator.init)) {
							this.scope.renames["$" + declarator.id.name] = this.scope.renames["$" + renameIdentifier] || renameIdentifier;
							var idx = this.scope.definitions.indexOf(declarator.id.name);
							if(idx >= 0) this.scope.definitions.splice(idx, 1);
						}
					} else if(declarator.id.type === "Identifier" && !this.applyPluginsBailResult("var " + declarator.id.name, declarator)) {
						this.scope.renames["$" + declarator.id.name] = undefined;
						this.scope.definitions.push(declarator.id.name);
						if(declarator.init)
							this.walkExpression(declarator.init);
					} else {
						this.walkExpression(declarator.id);
						if(declarator.init)
							this.walkExpression(declarator.init);
					}
					break;
			}
		}, this);
	};
	
	Parser.prototype.walkExpressions = function walkExpressions(expressions) {
		expressions.forEach(function(expression) {
			if(expression)
				this.walkExpression(expression);
		}, this);
	};
	
	Parser.prototype.walkExpression = function walkExpression(expression) {
		if(this["walk" + expression.type])
			return this["walk" + expression.type](expression);
	};
	
	Parser.prototype.walkArrayExpression = function walkArrayExpression(expression) {
		if(expression.elements)
			this.walkExpressions(expression.elements);
	};
	
	Parser.prototype.walkSpreadElement = function walkSpreadElement(expression) {
		if(expression.argument)
			this.walkExpression(expression.argument);
	};
	
	Parser.prototype.walkObjectExpression = function walkObjectExpression(expression) {
		expression.properties.forEach(function(prop) {
			if(prop.computed)
				this.walkExpression(prop.key)
			this.walkExpression(prop.value);
		}, this);
	};
	
	Parser.prototype.walkFunctionExpression = function walkFunctionExpression(expression) {
		this.inScope(expression.params, function() {
			if(expression.body.type === "BlockStatement")
				this.walkStatement(expression.body);
			else
				this.walkExpression(expression.body);
		}.bind(this));
	};
	
	Parser.prototype.walkArrowFunctionExpression = function walkArrowFunctionExpression(expression) {
		this.inScope(expression.params, function() {
			if(expression.body.type === "BlockStatement")
				this.walkStatement(expression.body);
			else
				this.walkExpression(expression.body);
		}.bind(this));
	};
	
	Parser.prototype.walkSequenceExpression = function walkSequenceExpression(expression) {
		if(expression.expressions)
			this.walkExpressions(expression.expressions);
	};
	
	Parser.prototype.walkUpdateExpression = function walkUpdateExpression(expression) {
		this.walkExpression(expression.argument);
	};
	
	Parser.prototype.walkUnaryExpression = function walkUnaryExpression(expression) {
		if(expression.operator === "typeof") {
			var expr = expression.argument;
			var exprName = [];
			while(expr.type === "MemberExpression" && !expr.computed) {
				exprName.unshift(expr.property.name);
				expr = expr.object;
			}
			if(expr.type === "Identifier" && this.scope.definitions.indexOf(expr.name) === -1) {
				exprName.unshift(this.scope.renames["$" + expr.name] || expr.name);
				exprName = exprName.join(".");
				var result = this.applyPluginsBailResult("typeof " + exprName, expression);
				if(result === true)
					return;
			}
		}
		this.walkExpression(expression.argument);
	};
	
	Parser.prototype.walkBinaryExpression =
		Parser.prototype.walkLogicalExpression = function walkLeftRightExpression(expression) {
			this.walkExpression(expression.left);
			this.walkExpression(expression.right);
		};
	
	Parser.prototype.walkAssignmentExpression = function walkAssignmentExpression(expression) {
		var renameIdentifier = this.getRenameIdentifier(expression.right);
		if(expression.left.type === "Identifier" && renameIdentifier && this.applyPluginsBailResult("can-rename " + renameIdentifier, expression.right)) {
			// renaming "a = b;"
			if(!this.applyPluginsBailResult("rename " + renameIdentifier, expression.right)) {
				this.scope.renames["$" + expression.left.name] = renameIdentifier;
				var idx = this.scope.definitions.indexOf(expression.left.name);
				if(idx >= 0) this.scope.definitions.splice(idx, 1);
			}
		} else if(expression.left.type === "Identifier") {
			if(!this.applyPluginsBailResult("assigned " + expression.left.name, expression)) {
				this.walkExpression(expression.right);
			}
			this.scope.renames["$" + expression.left.name] = undefined;
			if(!this.applyPluginsBailResult("assign " + expression.left.name, expression)) {
				this.walkExpression(expression.left);
			}
		} else {
			this.walkExpression(expression.right);
			this.scope.renames["$" + expression.left.name] = undefined;
			this.walkExpression(expression.left);
		}
	};
	
	Parser.prototype.walkConditionalExpression = function walkConditionalExpression(expression) {
		var result = this.applyPluginsBailResult("expression ?:", expression);
		if(result === undefined) {
			this.walkExpression(expression.test);
			this.walkExpression(expression.consequent);
			if(expression.alternate)
				this.walkExpression(expression.alternate);
		} else {
			if(result)
				this.walkExpression(expression.consequent);
			else if(expression.alternate)
				this.walkExpression(expression.alternate);
		}
	};
	
	Parser.prototype.walkNewExpression = function walkNewExpression(expression) {
		this.walkExpression(expression.callee);
		if(expression.arguments)
			this.walkExpressions(expression.arguments);
	};
	
	Parser.prototype.walkYieldExpression = function walkYieldExpression(expression) {
		if(expression.argument)
			this.walkExpression(expression.argument);
	};
	
	Parser.prototype.walkTemplateLiteral = function walkTemplateLiteral(expression) {
		if(expression.expressions)
			this.walkExpressions(expression.expressions);
	};
	
	Parser.prototype.walkTaggedTemplateExpression = function walkTaggedTemplateExpression(expression) {
		if(expression.tag)
			this.walkExpression(expression.tag);
		if(expression.quasi && expression.quasi.expressions)
			this.walkExpressions(expression.quasi.expressions);
	};
	
	Parser.prototype.walkClassExpression = function walkClassExpression(expression) {
		this.walkClass(expression);
	};
	
	Parser.prototype.walkCallExpression = function walkCallExpression(expression) {
		function walkIIFE(functionExpression, args) {
			var params = functionExpression.params;
			var args = args.map(function(arg) {
				var renameIdentifier = this.getRenameIdentifier(arg);
				if(renameIdentifier && this.applyPluginsBailResult("can-rename " + renameIdentifier, arg)) {
					if(!this.applyPluginsBailResult("rename " + renameIdentifier, arg))
						return renameIdentifier;
				}
				this.walkExpression(arg);
			}, this);
			this.inScope(params.filter(function(identifier, idx) {
				return !args[idx];
			}), function() {
				args.forEach(function(arg, idx) {
					if(!arg) return;
					if(!params[idx] || params[idx].type !== "Identifier") return;
					this.scope.renames["$" + params[idx].name] = arg;
				}, this);
				if(functionExpression.body.type === "BlockStatement")
					this.walkStatement(functionExpression.body);
				else
					this.walkExpression(functionExpression.body);
			}.bind(this));
		}
		if(expression.callee.type === "MemberExpression" && expression.callee.object.type === "FunctionExpression" && !expression.callee.computed && ["call", "bind"].indexOf(expression.callee.property.name) >= 0 && expression.arguments && expression.arguments.length > 1) {
			// (function(...) { }.call/bind(?, ...))
			walkIIFE.call(this, expression.callee.object, expression.arguments.slice(1));
			this.walkExpression(expression.arguments[0]);
		} else if(expression.callee.type === "FunctionExpression" && expression.arguments) {
			// (function(...) { }(...))
			walkIIFE.call(this, expression.callee, expression.arguments);
		} else {
	
			var callee = this.evaluateExpression(expression.callee);
			if(callee.isIdentifier()) {
				var result = this.applyPluginsBailResult("call " + callee.identifier, expression);
				if(result === true)
					return;
			}
	
			if(expression.callee)
				this.walkExpression(expression.callee);
			if(expression.arguments)
				this.walkExpressions(expression.arguments);
		}
	};
	
	Parser.prototype.walkMemberExpression = function walkMemberExpression(expression) {
		var expr = expression;
		var exprName = [];
		while(expr.type === "MemberExpression" && !expr.computed) {
			exprName.unshift(expr.property.name);
			expr = expr.object;
		}
		if(expr.type === "Identifier" && this.scope.definitions.indexOf(expr.name) === -1) {
			exprName.unshift(this.scope.renames["$" + expr.name] || expr.name);
			exprName = exprName.join(".");
			var result = this.applyPluginsBailResult("expression " + exprName, expression);
			if(result === true)
				return;
		}
		this.walkExpression(expression.object);
		if(expression.computed === true)
			this.walkExpression(expression.property);
	};
	
	Parser.prototype.walkIdentifier = function walkIdentifier(expression) {
		if(this.scope.definitions.indexOf(expression.name) === -1) {
			var result = this.applyPluginsBailResult("expression " + (this.scope.renames["$" + expression.name] || expression.name), expression);
			if(result === true)
				return;
		}
	};
	
	Parser.prototype.inScope = function inScope(params, fn) {
		var oldScope = this.scope;
		this.scope = {
			inTry: false,
			definitions: oldScope.definitions.slice(),
			renames: Object.create(oldScope.renames)
		};
		params.forEach(function(param) {
			if(typeof param !== "string") {
				if(param.type !== "Identifier")
					return;
				param = param.name;
			}
			this.scope.renames["$" + param] = undefined;
			this.scope.definitions.push(param);
		}, this);
		fn();
		this.scope = oldScope;
	};
	
	Parser.prototype.evaluateExpression = function evaluateExpression(expression) {
		var result = this.applyPluginsBailResult("evaluate " + expression.type, expression);
		if(result !== undefined)
			return result;
		return new BasicEvaluatedExpression().setRange(expression.range);
	};
	
	Parser.prototype.parseString = function parseString(expression) {
		switch(expression.type) {
			case "BinaryExpression":
				if(expression.operator === "+")
					return this.parseString(expression.left) + this.parseString(expression.right);
				break;
			case "Literal":
				return expression.value + "";
		}
		throw new Error(expression.type + " is not supported as parameter for require");
	};
	
	Parser.prototype.parseCalculatedString = function parseCalculatedString(expression) {
		switch(expression.type) {
			case "BinaryExpression":
				if(expression.operator === "+") {
					var left = this.parseCalculatedString(expression.left);
					var right = this.parseCalculatedString(expression.right);
					if(left.code) {
						return {
							range: left.range,
							value: left.value,
							code: true
						};
					} else if(right.code) {
						return {
							range: [left.range[0], right.range ? right.range[1] : left.range[1]],
							value: left.value + right.value,
							code: true
						};
					} else {
						return {
							range: [left.range[0], right.range[1]],
							value: left.value + right.value
						};
					}
				}
				break;
			case "ConditionalExpression":
				var consequent = this.parseCalculatedString(expression.consequent);
				var alternate = this.parseCalculatedString(expression.alternate);
				var items = [];
				if(consequent.conditional)
					Array.prototype.push.apply(items, consequent.conditional);
				else if(!consequent.code)
					items.push(consequent);
				else break;
				if(alternate.conditional)
					Array.prototype.push.apply(items, alternate.conditional);
				else if(!alternate.code)
					items.push(alternate);
				else break;
				return {
					value: "",
					code: true,
					conditional: items
				};
			case "Literal":
				return {
					range: expression.range,
					value: expression.value + ""
				};
		}
		return {
			value: "",
			code: true
		};
	};
	
	["parseString", "parseCalculatedString"].forEach(function(fn) {
		Parser.prototype[fn + "Array"] = function parseXXXArray(expression) {
			switch(expression.type) {
				case "ArrayExpression":
					var arr = [];
					if(expression.elements)
						expression.elements.forEach(function(expr) {
							arr.push(this[fn](expr));
						}, this);
					return arr;
			}
			return [this[fn](expression)];
		};
	});
	
	var POSSIBLE_AST_OPTIONS = [{
		ranges: true,
		locations: true,
		ecmaVersion: 6,
		sourceType: "module"
	}, {
		ranges: true,
		locations: true,
		ecmaVersion: 6,
		sourceType: "script"
	}]
	
	Parser.prototype.parse = function parse(source, initialState) {
		var ast;
		for(var i = 0; i < POSSIBLE_AST_OPTIONS.length; i++) {
			if(!ast) {
				try {
					ast = acorn.parse(source, POSSIBLE_AST_OPTIONS[i]);
				} catch(e) {
					// ignore the error
				}
			}
		}
		if(!ast) {
			// for the error
			ast = acorn.parse(source, {
				ranges: true,
				locations: true,
				ecmaVersion: 6,
				sourceType: "module"
			});
		}
		if(!ast || typeof ast !== "object")
			throw new Error("Source couldn't be parsed");
		var oldScope = this.scope;
		var oldState = this.state;
		this.scope = {
			inTry: false,
			definitions: [],
			renames: {}
		};
		var state = this.state = initialState || {};
		if(this.applyPluginsBailResult("program", ast) === undefined)
			this.walkStatements(ast.body);
		this.scope = oldScope;
		this.state = oldState;
		return state;
	};
	
	Parser.prototype.evaluate = function evaluate(source) {
		var ast = acorn.parse("(" + source + ")", {
			ranges: true,
			locations: true,
			ecmaVersion: 6,
			sourceType: "module"
		});
		if(!ast || typeof ast !== "object" || ast.type !== "Program")
			throw new Error("evaluate: Source couldn't be parsed");
		if(ast.body.length !== 1 || ast.body[0].type !== "ExpressionStatement")
			throw new Error("evaluate: Source is not a expression");
		return this.evaluateExpression(ast.body[0].expression);
	};


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.acorn = global.acorn || {})));
	}(this, function (exports) { 'use strict';
	
	  // Reserved word lists for various dialects of the language
	
	  var reservedWords = {
	    3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
	    5: "class enum extends super const export import",
	    6: "enum",
	    7: "enum",
	    strict: "implements interface let package private protected public static yield",
	    strictBind: "eval arguments"
	  }
	
	  // And the keywords
	
	  var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this"
	
	  var keywords = {
	    5: ecma5AndLessKeywords,
	    6: ecma5AndLessKeywords + " const class extends export import super"
	  }
	
	  // ## Character categories
	
	  // Big ugly regular expressions that match characters in the
	  // whitespace, identifier, and identifier-start categories. These
	  // are only applied when a character is found to actually have a
	  // code point above 128.
	  // Generated by `bin/generate-identifier-regex.js`.
	
	  var nonASCIIidentifierStartChars = "\xaa\xb5\xba\xc0-\xd6\xd8-\xf6\xf8-\u02c1\u02c6-\u02d1\u02e0-\u02e4\u02ec\u02ee\u0370-\u0374\u0376\u0377\u037a-\u037d\u037f\u0386\u0388-\u038a\u038c\u038e-\u03a1\u03a3-\u03f5\u03f7-\u0481\u048a-\u052f\u0531-\u0556\u0559\u0561-\u0587\u05d0-\u05ea\u05f0-\u05f2\u0620-\u064a\u066e\u066f\u0671-\u06d3\u06d5\u06e5\u06e6\u06ee\u06ef\u06fa-\u06fc\u06ff\u0710\u0712-\u072f\u074d-\u07a5\u07b1\u07ca-\u07ea\u07f4\u07f5\u07fa\u0800-\u0815\u081a\u0824\u0828\u0840-\u0858\u08a0-\u08b4\u08b6-\u08bd\u0904-\u0939\u093d\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098c\u098f\u0990\u0993-\u09a8\u09aa-\u09b0\u09b2\u09b6-\u09b9\u09bd\u09ce\u09dc\u09dd\u09df-\u09e1\u09f0\u09f1\u0a05-\u0a0a\u0a0f\u0a10\u0a13-\u0a28\u0a2a-\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59-\u0a5c\u0a5e\u0a72-\u0a74\u0a85-\u0a8d\u0a8f-\u0a91\u0a93-\u0aa8\u0aaa-\u0ab0\u0ab2\u0ab3\u0ab5-\u0ab9\u0abd\u0ad0\u0ae0\u0ae1\u0af9\u0b05-\u0b0c\u0b0f\u0b10\u0b13-\u0b28\u0b2a-\u0b30\u0b32\u0b33\u0b35-\u0b39\u0b3d\u0b5c\u0b5d\u0b5f-\u0b61\u0b71\u0b83\u0b85-\u0b8a\u0b8e-\u0b90\u0b92-\u0b95\u0b99\u0b9a\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8-\u0baa\u0bae-\u0bb9\u0bd0\u0c05-\u0c0c\u0c0e-\u0c10\u0c12-\u0c28\u0c2a-\u0c39\u0c3d\u0c58-\u0c5a\u0c60\u0c61\u0c80\u0c85-\u0c8c\u0c8e-\u0c90\u0c92-\u0ca8\u0caa-\u0cb3\u0cb5-\u0cb9\u0cbd\u0cde\u0ce0\u0ce1\u0cf1\u0cf2\u0d05-\u0d0c\u0d0e-\u0d10\u0d12-\u0d3a\u0d3d\u0d4e\u0d54-\u0d56\u0d5f-\u0d61\u0d7a-\u0d7f\u0d85-\u0d96\u0d9a-\u0db1\u0db3-\u0dbb\u0dbd\u0dc0-\u0dc6\u0e01-\u0e30\u0e32\u0e33\u0e40-\u0e46\u0e81\u0e82\u0e84\u0e87\u0e88\u0e8a\u0e8d\u0e94-\u0e97\u0e99-\u0e9f\u0ea1-\u0ea3\u0ea5\u0ea7\u0eaa\u0eab\u0ead-\u0eb0\u0eb2\u0eb3\u0ebd\u0ec0-\u0ec4\u0ec6\u0edc-\u0edf\u0f00\u0f40-\u0f47\u0f49-\u0f6c\u0f88-\u0f8c\u1000-\u102a\u103f\u1050-\u1055\u105a-\u105d\u1061\u1065\u1066\u106e-\u1070\u1075-\u1081\u108e\u10a0-\u10c5\u10c7\u10cd\u10d0-\u10fa\u10fc-\u1248\u124a-\u124d\u1250-\u1256\u1258\u125a-\u125d\u1260-\u1288\u128a-\u128d\u1290-\u12b0\u12b2-\u12b5\u12b8-\u12be\u12c0\u12c2-\u12c5\u12c8-\u12d6\u12d8-\u1310\u1312-\u1315\u1318-\u135a\u1380-\u138f\u13a0-\u13f5\u13f8-\u13fd\u1401-\u166c\u166f-\u167f\u1681-\u169a\u16a0-\u16ea\u16ee-\u16f8\u1700-\u170c\u170e-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176c\u176e-\u1770\u1780-\u17b3\u17d7\u17dc\u1820-\u1877\u1880-\u18a8\u18aa\u18b0-\u18f5\u1900-\u191e\u1950-\u196d\u1970-\u1974\u1980-\u19ab\u19b0-\u19c9\u1a00-\u1a16\u1a20-\u1a54\u1aa7\u1b05-\u1b33\u1b45-\u1b4b\u1b83-\u1ba0\u1bae\u1baf\u1bba-\u1be5\u1c00-\u1c23\u1c4d-\u1c4f\u1c5a-\u1c7d\u1c80-\u1c88\u1ce9-\u1cec\u1cee-\u1cf1\u1cf5\u1cf6\u1d00-\u1dbf\u1e00-\u1f15\u1f18-\u1f1d\u1f20-\u1f45\u1f48-\u1f4d\u1f50-\u1f57\u1f59\u1f5b\u1f5d\u1f5f-\u1f7d\u1f80-\u1fb4\u1fb6-\u1fbc\u1fbe\u1fc2-\u1fc4\u1fc6-\u1fcc\u1fd0-\u1fd3\u1fd6-\u1fdb\u1fe0-\u1fec\u1ff2-\u1ff4\u1ff6-\u1ffc\u2071\u207f\u2090-\u209c\u2102\u2107\u210a-\u2113\u2115\u2118-\u211d\u2124\u2126\u2128\u212a-\u2139\u213c-\u213f\u2145-\u2149\u214e\u2160-\u2188\u2c00-\u2c2e\u2c30-\u2c5e\u2c60-\u2ce4\u2ceb-\u2cee\u2cf2\u2cf3\u2d00-\u2d25\u2d27\u2d2d\u2d30-\u2d67\u2d6f\u2d80-\u2d96\u2da0-\u2da6\u2da8-\u2dae\u2db0-\u2db6\u2db8-\u2dbe\u2dc0-\u2dc6\u2dc8-\u2dce\u2dd0-\u2dd6\u2dd8-\u2dde\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303c\u3041-\u3096\u309b-\u309f\u30a1-\u30fa\u30fc-\u30ff\u3105-\u312d\u3131-\u318e\u31a0-\u31ba\u31f0-\u31ff\u3400-\u4db5\u4e00-\u9fd5\ua000-\ua48c\ua4d0-\ua4fd\ua500-\ua60c\ua610-\ua61f\ua62a\ua62b\ua640-\ua66e\ua67f-\ua69d\ua6a0-\ua6ef\ua717-\ua71f\ua722-\ua788\ua78b-\ua7ae\ua7b0-\ua7b7\ua7f7-\ua801\ua803-\ua805\ua807-\ua80a\ua80c-\ua822\ua840-\ua873\ua882-\ua8b3\ua8f2-\ua8f7\ua8fb\ua8fd\ua90a-\ua925\ua930-\ua946\ua960-\ua97c\ua984-\ua9b2\ua9cf\ua9e0-\ua9e4\ua9e6-\ua9ef\ua9fa-\ua9fe\uaa00-\uaa28\uaa40-\uaa42\uaa44-\uaa4b\uaa60-\uaa76\uaa7a\uaa7e-\uaaaf\uaab1\uaab5\uaab6\uaab9-\uaabd\uaac0\uaac2\uaadb-\uaadd\uaae0-\uaaea\uaaf2-\uaaf4\uab01-\uab06\uab09-\uab0e\uab11-\uab16\uab20-\uab26\uab28-\uab2e\uab30-\uab5a\uab5c-\uab65\uab70-\uabe2\uac00-\ud7a3\ud7b0-\ud7c6\ud7cb-\ud7fb\uf900-\ufa6d\ufa70-\ufad9\ufb00-\ufb06\ufb13-\ufb17\ufb1d\ufb1f-\ufb28\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40\ufb41\ufb43\ufb44\ufb46-\ufbb1\ufbd3-\ufd3d\ufd50-\ufd8f\ufd92-\ufdc7\ufdf0-\ufdfb\ufe70-\ufe74\ufe76-\ufefc\uff21-\uff3a\uff41-\uff5a\uff66-\uffbe\uffc2-\uffc7\uffca-\uffcf\uffd2-\uffd7\uffda-\uffdc"
	  var nonASCIIidentifierChars = "\u200c\u200d\xb7\u0300-\u036f\u0387\u0483-\u0487\u0591-\u05bd\u05bf\u05c1\u05c2\u05c4\u05c5\u05c7\u0610-\u061a\u064b-\u0669\u0670\u06d6-\u06dc\u06df-\u06e4\u06e7\u06e8\u06ea-\u06ed\u06f0-\u06f9\u0711\u0730-\u074a\u07a6-\u07b0\u07c0-\u07c9\u07eb-\u07f3\u0816-\u0819\u081b-\u0823\u0825-\u0827\u0829-\u082d\u0859-\u085b\u08d4-\u08e1\u08e3-\u0903\u093a-\u093c\u093e-\u094f\u0951-\u0957\u0962\u0963\u0966-\u096f\u0981-\u0983\u09bc\u09be-\u09c4\u09c7\u09c8\u09cb-\u09cd\u09d7\u09e2\u09e3\u09e6-\u09ef\u0a01-\u0a03\u0a3c\u0a3e-\u0a42\u0a47\u0a48\u0a4b-\u0a4d\u0a51\u0a66-\u0a71\u0a75\u0a81-\u0a83\u0abc\u0abe-\u0ac5\u0ac7-\u0ac9\u0acb-\u0acd\u0ae2\u0ae3\u0ae6-\u0aef\u0b01-\u0b03\u0b3c\u0b3e-\u0b44\u0b47\u0b48\u0b4b-\u0b4d\u0b56\u0b57\u0b62\u0b63\u0b66-\u0b6f\u0b82\u0bbe-\u0bc2\u0bc6-\u0bc8\u0bca-\u0bcd\u0bd7\u0be6-\u0bef\u0c00-\u0c03\u0c3e-\u0c44\u0c46-\u0c48\u0c4a-\u0c4d\u0c55\u0c56\u0c62\u0c63\u0c66-\u0c6f\u0c81-\u0c83\u0cbc\u0cbe-\u0cc4\u0cc6-\u0cc8\u0cca-\u0ccd\u0cd5\u0cd6\u0ce2\u0ce3\u0ce6-\u0cef\u0d01-\u0d03\u0d3e-\u0d44\u0d46-\u0d48\u0d4a-\u0d4d\u0d57\u0d62\u0d63\u0d66-\u0d6f\u0d82\u0d83\u0dca\u0dcf-\u0dd4\u0dd6\u0dd8-\u0ddf\u0de6-\u0def\u0df2\u0df3\u0e31\u0e34-\u0e3a\u0e47-\u0e4e\u0e50-\u0e59\u0eb1\u0eb4-\u0eb9\u0ebb\u0ebc\u0ec8-\u0ecd\u0ed0-\u0ed9\u0f18\u0f19\u0f20-\u0f29\u0f35\u0f37\u0f39\u0f3e\u0f3f\u0f71-\u0f84\u0f86\u0f87\u0f8d-\u0f97\u0f99-\u0fbc\u0fc6\u102b-\u103e\u1040-\u1049\u1056-\u1059\u105e-\u1060\u1062-\u1064\u1067-\u106d\u1071-\u1074\u1082-\u108d\u108f-\u109d\u135d-\u135f\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17b4-\u17d3\u17dd\u17e0-\u17e9\u180b-\u180d\u1810-\u1819\u18a9\u1920-\u192b\u1930-\u193b\u1946-\u194f\u19d0-\u19da\u1a17-\u1a1b\u1a55-\u1a5e\u1a60-\u1a7c\u1a7f-\u1a89\u1a90-\u1a99\u1ab0-\u1abd\u1b00-\u1b04\u1b34-\u1b44\u1b50-\u1b59\u1b6b-\u1b73\u1b80-\u1b82\u1ba1-\u1bad\u1bb0-\u1bb9\u1be6-\u1bf3\u1c24-\u1c37\u1c40-\u1c49\u1c50-\u1c59\u1cd0-\u1cd2\u1cd4-\u1ce8\u1ced\u1cf2-\u1cf4\u1cf8\u1cf9\u1dc0-\u1df5\u1dfb-\u1dff\u203f\u2040\u2054\u20d0-\u20dc\u20e1\u20e5-\u20f0\u2cef-\u2cf1\u2d7f\u2de0-\u2dff\u302a-\u302f\u3099\u309a\ua620-\ua629\ua66f\ua674-\ua67d\ua69e\ua69f\ua6f0\ua6f1\ua802\ua806\ua80b\ua823-\ua827\ua880\ua881\ua8b4-\ua8c5\ua8d0-\ua8d9\ua8e0-\ua8f1\ua900-\ua909\ua926-\ua92d\ua947-\ua953\ua980-\ua983\ua9b3-\ua9c0\ua9d0-\ua9d9\ua9e5\ua9f0-\ua9f9\uaa29-\uaa36\uaa43\uaa4c\uaa4d\uaa50-\uaa59\uaa7b-\uaa7d\uaab0\uaab2-\uaab4\uaab7\uaab8\uaabe\uaabf\uaac1\uaaeb-\uaaef\uaaf5\uaaf6\uabe3-\uabea\uabec\uabed\uabf0-\uabf9\ufb1e\ufe00-\ufe0f\ufe20-\ufe2f\ufe33\ufe34\ufe4d-\ufe4f\uff10-\uff19\uff3f"
	
	  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]")
	  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]")
	
	  nonASCIIidentifierStartChars = nonASCIIidentifierChars = null
	
	  // These are a run-length and offset encoded representation of the
	  // >0xffff code points that are a valid part of identifiers. The
	  // offset starts at 0x10000, and each pair of numbers represents an
	  // offset to the next range, and then a size of the range. They were
	  // generated by bin/generate-identifier-regex.js
	  var astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,17,26,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,157,310,10,21,11,7,153,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,26,45,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,785,52,76,44,33,24,27,35,42,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,54,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,86,25,391,63,32,0,449,56,264,8,2,36,18,0,50,29,881,921,103,110,18,195,2749,1070,4050,582,8634,568,8,30,114,29,19,47,17,3,32,20,6,18,881,68,12,0,67,12,65,0,32,6124,20,754,9486,1,3071,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,4149,196,60,67,1213,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42710,42,4148,12,221,3,5761,10591,541]
	  var astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,1306,2,54,14,32,9,16,3,46,10,54,9,7,2,37,13,2,9,52,0,13,2,49,13,10,2,4,9,83,11,7,0,161,11,6,9,7,3,57,0,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,87,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,423,9,838,7,2,7,17,9,57,21,2,13,19882,9,135,4,60,6,26,9,1016,45,17,3,19723,1,5319,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,2214,6,110,6,6,9,792487,239]
	
	  // This has a complexity linear to the value of the code. The
	  // assumption is that looking up astral identifier characters is
	  // rare.
	  function isInAstralSet(code, set) {
	    var pos = 0x10000
	    for (var i = 0; i < set.length; i += 2) {
	      pos += set[i]
	      if (pos > code) return false
	      pos += set[i + 1]
	      if (pos >= code) return true
	    }
	  }
	
	  // Test whether a given character code starts an identifier.
	
	  function isIdentifierStart(code, astral) {
	    if (code < 65) return code === 36
	    if (code < 91) return true
	    if (code < 97) return code === 95
	    if (code < 123) return true
	    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))
	    if (astral === false) return false
	    return isInAstralSet(code, astralIdentifierStartCodes)
	  }
	
	  // Test whether a given character is part of an identifier.
	
	  function isIdentifierChar(code, astral) {
	    if (code < 48) return code === 36
	    if (code < 58) return true
	    if (code < 65) return false
	    if (code < 91) return true
	    if (code < 97) return code === 95
	    if (code < 123) return true
	    if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code))
	    if (astral === false) return false
	    return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes)
	  }
	
	  // ## Token types
	
	  // The assignment of fine-grained, information-carrying type objects
	  // allows the tokenizer to store the information it has about a
	  // token in a way that is very cheap for the parser to look up.
	
	  // All token type variables start with an underscore, to make them
	  // easy to recognize.
	
	  // The `beforeExpr` property is used to disambiguate between regular
	  // expressions and divisions. It is set on all token types that can
	  // be followed by an expression (thus, a slash after them would be a
	  // regular expression).
	  //
	  // The `startsExpr` property is used to check if the token ends a
	  // `yield` expression. It is set on all token types that either can
	  // directly start an expression (like a quotation mark) or can
	  // continue an expression (like the body of a string).
	  //
	  // `isLoop` marks a keyword as starting a loop, which is important
	  // to know when parsing a label, in order to allow or disallow
	  // continue jumps to that label.
	
	  var TokenType = function TokenType(label, conf) {
	    if ( conf === void 0 ) conf = {};
	
	    this.label = label
	    this.keyword = conf.keyword
	    this.beforeExpr = !!conf.beforeExpr
	    this.startsExpr = !!conf.startsExpr
	    this.isLoop = !!conf.isLoop
	    this.isAssign = !!conf.isAssign
	    this.prefix = !!conf.prefix
	    this.postfix = !!conf.postfix
	    this.binop = conf.binop || null
	    this.updateContext = null
	  };
	
	  function binop(name, prec) {
	    return new TokenType(name, {beforeExpr: true, binop: prec})
	  }
	  var beforeExpr = {beforeExpr: true};
	  var startsExpr = {startsExpr: true};
	  // Map keyword names to token types.
	
	  var keywordTypes = {}
	
	  // Succinct definitions of keyword token types
	  function kw(name, options) {
	    if ( options === void 0 ) options = {};
	
	    options.keyword = name
	    return keywordTypes[name] = new TokenType(name, options)
	  }
	
	  var tt = {
	    num: new TokenType("num", startsExpr),
	    regexp: new TokenType("regexp", startsExpr),
	    string: new TokenType("string", startsExpr),
	    name: new TokenType("name", startsExpr),
	    eof: new TokenType("eof"),
	
	    // Punctuation token types.
	    bracketL: new TokenType("[", {beforeExpr: true, startsExpr: true}),
	    bracketR: new TokenType("]"),
	    braceL: new TokenType("{", {beforeExpr: true, startsExpr: true}),
	    braceR: new TokenType("}"),
	    parenL: new TokenType("(", {beforeExpr: true, startsExpr: true}),
	    parenR: new TokenType(")"),
	    comma: new TokenType(",", beforeExpr),
	    semi: new TokenType(";", beforeExpr),
	    colon: new TokenType(":", beforeExpr),
	    dot: new TokenType("."),
	    question: new TokenType("?", beforeExpr),
	    arrow: new TokenType("=>", beforeExpr),
	    template: new TokenType("template"),
	    ellipsis: new TokenType("...", beforeExpr),
	    backQuote: new TokenType("`", startsExpr),
	    dollarBraceL: new TokenType("${", {beforeExpr: true, startsExpr: true}),
	
	    // Operators. These carry several kinds of properties to help the
	    // parser use them properly (the presence of these properties is
	    // what categorizes them as operators).
	    //
	    // `binop`, when present, specifies that this operator is a binary
	    // operator, and will refer to its precedence.
	    //
	    // `prefix` and `postfix` mark the operator as a prefix or postfix
	    // unary operator.
	    //
	    // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	    // binary operators with a very low precedence, that should result
	    // in AssignmentExpression nodes.
	
	    eq: new TokenType("=", {beforeExpr: true, isAssign: true}),
	    assign: new TokenType("_=", {beforeExpr: true, isAssign: true}),
	    incDec: new TokenType("++/--", {prefix: true, postfix: true, startsExpr: true}),
	    prefix: new TokenType("prefix", {beforeExpr: true, prefix: true, startsExpr: true}),
	    logicalOR: binop("||", 1),
	    logicalAND: binop("&&", 2),
	    bitwiseOR: binop("|", 3),
	    bitwiseXOR: binop("^", 4),
	    bitwiseAND: binop("&", 5),
	    equality: binop("==/!=", 6),
	    relational: binop("</>", 7),
	    bitShift: binop("<</>>", 8),
	    plusMin: new TokenType("+/-", {beforeExpr: true, binop: 9, prefix: true, startsExpr: true}),
	    modulo: binop("%", 10),
	    star: binop("*", 10),
	    slash: binop("/", 10),
	    starstar: new TokenType("**", {beforeExpr: true}),
	
	    // Keyword token types.
	    _break: kw("break"),
	    _case: kw("case", beforeExpr),
	    _catch: kw("catch"),
	    _continue: kw("continue"),
	    _debugger: kw("debugger"),
	    _default: kw("default", beforeExpr),
	    _do: kw("do", {isLoop: true, beforeExpr: true}),
	    _else: kw("else", beforeExpr),
	    _finally: kw("finally"),
	    _for: kw("for", {isLoop: true}),
	    _function: kw("function", startsExpr),
	    _if: kw("if"),
	    _return: kw("return", beforeExpr),
	    _switch: kw("switch"),
	    _throw: kw("throw", beforeExpr),
	    _try: kw("try"),
	    _var: kw("var"),
	    _const: kw("const"),
	    _while: kw("while", {isLoop: true}),
	    _with: kw("with"),
	    _new: kw("new", {beforeExpr: true, startsExpr: true}),
	    _this: kw("this", startsExpr),
	    _super: kw("super", startsExpr),
	    _class: kw("class"),
	    _extends: kw("extends", beforeExpr),
	    _export: kw("export"),
	    _import: kw("import"),
	    _null: kw("null", startsExpr),
	    _true: kw("true", startsExpr),
	    _false: kw("false", startsExpr),
	    _in: kw("in", {beforeExpr: true, binop: 7}),
	    _instanceof: kw("instanceof", {beforeExpr: true, binop: 7}),
	    _typeof: kw("typeof", {beforeExpr: true, prefix: true, startsExpr: true}),
	    _void: kw("void", {beforeExpr: true, prefix: true, startsExpr: true}),
	    _delete: kw("delete", {beforeExpr: true, prefix: true, startsExpr: true})
	  }
	
	  // Matches a whole line break (where CRLF is considered a single
	  // line break). Used to count lines.
	
	  var lineBreak = /\r\n?|\n|\u2028|\u2029/
	  var lineBreakG = new RegExp(lineBreak.source, "g")
	
	  function isNewLine(code) {
	    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029
	  }
	
	  var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/
	
	  var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g
	
	  function isArray(obj) {
	    return Object.prototype.toString.call(obj) === "[object Array]"
	  }
	
	  // Checks if an object has a property.
	
	  function has(obj, propName) {
	    return Object.prototype.hasOwnProperty.call(obj, propName)
	  }
	
	  // These are used when `options.locations` is on, for the
	  // `startLoc` and `endLoc` properties.
	
	  var Position = function Position(line, col) {
	    this.line = line
	    this.column = col
	  };
	
	  Position.prototype.offset = function offset (n) {
	    return new Position(this.line, this.column + n)
	  };
	
	  var SourceLocation = function SourceLocation(p, start, end) {
	    this.start = start
	    this.end = end
	    if (p.sourceFile !== null) this.source = p.sourceFile
	  };
	
	  // The `getLineInfo` function is mostly useful when the
	  // `locations` option is off (for performance reasons) and you
	  // want to find the line/column position for a given character
	  // offset. `input` should be the code string that the offset refers
	  // into.
	
	  function getLineInfo(input, offset) {
	    for (var line = 1, cur = 0;;) {
	      lineBreakG.lastIndex = cur
	      var match = lineBreakG.exec(input)
	      if (match && match.index < offset) {
	        ++line
	        cur = match.index + match[0].length
	      } else {
	        return new Position(line, offset - cur)
	      }
	    }
	  }
	
	  // A second optional argument can be given to further configure
	  // the parser process. These options are recognized:
	
	  var defaultOptions = {
	    // `ecmaVersion` indicates the ECMAScript version to parse. Must
	    // be either 3, or 5, or 6. This influences support for strict
	    // mode, the set of reserved words, support for getters and
	    // setters and other features. The default is 6.
	    ecmaVersion: 6,
	    // Source type ("script" or "module") for different semantics
	    sourceType: "script",
	    // `onInsertedSemicolon` can be a callback that will be called
	    // when a semicolon is automatically inserted. It will be passed
	    // th position of the comma as an offset, and if `locations` is
	    // enabled, it is given the location as a `{line, column}` object
	    // as second argument.
	    onInsertedSemicolon: null,
	    // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
	    // trailing commas.
	    onTrailingComma: null,
	    // By default, reserved words are only enforced if ecmaVersion >= 5.
	    // Set `allowReserved` to a boolean value to explicitly turn this on
	    // an off. When this option has the value "never", reserved words
	    // and keywords can also not be used as property names.
	    allowReserved: null,
	    // When enabled, a return at the top level is not considered an
	    // error.
	    allowReturnOutsideFunction: false,
	    // When enabled, import/export statements are not constrained to
	    // appearing at the top of the program.
	    allowImportExportEverywhere: false,
	    // When enabled, hashbang directive in the beginning of file
	    // is allowed and treated as a line comment.
	    allowHashBang: false,
	    // When `locations` is on, `loc` properties holding objects with
	    // `start` and `end` properties in `{line, column}` form (with
	    // line being 1-based and column 0-based) will be attached to the
	    // nodes.
	    locations: false,
	    // A function can be passed as `onToken` option, which will
	    // cause Acorn to call that function with object in the same
	    // format as tokens returned from `tokenizer().getToken()`. Note
	    // that you are not allowed to call the parser from the
	    // callback—that will corrupt its internal state.
	    onToken: null,
	    // A function can be passed as `onComment` option, which will
	    // cause Acorn to call that function with `(block, text, start,
	    // end)` parameters whenever a comment is skipped. `block` is a
	    // boolean indicating whether this is a block (`/* */`) comment,
	    // `text` is the content of the comment, and `start` and `end` are
	    // character offsets that denote the start and end of the comment.
	    // When the `locations` option is on, two more parameters are
	    // passed, the full `{line, column}` locations of the start and
	    // end of the comments. Note that you are not allowed to call the
	    // parser from the callback—that will corrupt its internal state.
	    onComment: null,
	    // Nodes have their start and end characters offsets recorded in
	    // `start` and `end` properties (directly on the node, rather than
	    // the `loc` object, which holds line/column data. To also add a
	    // [semi-standardized][range] `range` property holding a `[start,
	    // end]` array with the same numbers, set the `ranges` option to
	    // `true`.
	    //
	    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	    ranges: false,
	    // It is possible to parse multiple files into a single AST by
	    // passing the tree produced by parsing the first file as
	    // `program` option in subsequent parses. This will add the
	    // toplevel forms of the parsed file to the `Program` (top) node
	    // of an existing parse tree.
	    program: null,
	    // When `locations` is on, you can pass this to record the source
	    // file in every node's `loc` object.
	    sourceFile: null,
	    // This value, if given, is stored in every node, whether
	    // `locations` is on or off.
	    directSourceFile: null,
	    // When enabled, parenthesized expressions are represented by
	    // (non-standard) ParenthesizedExpression nodes
	    preserveParens: false,
	    plugins: {}
	  }
	
	  // Interpret and default an options object
	
	  function getOptions(opts) {
	    var options = {}
	    for (var opt in defaultOptions)
	      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt]
	    if (options.allowReserved == null)
	      options.allowReserved = options.ecmaVersion < 5
	
	    if (isArray(options.onToken)) {
	      var tokens = options.onToken
	      options.onToken = function (token) { return tokens.push(token); }
	    }
	    if (isArray(options.onComment))
	      options.onComment = pushComment(options, options.onComment)
	
	    return options
	  }
	
	  function pushComment(options, array) {
	    return function (block, text, start, end, startLoc, endLoc) {
	      var comment = {
	        type: block ? 'Block' : 'Line',
	        value: text,
	        start: start,
	        end: end
	      }
	      if (options.locations)
	        comment.loc = new SourceLocation(this, startLoc, endLoc)
	      if (options.ranges)
	        comment.range = [start, end]
	      array.push(comment)
	    }
	  }
	
	  // Registered plugins
	  var plugins = {}
	
	  function keywordRegexp(words) {
	    return new RegExp("^(" + words.replace(/ /g, "|") + ")$")
	  }
	
	  var Parser = function Parser(options, input, startPos) {
	    this.options = options = getOptions(options)
	    this.sourceFile = options.sourceFile
	    this.keywords = keywordRegexp(keywords[options.ecmaVersion >= 6 ? 6 : 5])
	    var reserved = options.allowReserved ? "" :
	        reservedWords[options.ecmaVersion] + (options.sourceType == "module" ? " await" : "")
	    this.reservedWords = keywordRegexp(reserved)
	    var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict
	    this.reservedWordsStrict = keywordRegexp(reservedStrict)
	    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + reservedWords.strictBind)
	    this.input = String(input)
	
	    // Used to signal to callers of `readWord1` whether the word
	    // contained any escape sequences. This is needed because words with
	    // escape sequences must not be interpreted as keywords.
	    this.containsEsc = false
	
	    // Load plugins
	    this.loadPlugins(options.plugins)
	
	    // Set up token state
	
	    // The current position of the tokenizer in the input.
	    if (startPos) {
	      this.pos = startPos
	      this.lineStart = Math.max(0, this.input.lastIndexOf("\n", startPos))
	      this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length
	    } else {
	      this.pos = this.lineStart = 0
	      this.curLine = 1
	    }
	
	    // Properties of the current token:
	    // Its type
	    this.type = tt.eof
	    // For tokens that include more information than their type, the value
	    this.value = null
	    // Its start and end offset
	    this.start = this.end = this.pos
	    // And, if locations are used, the {line, column} object
	    // corresponding to those offsets
	    this.startLoc = this.endLoc = this.curPosition()
	
	    // Position information for the previous token
	    this.lastTokEndLoc = this.lastTokStartLoc = null
	    this.lastTokStart = this.lastTokEnd = this.pos
	
	    // The context stack is used to superficially track syntactic
	    // context to predict whether a regular expression is allowed in a
	    // given position.
	    this.context = this.initialContext()
	    this.exprAllowed = true
	
	    // Figure out if it's a module code.
	    this.strict = this.inModule = options.sourceType === "module"
	
	    // Used to signify the start of a potential arrow function
	    this.potentialArrowAt = -1
	
	    // Flags to track whether we are in a function, a generator.
	    this.inFunction = this.inGenerator = false
	    // Labels in scope.
	    this.labels = []
	
	    // If enabled, skip leading hashbang line.
	    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!')
	      this.skipLineComment(2)
	  };
	
	  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them
	  Parser.prototype.isKeyword = function isKeyword (word) { return this.keywords.test(word) };
	  Parser.prototype.isReservedWord = function isReservedWord (word) { return this.reservedWords.test(word) };
	
	  Parser.prototype.extend = function extend (name, f) {
	    this[name] = f(this[name])
	  };
	
	  Parser.prototype.loadPlugins = function loadPlugins (pluginConfigs) {
	      var this$1 = this;
	
	    for (var name in pluginConfigs) {
	      var plugin = plugins[name]
	      if (!plugin) throw new Error("Plugin '" + name + "' not found")
	      plugin(this$1, pluginConfigs[name])
	    }
	  };
	
	  Parser.prototype.parse = function parse () {
	    var node = this.options.program || this.startNode()
	    this.nextToken()
	    return this.parseTopLevel(node)
	  };
	
	  var pp = Parser.prototype
	
	  // ## Parser utilities
	
	  // Test whether a statement node is the string literal `"use strict"`.
	
	  pp.isUseStrict = function(stmt) {
	    return this.options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" &&
	      stmt.expression.type === "Literal" &&
	      stmt.expression.raw.slice(1, -1) === "use strict"
	  }
	
	  // Predicate that tests whether the next token is of the given
	  // type, and if yes, consumes it as a side effect.
	
	  pp.eat = function(type) {
	    if (this.type === type) {
	      this.next()
	      return true
	    } else {
	      return false
	    }
	  }
	
	  // Tests whether parsed token is a contextual keyword.
	
	  pp.isContextual = function(name) {
	    return this.type === tt.name && this.value === name
	  }
	
	  // Consumes contextual keyword if possible.
	
	  pp.eatContextual = function(name) {
	    return this.value === name && this.eat(tt.name)
	  }
	
	  // Asserts that following token is given contextual keyword.
	
	  pp.expectContextual = function(name) {
	    if (!this.eatContextual(name)) this.unexpected()
	  }
	
	  // Test whether a semicolon can be inserted at the current position.
	
	  pp.canInsertSemicolon = function() {
	    return this.type === tt.eof ||
	      this.type === tt.braceR ||
	      lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
	  }
	
	  pp.insertSemicolon = function() {
	    if (this.canInsertSemicolon()) {
	      if (this.options.onInsertedSemicolon)
	        this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)
	      return true
	    }
	  }
	
	  // Consume a semicolon, or, failing that, see if we are allowed to
	  // pretend that there is a semicolon at this position.
	
	  pp.semicolon = function() {
	    if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()
	  }
	
	  pp.afterTrailingComma = function(tokType) {
	    if (this.type == tokType) {
	      if (this.options.onTrailingComma)
	        this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)
	      this.next()
	      return true
	    }
	  }
	
	  // Expect a token of a given type. If found, consume it, otherwise,
	  // raise an unexpected token error.
	
	  pp.expect = function(type) {
	    this.eat(type) || this.unexpected()
	  }
	
	  // Raise an unexpected token error.
	
	  pp.unexpected = function(pos) {
	    this.raise(pos != null ? pos : this.start, "Unexpected token")
	  }
	
	  var DestructuringErrors = function DestructuringErrors() {
	    this.shorthandAssign = 0
	    this.trailingComma = 0
	  };
	
	  pp.checkPatternErrors = function(refDestructuringErrors, andThrow) {
	    var trailing = refDestructuringErrors && refDestructuringErrors.trailingComma
	    if (!andThrow) return !!trailing
	    if (trailing) this.raise(trailing, "Comma is not permitted after the rest element")
	  }
	
	  pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
	    var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign
	    if (!andThrow) return !!pos
	    if (pos) this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns")
	  }
	
	  var pp$1 = Parser.prototype
	
	  // ### Statement parsing
	
	  // Parse a program. Initializes the parser, reads any number of
	  // statements, and wraps them in a Program node.  Optionally takes a
	  // `program` argument.  If present, the statements will be appended
	  // to its body instead of creating a new node.
	
	  pp$1.parseTopLevel = function(node) {
	    var this$1 = this;
	
	    var first = true
	    if (!node.body) node.body = []
	    while (this.type !== tt.eof) {
	      var stmt = this$1.parseStatement(true, true)
	      node.body.push(stmt)
	      if (first) {
	        if (this$1.isUseStrict(stmt)) this$1.setStrict(true)
	        first = false
	      }
	    }
	    this.next()
	    if (this.options.ecmaVersion >= 6) {
	      node.sourceType = this.options.sourceType
	    }
	    return this.finishNode(node, "Program")
	  }
	
	  var loopLabel = {kind: "loop"};
	  var switchLabel = {kind: "switch"};
	  pp$1.isLet = function() {
	    if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != "let") return false
	    skipWhiteSpace.lastIndex = this.pos
	    var skip = skipWhiteSpace.exec(this.input)
	    var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)
	    if (nextCh === 91 || nextCh == 123) return true // '{' and '['
	    if (isIdentifierStart(nextCh, true)) {
	      for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}
	      var ident = this.input.slice(next, pos)
	      if (!this.isKeyword(ident)) return true
	    }
	    return false
	  }
	
	  // Parse a single statement.
	  //
	  // If expecting a statement and finding a slash operator, parse a
	  // regular expression literal. This is to handle cases like
	  // `if (foo) /blah/.exec(foo)`, where looking at the previous token
	  // does not help.
	
	  pp$1.parseStatement = function(declaration, topLevel) {
	    var starttype = this.type, node = this.startNode(), kind
	
	    if (this.isLet()) {
	      starttype = tt._var
	      kind = "let"
	    }
	
	    // Most types of statements are recognized by the keyword they
	    // start with. Many are trivial to parse, some require a bit of
	    // complexity.
	
	    switch (starttype) {
	    case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)
	    case tt._debugger: return this.parseDebuggerStatement(node)
	    case tt._do: return this.parseDoStatement(node)
	    case tt._for: return this.parseForStatement(node)
	    case tt._function:
	      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()
	      return this.parseFunctionStatement(node)
	    case tt._class:
	      if (!declaration) this.unexpected()
	      return this.parseClass(node, true)
	    case tt._if: return this.parseIfStatement(node)
	    case tt._return: return this.parseReturnStatement(node)
	    case tt._switch: return this.parseSwitchStatement(node)
	    case tt._throw: return this.parseThrowStatement(node)
	    case tt._try: return this.parseTryStatement(node)
	    case tt._const: case tt._var:
	      kind = kind || this.value
	      if (!declaration && kind != "var") this.unexpected()
	      return this.parseVarStatement(node, kind)
	    case tt._while: return this.parseWhileStatement(node)
	    case tt._with: return this.parseWithStatement(node)
	    case tt.braceL: return this.parseBlock()
	    case tt.semi: return this.parseEmptyStatement(node)
	    case tt._export:
	    case tt._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel)
	          this.raise(this.start, "'import' and 'export' may only appear at the top level")
	        if (!this.inModule)
	          this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")
	      }
	      return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)
	
	      // If the statement does not start with a statement keyword or a
	      // brace, it's an ExpressionStatement or LabeledStatement. We
	      // simply start parsing an expression, and afterwards, if the
	      // next token is a colon and the expression was a simple
	      // Identifier node, we switch to interpreting it as a label.
	    default:
	      var maybeName = this.value, expr = this.parseExpression()
	      if (starttype === tt.name && expr.type === "Identifier" && this.eat(tt.colon))
	        return this.parseLabeledStatement(node, maybeName, expr)
	      else return this.parseExpressionStatement(node, expr)
	    }
	  }
	
	  pp$1.parseBreakContinueStatement = function(node, keyword) {
	    var this$1 = this;
	
	    var isBreak = keyword == "break"
	    this.next()
	    if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null
	    else if (this.type !== tt.name) this.unexpected()
	    else {
	      node.label = this.parseIdent()
	      this.semicolon()
	    }
	
	    // Verify that there is an actual destination to break or
	    // continue to.
	    for (var i = 0; i < this.labels.length; ++i) {
	      var lab = this$1.labels[i]
	      if (node.label == null || lab.name === node.label.name) {
	        if (lab.kind != null && (isBreak || lab.kind === "loop")) break
	        if (node.label && isBreak) break
	      }
	    }
	    if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword)
	    return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement")
	  }
	
	  pp$1.parseDebuggerStatement = function(node) {
	    this.next()
	    this.semicolon()
	    return this.finishNode(node, "DebuggerStatement")
	  }
	
	  pp$1.parseDoStatement = function(node) {
	    this.next()
	    this.labels.push(loopLabel)
	    node.body = this.parseStatement(false)
	    this.labels.pop()
	    this.expect(tt._while)
	    node.test = this.parseParenExpression()
	    if (this.options.ecmaVersion >= 6)
	      this.eat(tt.semi)
	    else
	      this.semicolon()
	    return this.finishNode(node, "DoWhileStatement")
	  }
	
	  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	  // loop is non-trivial. Basically, we have to parse the init `var`
	  // statement or expression, disallowing the `in` operator (see
	  // the second parameter to `parseExpression`), and then check
	  // whether the next token is `in` or `of`. When there is no init
	  // part (semicolon immediately after the opening parenthesis), it
	  // is a regular `for` loop.
	
	  pp$1.parseForStatement = function(node) {
	    this.next()
	    this.labels.push(loopLabel)
	    this.expect(tt.parenL)
	    if (this.type === tt.semi) return this.parseFor(node, null)
	    var isLet = this.isLet()
	    if (this.type === tt._var || this.type === tt._const || isLet) {
	      var init$1 = this.startNode(), kind = isLet ? "let" : this.value
	      this.next()
	      this.parseVar(init$1, true, kind)
	      this.finishNode(init$1, "VariableDeclaration")
	      if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) && init$1.declarations.length === 1 &&
	          !(kind !== "var" && init$1.declarations[0].init))
	        return this.parseForIn(node, init$1)
	      return this.parseFor(node, init$1)
	    }
	    var refDestructuringErrors = new DestructuringErrors
	    var init = this.parseExpression(true, refDestructuringErrors)
	    if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
	      this.checkPatternErrors(refDestructuringErrors, true)
	      this.toAssignable(init)
	      this.checkLVal(init)
	      return this.parseForIn(node, init)
	    } else {
	      this.checkExpressionErrors(refDestructuringErrors, true)
	    }
	    return this.parseFor(node, init)
	  }
	
	  pp$1.parseFunctionStatement = function(node) {
	    this.next()
	    return this.parseFunction(node, true)
	  }
	
	  pp$1.parseIfStatement = function(node) {
	    this.next()
	    node.test = this.parseParenExpression()
	    node.consequent = this.parseStatement(false)
	    node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null
	    return this.finishNode(node, "IfStatement")
	  }
	
	  pp$1.parseReturnStatement = function(node) {
	    if (!this.inFunction && !this.options.allowReturnOutsideFunction)
	      this.raise(this.start, "'return' outside of function")
	    this.next()
	
	    // In `return` (and `break`/`continue`), the keywords with
	    // optional arguments, we eagerly look for a semicolon or the
	    // possibility to insert one.
	
	    if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null
	    else { node.argument = this.parseExpression(); this.semicolon() }
	    return this.finishNode(node, "ReturnStatement")
	  }
	
	  pp$1.parseSwitchStatement = function(node) {
	    var this$1 = this;
	
	    this.next()
	    node.discriminant = this.parseParenExpression()
	    node.cases = []
	    this.expect(tt.braceL)
	    this.labels.push(switchLabel)
	
	    // Statements under must be grouped (by label) in SwitchCase
	    // nodes. `cur` is used to keep the node that we are currently
	    // adding statements to.
	
	    for (var cur, sawDefault = false; this.type != tt.braceR;) {
	      if (this$1.type === tt._case || this$1.type === tt._default) {
	        var isCase = this$1.type === tt._case
	        if (cur) this$1.finishNode(cur, "SwitchCase")
	        node.cases.push(cur = this$1.startNode())
	        cur.consequent = []
	        this$1.next()
	        if (isCase) {
	          cur.test = this$1.parseExpression()
	        } else {
	          if (sawDefault) this$1.raiseRecoverable(this$1.lastTokStart, "Multiple default clauses")
	          sawDefault = true
	          cur.test = null
	        }
	        this$1.expect(tt.colon)
	      } else {
	        if (!cur) this$1.unexpected()
	        cur.consequent.push(this$1.parseStatement(true))
	      }
	    }
	    if (cur) this.finishNode(cur, "SwitchCase")
	    this.next() // Closing brace
	    this.labels.pop()
	    return this.finishNode(node, "SwitchStatement")
	  }
	
	  pp$1.parseThrowStatement = function(node) {
	    this.next()
	    if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))
	      this.raise(this.lastTokEnd, "Illegal newline after throw")
	    node.argument = this.parseExpression()
	    this.semicolon()
	    return this.finishNode(node, "ThrowStatement")
	  }
	
	  // Reused empty array added for node fields that are always empty.
	
	  var empty = []
	
	  pp$1.parseTryStatement = function(node) {
	    this.next()
	    node.block = this.parseBlock()
	    node.handler = null
	    if (this.type === tt._catch) {
	      var clause = this.startNode()
	      this.next()
	      this.expect(tt.parenL)
	      clause.param = this.parseBindingAtom()
	      this.checkLVal(clause.param, true)
	      this.expect(tt.parenR)
	      clause.body = this.parseBlock()
	      node.handler = this.finishNode(clause, "CatchClause")
	    }
	    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null
	    if (!node.handler && !node.finalizer)
	      this.raise(node.start, "Missing catch or finally clause")
	    return this.finishNode(node, "TryStatement")
	  }
	
	  pp$1.parseVarStatement = function(node, kind) {
	    this.next()
	    this.parseVar(node, false, kind)
	    this.semicolon()
	    return this.finishNode(node, "VariableDeclaration")
	  }
	
	  pp$1.parseWhileStatement = function(node) {
	    this.next()
	    node.test = this.parseParenExpression()
	    this.labels.push(loopLabel)
	    node.body = this.parseStatement(false)
	    this.labels.pop()
	    return this.finishNode(node, "WhileStatement")
	  }
	
	  pp$1.parseWithStatement = function(node) {
	    if (this.strict) this.raise(this.start, "'with' in strict mode")
	    this.next()
	    node.object = this.parseParenExpression()
	    node.body = this.parseStatement(false)
	    return this.finishNode(node, "WithStatement")
	  }
	
	  pp$1.parseEmptyStatement = function(node) {
	    this.next()
	    return this.finishNode(node, "EmptyStatement")
	  }
	
	  pp$1.parseLabeledStatement = function(node, maybeName, expr) {
	    var this$1 = this;
	
	    for (var i = 0; i < this.labels.length; ++i)
	      if (this$1.labels[i].name === maybeName) this$1.raise(expr.start, "Label '" + maybeName + "' is already declared")
	    var kind = this.type.isLoop ? "loop" : this.type === tt._switch ? "switch" : null
	    for (var i$1 = this.labels.length - 1; i$1 >= 0; i$1--) {
	      var label = this$1.labels[i$1]
	      if (label.statementStart == node.start) {
	        label.statementStart = this$1.start
	        label.kind = kind
	      } else break
	    }
	    this.labels.push({name: maybeName, kind: kind, statementStart: this.start})
	    node.body = this.parseStatement(true)
	    this.labels.pop()
	    node.label = expr
	    return this.finishNode(node, "LabeledStatement")
	  }
	
	  pp$1.parseExpressionStatement = function(node, expr) {
	    node.expression = expr
	    this.semicolon()
	    return this.finishNode(node, "ExpressionStatement")
	  }
	
	  // Parse a semicolon-enclosed block of statements, handling `"use
	  // strict"` declarations when `allowStrict` is true (used for
	  // function bodies).
	
	  pp$1.parseBlock = function(allowStrict) {
	    var this$1 = this;
	
	    var node = this.startNode(), first = true, oldStrict
	    node.body = []
	    this.expect(tt.braceL)
	    while (!this.eat(tt.braceR)) {
	      var stmt = this$1.parseStatement(true)
	      node.body.push(stmt)
	      if (first && allowStrict && this$1.isUseStrict(stmt)) {
	        oldStrict = this$1.strict
	        this$1.setStrict(this$1.strict = true)
	      }
	      first = false
	    }
	    if (oldStrict === false) this.setStrict(false)
	    return this.finishNode(node, "BlockStatement")
	  }
	
	  // Parse a regular `for` loop. The disambiguation code in
	  // `parseStatement` will already have parsed the init statement or
	  // expression.
	
	  pp$1.parseFor = function(node, init) {
	    node.init = init
	    this.expect(tt.semi)
	    node.test = this.type === tt.semi ? null : this.parseExpression()
	    this.expect(tt.semi)
	    node.update = this.type === tt.parenR ? null : this.parseExpression()
	    this.expect(tt.parenR)
	    node.body = this.parseStatement(false)
	    this.labels.pop()
	    return this.finishNode(node, "ForStatement")
	  }
	
	  // Parse a `for`/`in` and `for`/`of` loop, which are almost
	  // same from parser's perspective.
	
	  pp$1.parseForIn = function(node, init) {
	    var type = this.type === tt._in ? "ForInStatement" : "ForOfStatement"
	    this.next()
	    node.left = init
	    node.right = this.parseExpression()
	    this.expect(tt.parenR)
	    node.body = this.parseStatement(false)
	    this.labels.pop()
	    return this.finishNode(node, type)
	  }
	
	  // Parse a list of variable declarations.
	
	  pp$1.parseVar = function(node, isFor, kind) {
	    var this$1 = this;
	
	    node.declarations = []
	    node.kind = kind
	    for (;;) {
	      var decl = this$1.startNode()
	      this$1.parseVarId(decl)
	      if (this$1.eat(tt.eq)) {
	        decl.init = this$1.parseMaybeAssign(isFor)
	      } else if (kind === "const" && !(this$1.type === tt._in || (this$1.options.ecmaVersion >= 6 && this$1.isContextual("of")))) {
	        this$1.unexpected()
	      } else if (decl.id.type != "Identifier" && !(isFor && (this$1.type === tt._in || this$1.isContextual("of")))) {
	        this$1.raise(this$1.lastTokEnd, "Complex binding patterns require an initialization value")
	      } else {
	        decl.init = null
	      }
	      node.declarations.push(this$1.finishNode(decl, "VariableDeclarator"))
	      if (!this$1.eat(tt.comma)) break
	    }
	    return node
	  }
	
	  pp$1.parseVarId = function(decl) {
	    decl.id = this.parseBindingAtom()
	    this.checkLVal(decl.id, true)
	  }
	
	  // Parse a function declaration or literal (depending on the
	  // `isStatement` parameter).
	
	  pp$1.parseFunction = function(node, isStatement, allowExpressionBody) {
	    this.initFunction(node)
	    if (this.options.ecmaVersion >= 6)
	      node.generator = this.eat(tt.star)
	    var oldInGen = this.inGenerator
	    this.inGenerator = node.generator
	    if (isStatement || this.type === tt.name)
	      node.id = this.parseIdent()
	    this.parseFunctionParams(node)
	    this.parseFunctionBody(node, allowExpressionBody)
	    this.inGenerator = oldInGen
	    return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression")
	  }
	
	  pp$1.parseFunctionParams = function(node) {
	    this.expect(tt.parenL)
	    node.params = this.parseBindingList(tt.parenR, false, false, true)
	  }
	
	  // Parse a class declaration or literal (depending on the
	  // `isStatement` parameter).
	
	  pp$1.parseClass = function(node, isStatement) {
	    var this$1 = this;
	
	    this.next()
	    this.parseClassId(node, isStatement)
	    this.parseClassSuper(node)
	    var classBody = this.startNode()
	    var hadConstructor = false
	    classBody.body = []
	    this.expect(tt.braceL)
	    while (!this.eat(tt.braceR)) {
	      if (this$1.eat(tt.semi)) continue
	      var method = this$1.startNode()
	      var isGenerator = this$1.eat(tt.star)
	      var isMaybeStatic = this$1.type === tt.name && this$1.value === "static"
	      this$1.parsePropertyName(method)
	      method.static = isMaybeStatic && this$1.type !== tt.parenL
	      if (method.static) {
	        if (isGenerator) this$1.unexpected()
	        isGenerator = this$1.eat(tt.star)
	        this$1.parsePropertyName(method)
	      }
	      method.kind = "method"
	      var isGetSet = false
	      if (!method.computed) {
	        var key = method.key;
	        if (!isGenerator && key.type === "Identifier" && this$1.type !== tt.parenL && (key.name === "get" || key.name === "set")) {
	          isGetSet = true
	          method.kind = key.name
	          key = this$1.parsePropertyName(method)
	        }
	        if (!method.static && (key.type === "Identifier" && key.name === "constructor" ||
	            key.type === "Literal" && key.value === "constructor")) {
	          if (hadConstructor) this$1.raise(key.start, "Duplicate constructor in the same class")
	          if (isGetSet) this$1.raise(key.start, "Constructor can't have get/set modifier")
	          if (isGenerator) this$1.raise(key.start, "Constructor can't be a generator")
	          method.kind = "constructor"
	          hadConstructor = true
	        }
	      }
	      this$1.parseClassMethod(classBody, method, isGenerator)
	      if (isGetSet) {
	        var paramCount = method.kind === "get" ? 0 : 1
	        if (method.value.params.length !== paramCount) {
	          var start = method.value.start
	          if (method.kind === "get")
	            this$1.raiseRecoverable(start, "getter should have no params")
	          else
	            this$1.raiseRecoverable(start, "setter should have exactly one param")
	        }
	        if (method.kind === "set" && method.value.params[0].type === "RestElement")
	          this$1.raise(method.value.params[0].start, "Setter cannot use rest params")
	      }
	    }
	    node.body = this.finishNode(classBody, "ClassBody")
	    return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression")
	  }
	
	  pp$1.parseClassMethod = function(classBody, method, isGenerator) {
	    method.value = this.parseMethod(isGenerator)
	    classBody.body.push(this.finishNode(method, "MethodDefinition"))
	  }
	
	  pp$1.parseClassId = function(node, isStatement) {
	    node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null
	  }
	
	  pp$1.parseClassSuper = function(node) {
	    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null
	  }
	
	  // Parses module export declaration.
	
	  pp$1.parseExport = function(node) {
	    var this$1 = this;
	
	    this.next()
	    // export * from '...'
	    if (this.eat(tt.star)) {
	      this.expectContextual("from")
	      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
	      this.semicolon()
	      return this.finishNode(node, "ExportAllDeclaration")
	    }
	    if (this.eat(tt._default)) { // export default ...
	      var parens = this.type == tt.parenL
	      var expr = this.parseMaybeAssign()
	      var needsSemi = true
	      if (!parens && (expr.type == "FunctionExpression" ||
	                      expr.type == "ClassExpression")) {
	        needsSemi = false
	        if (expr.id) {
	          expr.type = expr.type == "FunctionExpression"
	            ? "FunctionDeclaration"
	            : "ClassDeclaration"
	        }
	      }
	      node.declaration = expr
	      if (needsSemi) this.semicolon()
	      return this.finishNode(node, "ExportDefaultDeclaration")
	    }
	    // export var|const|let|function|class ...
	    if (this.shouldParseExportStatement()) {
	      node.declaration = this.parseStatement(true)
	      node.specifiers = []
	      node.source = null
	    } else { // export { x, y as z } [from '...']
	      node.declaration = null
	      node.specifiers = this.parseExportSpecifiers()
	      if (this.eatContextual("from")) {
	        node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
	      } else {
	        // check for keywords used as local names
	        for (var i = 0; i < node.specifiers.length; i++) {
	          if (this$1.keywords.test(node.specifiers[i].local.name) || this$1.reservedWords.test(node.specifiers[i].local.name)) {
	            this$1.unexpected(node.specifiers[i].local.start)
	          }
	        }
	
	        node.source = null
	      }
	      this.semicolon()
	    }
	    return this.finishNode(node, "ExportNamedDeclaration")
	  }
	
	  pp$1.shouldParseExportStatement = function() {
	    return this.type.keyword || this.isLet()
	  }
	
	  // Parses a comma-separated list of module exports.
	
	  pp$1.parseExportSpecifiers = function() {
	    var this$1 = this;
	
	    var nodes = [], first = true
	    // export { x, y as z } [from '...']
	    this.expect(tt.braceL)
	    while (!this.eat(tt.braceR)) {
	      if (!first) {
	        this$1.expect(tt.comma)
	        if (this$1.afterTrailingComma(tt.braceR)) break
	      } else first = false
	
	      var node = this$1.startNode()
	      node.local = this$1.parseIdent(this$1.type === tt._default)
	      node.exported = this$1.eatContextual("as") ? this$1.parseIdent(true) : node.local
	      nodes.push(this$1.finishNode(node, "ExportSpecifier"))
	    }
	    return nodes
	  }
	
	  // Parses import declaration.
	
	  pp$1.parseImport = function(node) {
	    this.next()
	    // import '...'
	    if (this.type === tt.string) {
	      node.specifiers = empty
	      node.source = this.parseExprAtom()
	    } else {
	      node.specifiers = this.parseImportSpecifiers()
	      this.expectContextual("from")
	      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()
	    }
	    this.semicolon()
	    return this.finishNode(node, "ImportDeclaration")
	  }
	
	  // Parses a comma-separated list of module imports.
	
	  pp$1.parseImportSpecifiers = function() {
	    var this$1 = this;
	
	    var nodes = [], first = true
	    if (this.type === tt.name) {
	      // import defaultObj, { x, y as z } from '...'
	      var node = this.startNode()
	      node.local = this.parseIdent()
	      this.checkLVal(node.local, true)
	      nodes.push(this.finishNode(node, "ImportDefaultSpecifier"))
	      if (!this.eat(tt.comma)) return nodes
	    }
	    if (this.type === tt.star) {
	      var node$1 = this.startNode()
	      this.next()
	      this.expectContextual("as")
	      node$1.local = this.parseIdent()
	      this.checkLVal(node$1.local, true)
	      nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"))
	      return nodes
	    }
	    this.expect(tt.braceL)
	    while (!this.eat(tt.braceR)) {
	      if (!first) {
	        this$1.expect(tt.comma)
	        if (this$1.afterTrailingComma(tt.braceR)) break
	      } else first = false
	
	      var node$2 = this$1.startNode()
	      node$2.imported = this$1.parseIdent(true)
	      if (this$1.eatContextual("as")) {
	        node$2.local = this$1.parseIdent()
	      } else {
	        node$2.local = node$2.imported
	        if (this$1.isKeyword(node$2.local.name)) this$1.unexpected(node$2.local.start)
	        if (this$1.reservedWordsStrict.test(node$2.local.name)) this$1.raise(node$2.local.start, "The keyword '" + node$2.local.name + "' is reserved")
	      }
	      this$1.checkLVal(node$2.local, true)
	      nodes.push(this$1.finishNode(node$2, "ImportSpecifier"))
	    }
	    return nodes
	  }
	
	  var pp$2 = Parser.prototype
	
	  // Convert existing expression atom to assignable pattern
	  // if possible.
	
	  pp$2.toAssignable = function(node, isBinding) {
	    var this$1 = this;
	
	    if (this.options.ecmaVersion >= 6 && node) {
	      switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	        break
	
	      case "ObjectExpression":
	        node.type = "ObjectPattern"
	        for (var i = 0; i < node.properties.length; i++) {
	          var prop = node.properties[i]
	          if (prop.kind !== "init") this$1.raise(prop.key.start, "Object pattern can't contain getter or setter")
	          this$1.toAssignable(prop.value, isBinding)
	        }
	        break
	
	      case "ArrayExpression":
	        node.type = "ArrayPattern"
	        this.toAssignableList(node.elements, isBinding)
	        break
	
	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern"
	          delete node.operator
	          // falls through to AssignmentPattern
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.")
	          break
	        }
	
	      case "AssignmentPattern":
	        if (node.right.type === "YieldExpression")
	          this.raise(node.right.start, "Yield expression cannot be a default value")
	        break
	
	      case "ParenthesizedExpression":
	        node.expression = this.toAssignable(node.expression, isBinding)
	        break
	
	      case "MemberExpression":
	        if (!isBinding) break
	
	      default:
	        this.raise(node.start, "Assigning to rvalue")
	      }
	    }
	    return node
	  }
	
	  // Convert list of expression atoms to binding list.
	
	  pp$2.toAssignableList = function(exprList, isBinding) {
	    var this$1 = this;
	
	    var end = exprList.length
	    if (end) {
	      var last = exprList[end - 1]
	      if (last && last.type == "RestElement") {
	        --end
	      } else if (last && last.type == "SpreadElement") {
	        last.type = "RestElement"
	        var arg = last.argument
	        this.toAssignable(arg, isBinding)
	        if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern")
	          this.unexpected(arg.start)
	        --end
	      }
	
	      if (isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier")
	        this.unexpected(last.argument.start)
	    }
	    for (var i = 0; i < end; i++) {
	      var elt = exprList[i]
	      if (elt) this$1.toAssignable(elt, isBinding)
	    }
	    return exprList
	  }
	
	  // Parses spread element.
	
	  pp$2.parseSpread = function(refDestructuringErrors) {
	    var node = this.startNode()
	    this.next()
	    node.argument = this.parseMaybeAssign(false, refDestructuringErrors)
	    return this.finishNode(node, "SpreadElement")
	  }
	
	  pp$2.parseRest = function(allowNonIdent) {
	    var node = this.startNode()
	    this.next()
	
	    // RestElement inside of a function parameter must be an identifier
	    if (allowNonIdent) node.argument = this.type === tt.name ? this.parseIdent() : this.unexpected()
	    else node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()
	
	    return this.finishNode(node, "RestElement")
	  }
	
	  // Parses lvalue (assignable) atom.
	
	  pp$2.parseBindingAtom = function() {
	    if (this.options.ecmaVersion < 6) return this.parseIdent()
	    switch (this.type) {
	    case tt.name:
	      return this.parseIdent()
	
	    case tt.bracketL:
	      var node = this.startNode()
	      this.next()
	      node.elements = this.parseBindingList(tt.bracketR, true, true)
	      return this.finishNode(node, "ArrayPattern")
	
	    case tt.braceL:
	      return this.parseObj(true)
	
	    default:
	      this.unexpected()
	    }
	  }
	
	  pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma, allowNonIdent) {
	    var this$1 = this;
	
	    var elts = [], first = true
	    while (!this.eat(close)) {
	      if (first) first = false
	      else this$1.expect(tt.comma)
	      if (allowEmpty && this$1.type === tt.comma) {
	        elts.push(null)
	      } else if (allowTrailingComma && this$1.afterTrailingComma(close)) {
	        break
	      } else if (this$1.type === tt.ellipsis) {
	        var rest = this$1.parseRest(allowNonIdent)
	        this$1.parseBindingListItem(rest)
	        elts.push(rest)
	        if (this$1.type === tt.comma) this$1.raise(this$1.start, "Comma is not permitted after the rest element")
	        this$1.expect(close)
	        break
	      } else {
	        var elem = this$1.parseMaybeDefault(this$1.start, this$1.startLoc)
	        this$1.parseBindingListItem(elem)
	        elts.push(elem)
	      }
	    }
	    return elts
	  }
	
	  pp$2.parseBindingListItem = function(param) {
	    return param
	  }
	
	  // Parses assignment pattern around given atom if possible.
	
	  pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
	    left = left || this.parseBindingAtom()
	    if (this.options.ecmaVersion < 6 || !this.eat(tt.eq)) return left
	    var node = this.startNodeAt(startPos, startLoc)
	    node.left = left
	    node.right = this.parseMaybeAssign()
	    return this.finishNode(node, "AssignmentPattern")
	  }
	
	  // Verify that a node is an lval — something that can be assigned
	  // to.
	
	  pp$2.checkLVal = function(expr, isBinding, checkClashes) {
	    var this$1 = this;
	
	    switch (expr.type) {
	    case "Identifier":
	      if (this.strict && this.reservedWordsStrictBind.test(expr.name))
	        this.raiseRecoverable(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode")
	      if (checkClashes) {
	        if (has(checkClashes, expr.name))
	          this.raiseRecoverable(expr.start, "Argument name clash")
	        checkClashes[expr.name] = true
	      }
	      break
	
	    case "MemberExpression":
	      if (isBinding) this.raiseRecoverable(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression")
	      break
	
	    case "ObjectPattern":
	      for (var i = 0; i < expr.properties.length; i++)
	        this$1.checkLVal(expr.properties[i].value, isBinding, checkClashes)
	      break
	
	    case "ArrayPattern":
	      for (var i$1 = 0; i$1 < expr.elements.length; i$1++) {
	        var elem = expr.elements[i$1]
	        if (elem) this$1.checkLVal(elem, isBinding, checkClashes)
	      }
	      break
	
	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes)
	      break
	
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes)
	      break
	
	    case "ParenthesizedExpression":
	      this.checkLVal(expr.expression, isBinding, checkClashes)
	      break
	
	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue")
	    }
	  }
	
	  var pp$3 = Parser.prototype
	
	  // Check if property name clashes with already added.
	  // Object/class getters and setters are not allowed to clash —
	  // either with each other or with an init property — and in
	  // strict mode, init properties are also not allowed to be repeated.
	
	  pp$3.checkPropClash = function(prop, propHash) {
	    if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))
	      return
	    var key = prop.key;
	    var name
	    switch (key.type) {
	    case "Identifier": name = key.name; break
	    case "Literal": name = String(key.value); break
	    default: return
	    }
	    var kind = prop.kind;
	    if (this.options.ecmaVersion >= 6) {
	      if (name === "__proto__" && kind === "init") {
	        if (propHash.proto) this.raiseRecoverable(key.start, "Redefinition of __proto__ property")
	        propHash.proto = true
	      }
	      return
	    }
	    name = "$" + name
	    var other = propHash[name]
	    if (other) {
	      var isGetSet = kind !== "init"
	      if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))
	        this.raiseRecoverable(key.start, "Redefinition of property")
	    } else {
	      other = propHash[name] = {
	        init: false,
	        get: false,
	        set: false
	      }
	    }
	    other[kind] = true
	  }
	
	  // ### Expression parsing
	
	  // These nest, from the most general expression type at the top to
	  // 'atomic', nondivisible expression types at the bottom. Most of
	  // the functions will simply let the function(s) below them parse,
	  // and, *if* the syntactic construct they handle is present, wrap
	  // the AST node that the inner parser gave them in another node.
	
	  // Parse a full expression. The optional arguments are used to
	  // forbid the `in` operator (in for loops initalization expressions)
	  // and provide reference for storing '=' operator inside shorthand
	  // property assignment in contexts where both object expression
	  // and object pattern might appear (so it's possible to raise
	  // delayed syntax error at correct position).
	
	  pp$3.parseExpression = function(noIn, refDestructuringErrors) {
	    var this$1 = this;
	
	    var startPos = this.start, startLoc = this.startLoc
	    var expr = this.parseMaybeAssign(noIn, refDestructuringErrors)
	    if (this.type === tt.comma) {
	      var node = this.startNodeAt(startPos, startLoc)
	      node.expressions = [expr]
	      while (this.eat(tt.comma)) node.expressions.push(this$1.parseMaybeAssign(noIn, refDestructuringErrors))
	      return this.finishNode(node, "SequenceExpression")
	    }
	    return expr
	  }
	
	  // Parse an assignment expression. This includes applications of
	  // operators like `+=`.
	
	  pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
	    if (this.inGenerator && this.isContextual("yield")) return this.parseYield()
	
	    var ownDestructuringErrors = false
	    if (!refDestructuringErrors) {
	      refDestructuringErrors = new DestructuringErrors
	      ownDestructuringErrors = true
	    }
	    var startPos = this.start, startLoc = this.startLoc
	    if (this.type == tt.parenL || this.type == tt.name)
	      this.potentialArrowAt = this.start
	    var left = this.parseMaybeConditional(noIn, refDestructuringErrors)
	    if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc)
	    if (this.type.isAssign) {
	      this.checkPatternErrors(refDestructuringErrors, true)
	      if (!ownDestructuringErrors) DestructuringErrors.call(refDestructuringErrors)
	      var node = this.startNodeAt(startPos, startLoc)
	      node.operator = this.value
	      node.left = this.type === tt.eq ? this.toAssignable(left) : left
	      refDestructuringErrors.shorthandAssign = 0 // reset because shorthand default was used correctly
	      this.checkLVal(left)
	      this.next()
	      node.right = this.parseMaybeAssign(noIn)
	      return this.finishNode(node, "AssignmentExpression")
	    } else {
	      if (ownDestructuringErrors) this.checkExpressionErrors(refDestructuringErrors, true)
	    }
	    return left
	  }
	
	  // Parse a ternary conditional (`?:`) operator.
	
	  pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
	    var startPos = this.start, startLoc = this.startLoc
	    var expr = this.parseExprOps(noIn, refDestructuringErrors)
	    if (this.checkExpressionErrors(refDestructuringErrors)) return expr
	    if (this.eat(tt.question)) {
	      var node = this.startNodeAt(startPos, startLoc)
	      node.test = expr
	      node.consequent = this.parseMaybeAssign()
	      this.expect(tt.colon)
	      node.alternate = this.parseMaybeAssign(noIn)
	      return this.finishNode(node, "ConditionalExpression")
	    }
	    return expr
	  }
	
	  // Start the precedence parser.
	
	  pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
	    var startPos = this.start, startLoc = this.startLoc
	    var expr = this.parseMaybeUnary(refDestructuringErrors, false)
	    if (this.checkExpressionErrors(refDestructuringErrors)) return expr
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn)
	  }
	
	  // Parse binary operators with the operator precedence parsing
	  // algorithm. `left` is the left-hand side of the operator.
	  // `minPrec` provides context that allows the function to stop and
	  // defer further parser to one of its callers when it encounters an
	  // operator that has a lower precedence than the set it is parsing.
	
	  pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
	    var prec = this.type.binop
	    if (prec != null && (!noIn || this.type !== tt._in)) {
	      if (prec > minPrec) {
	        var logical = this.type === tt.logicalOR || this.type === tt.logicalAND
	        var op = this.value
	        this.next()
	        var startPos = this.start, startLoc = this.startLoc
	        var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn)
	        var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical)
	        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn)
	      }
	    }
	    return left
	  }
	
	  pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
	    var node = this.startNodeAt(startPos, startLoc)
	    node.left = left
	    node.operator = op
	    node.right = right
	    return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression")
	  }
	
	  // Parse unary operators, both prefix and postfix.
	
	  pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
	    var this$1 = this;
	
	    var startPos = this.start, startLoc = this.startLoc, expr
	    if (this.type.prefix) {
	      var node = this.startNode(), update = this.type === tt.incDec
	      node.operator = this.value
	      node.prefix = true
	      this.next()
	      node.argument = this.parseMaybeUnary(null, true)
	      this.checkExpressionErrors(refDestructuringErrors, true)
	      if (update) this.checkLVal(node.argument)
	      else if (this.strict && node.operator === "delete" &&
	               node.argument.type === "Identifier")
	        this.raiseRecoverable(node.start, "Deleting local variable in strict mode")
	      else sawUnary = true
	      expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression")
	    } else {
	      expr = this.parseExprSubscripts(refDestructuringErrors)
	      if (this.checkExpressionErrors(refDestructuringErrors)) return expr
	      while (this.type.postfix && !this.canInsertSemicolon()) {
	        var node$1 = this$1.startNodeAt(startPos, startLoc)
	        node$1.operator = this$1.value
	        node$1.prefix = false
	        node$1.argument = expr
	        this$1.checkLVal(expr)
	        this$1.next()
	        expr = this$1.finishNode(node$1, "UpdateExpression")
	      }
	    }
	
	    if (!sawUnary && this.eat(tt.starstar))
	      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false)
	    else
	      return expr
	  }
	
	  // Parse call, dot, and `[]`-subscript expressions.
	
	  pp$3.parseExprSubscripts = function(refDestructuringErrors) {
	    var startPos = this.start, startLoc = this.startLoc
	    var expr = this.parseExprAtom(refDestructuringErrors)
	    var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")"
	    if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr
	    return this.parseSubscripts(expr, startPos, startLoc)
	  }
	
	  pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
	    var this$1 = this;
	
	    for (;;) {
	      if (this$1.eat(tt.dot)) {
	        var node = this$1.startNodeAt(startPos, startLoc)
	        node.object = base
	        node.property = this$1.parseIdent(true)
	        node.computed = false
	        base = this$1.finishNode(node, "MemberExpression")
	      } else if (this$1.eat(tt.bracketL)) {
	        var node$1 = this$1.startNodeAt(startPos, startLoc)
	        node$1.object = base
	        node$1.property = this$1.parseExpression()
	        node$1.computed = true
	        this$1.expect(tt.bracketR)
	        base = this$1.finishNode(node$1, "MemberExpression")
	      } else if (!noCalls && this$1.eat(tt.parenL)) {
	        var node$2 = this$1.startNodeAt(startPos, startLoc)
	        node$2.callee = base
	        node$2.arguments = this$1.parseExprList(tt.parenR, false)
	        base = this$1.finishNode(node$2, "CallExpression")
	      } else if (this$1.type === tt.backQuote) {
	        var node$3 = this$1.startNodeAt(startPos, startLoc)
	        node$3.tag = base
	        node$3.quasi = this$1.parseTemplate()
	        base = this$1.finishNode(node$3, "TaggedTemplateExpression")
	      } else {
	        return base
	      }
	    }
	  }
	
	  // Parse an atomic expression — either a single token that is an
	  // expression, an expression started by a keyword like `function` or
	  // `new`, or an expression wrapped in punctuation like `()`, `[]`,
	  // or `{}`.
	
	  pp$3.parseExprAtom = function(refDestructuringErrors) {
	    var node, canBeArrow = this.potentialArrowAt == this.start
	    switch (this.type) {
	    case tt._super:
	      if (!this.inFunction)
	        this.raise(this.start, "'super' outside of function or class")
	
	    case tt._this:
	      var type = this.type === tt._this ? "ThisExpression" : "Super"
	      node = this.startNode()
	      this.next()
	      return this.finishNode(node, type)
	
	    case tt.name:
	      var startPos = this.start, startLoc = this.startLoc
	      var id = this.parseIdent(this.type !== tt.name)
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow))
	        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id])
	      return id
	
	    case tt.regexp:
	      var value = this.value
	      node = this.parseLiteral(value.value)
	      node.regex = {pattern: value.pattern, flags: value.flags}
	      return node
	
	    case tt.num: case tt.string:
	      return this.parseLiteral(this.value)
	
	    case tt._null: case tt._true: case tt._false:
	      node = this.startNode()
	      node.value = this.type === tt._null ? null : this.type === tt._true
	      node.raw = this.type.keyword
	      this.next()
	      return this.finishNode(node, "Literal")
	
	    case tt.parenL:
	      return this.parseParenAndDistinguishExpression(canBeArrow)
	
	    case tt.bracketL:
	      node = this.startNode()
	      this.next()
	      node.elements = this.parseExprList(tt.bracketR, true, true, refDestructuringErrors)
	      return this.finishNode(node, "ArrayExpression")
	
	    case tt.braceL:
	      return this.parseObj(false, refDestructuringErrors)
	
	    case tt._function:
	      node = this.startNode()
	      this.next()
	      return this.parseFunction(node, false)
	
	    case tt._class:
	      return this.parseClass(this.startNode(), false)
	
	    case tt._new:
	      return this.parseNew()
	
	    case tt.backQuote:
	      return this.parseTemplate()
	
	    default:
	      this.unexpected()
	    }
	  }
	
	  pp$3.parseLiteral = function(value) {
	    var node = this.startNode()
	    node.value = value
	    node.raw = this.input.slice(this.start, this.end)
	    this.next()
	    return this.finishNode(node, "Literal")
	  }
	
	  pp$3.parseParenExpression = function() {
	    this.expect(tt.parenL)
	    var val = this.parseExpression()
	    this.expect(tt.parenR)
	    return val
	  }
	
	  pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
	    var this$1 = this;
	
	    var startPos = this.start, startLoc = this.startLoc, val
	    if (this.options.ecmaVersion >= 6) {
	      this.next()
	
	      var innerStartPos = this.start, innerStartLoc = this.startLoc
	      var exprList = [], first = true
	      var refDestructuringErrors = new DestructuringErrors, spreadStart, innerParenStart
	      while (this.type !== tt.parenR) {
	        first ? first = false : this$1.expect(tt.comma)
	        if (this$1.type === tt.ellipsis) {
	          spreadStart = this$1.start
	          exprList.push(this$1.parseParenItem(this$1.parseRest()))
	          break
	        } else {
	          if (this$1.type === tt.parenL && !innerParenStart) {
	            innerParenStart = this$1.start
	          }
	          exprList.push(this$1.parseMaybeAssign(false, refDestructuringErrors, this$1.parseParenItem))
	        }
	      }
	      var innerEndPos = this.start, innerEndLoc = this.startLoc
	      this.expect(tt.parenR)
	
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(tt.arrow)) {
	        this.checkPatternErrors(refDestructuringErrors, true)
	        if (innerParenStart) this.unexpected(innerParenStart)
	        return this.parseParenArrowList(startPos, startLoc, exprList)
	      }
	
	      if (!exprList.length) this.unexpected(this.lastTokStart)
	      if (spreadStart) this.unexpected(spreadStart)
	      this.checkExpressionErrors(refDestructuringErrors, true)
	
	      if (exprList.length > 1) {
	        val = this.startNodeAt(innerStartPos, innerStartLoc)
	        val.expressions = exprList
	        this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)
	      } else {
	        val = exprList[0]
	      }
	    } else {
	      val = this.parseParenExpression()
	    }
	
	    if (this.options.preserveParens) {
	      var par = this.startNodeAt(startPos, startLoc)
	      par.expression = val
	      return this.finishNode(par, "ParenthesizedExpression")
	    } else {
	      return val
	    }
	  }
	
	  pp$3.parseParenItem = function(item) {
	    return item
	  }
	
	  pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList)
	  }
	
	  // New's precedence is slightly tricky. It must allow its argument to
	  // be a `[]` or dot subscript expression, but not a call — at least,
	  // not without wrapping it in parentheses. Thus, it uses the noCalls
	  // argument to parseSubscripts to prevent it from consuming the
	  // argument list.
	
	  var empty$1 = []
	
	  pp$3.parseNew = function() {
	    var node = this.startNode()
	    var meta = this.parseIdent(true)
	    if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {
	      node.meta = meta
	      node.property = this.parseIdent(true)
	      if (node.property.name !== "target")
	        this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target")
	      if (!this.inFunction)
	        this.raiseRecoverable(node.start, "new.target can only be used in functions")
	      return this.finishNode(node, "MetaProperty")
	    }
	    var startPos = this.start, startLoc = this.startLoc
	    node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true)
	    if (this.eat(tt.parenL)) node.arguments = this.parseExprList(tt.parenR, false)
	    else node.arguments = empty$1
	    return this.finishNode(node, "NewExpression")
	  }
	
	  // Parse template expression.
	
	  pp$3.parseTemplateElement = function() {
	    var elem = this.startNode()
	    elem.value = {
	      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
	      cooked: this.value
	    }
	    this.next()
	    elem.tail = this.type === tt.backQuote
	    return this.finishNode(elem, "TemplateElement")
	  }
	
	  pp$3.parseTemplate = function() {
	    var this$1 = this;
	
	    var node = this.startNode()
	    this.next()
	    node.expressions = []
	    var curElt = this.parseTemplateElement()
	    node.quasis = [curElt]
	    while (!curElt.tail) {
	      this$1.expect(tt.dollarBraceL)
	      node.expressions.push(this$1.parseExpression())
	      this$1.expect(tt.braceR)
	      node.quasis.push(curElt = this$1.parseTemplateElement())
	    }
	    this.next()
	    return this.finishNode(node, "TemplateLiteral")
	  }
	
	  // Parse an object literal or binding pattern.
	
	  pp$3.parseObj = function(isPattern, refDestructuringErrors) {
	    var this$1 = this;
	
	    var node = this.startNode(), first = true, propHash = {}
	    node.properties = []
	    this.next()
	    while (!this.eat(tt.braceR)) {
	      if (!first) {
	        this$1.expect(tt.comma)
	        if (this$1.afterTrailingComma(tt.braceR)) break
	      } else first = false
	
	      var prop = this$1.startNode(), isGenerator, startPos, startLoc
	      if (this$1.options.ecmaVersion >= 6) {
	        prop.method = false
	        prop.shorthand = false
	        if (isPattern || refDestructuringErrors) {
	          startPos = this$1.start
	          startLoc = this$1.startLoc
	        }
	        if (!isPattern)
	          isGenerator = this$1.eat(tt.star)
	      }
	      this$1.parsePropertyName(prop)
	      this$1.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors)
	      this$1.checkPropClash(prop, propHash)
	      node.properties.push(this$1.finishNode(prop, "Property"))
	    }
	    return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression")
	  }
	
	  pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {
	    if (this.eat(tt.colon)) {
	      prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors)
	      prop.kind = "init"
	    } else if (this.options.ecmaVersion >= 6 && this.type === tt.parenL) {
	      if (isPattern) this.unexpected()
	      prop.kind = "init"
	      prop.method = true
	      prop.value = this.parseMethod(isGenerator)
	    } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
	               (prop.key.name === "get" || prop.key.name === "set") &&
	               (this.type != tt.comma && this.type != tt.braceR)) {
	      if (isGenerator || isPattern) this.unexpected()
	      prop.kind = prop.key.name
	      this.parsePropertyName(prop)
	      prop.value = this.parseMethod(false)
	      var paramCount = prop.kind === "get" ? 0 : 1
	      if (prop.value.params.length !== paramCount) {
	        var start = prop.value.start
	        if (prop.kind === "get")
	          this.raiseRecoverable(start, "getter should have no params")
	        else
	          this.raiseRecoverable(start, "setter should have exactly one param")
	      }
	      if (prop.kind === "set" && prop.value.params[0].type === "RestElement")
	        this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params")
	    } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
	      if (this.keywords.test(prop.key.name) ||
	          (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name) ||
	          (this.inGenerator && prop.key.name == "yield"))
	        this.raiseRecoverable(prop.key.start, "'" + prop.key.name + "' can not be used as shorthand property")
	      prop.kind = "init"
	      if (isPattern) {
	        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)
	      } else if (this.type === tt.eq && refDestructuringErrors) {
	        if (!refDestructuringErrors.shorthandAssign)
	          refDestructuringErrors.shorthandAssign = this.start
	        prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key)
	      } else {
	        prop.value = prop.key
	      }
	      prop.shorthand = true
	    } else this.unexpected()
	  }
	
	  pp$3.parsePropertyName = function(prop) {
	    if (this.options.ecmaVersion >= 6) {
	      if (this.eat(tt.bracketL)) {
	        prop.computed = true
	        prop.key = this.parseMaybeAssign()
	        this.expect(tt.bracketR)
	        return prop.key
	      } else {
	        prop.computed = false
	      }
	    }
	    return prop.key = this.type === tt.num || this.type === tt.string ? this.parseExprAtom() : this.parseIdent(true)
	  }
	
	  // Initialize empty function node.
	
	  pp$3.initFunction = function(node) {
	    node.id = null
	    if (this.options.ecmaVersion >= 6) {
	      node.generator = false
	      node.expression = false
	    }
	  }
	
	  // Parse object or class method.
	
	  pp$3.parseMethod = function(isGenerator) {
	    var node = this.startNode(), oldInGen = this.inGenerator
	    this.inGenerator = isGenerator
	    this.initFunction(node)
	    this.expect(tt.parenL)
	    node.params = this.parseBindingList(tt.parenR, false, false)
	    if (this.options.ecmaVersion >= 6)
	      node.generator = isGenerator
	    this.parseFunctionBody(node, false)
	    this.inGenerator = oldInGen
	    return this.finishNode(node, "FunctionExpression")
	  }
	
	  // Parse arrow function expression with given parameters.
	
	  pp$3.parseArrowExpression = function(node, params) {
	    var oldInGen = this.inGenerator
	    this.inGenerator = false
	    this.initFunction(node)
	    node.params = this.toAssignableList(params, true)
	    this.parseFunctionBody(node, true)
	    this.inGenerator = oldInGen
	    return this.finishNode(node, "ArrowFunctionExpression")
	  }
	
	  // Parse function body and check parameters.
	
	  pp$3.parseFunctionBody = function(node, isArrowFunction) {
	    var isExpression = isArrowFunction && this.type !== tt.braceL
	
	    if (isExpression) {
	      node.body = this.parseMaybeAssign()
	      node.expression = true
	    } else {
	      // Start a new scope with regard to labels and the `inFunction`
	      // flag (restore them to their old value afterwards).
	      var oldInFunc = this.inFunction, oldLabels = this.labels
	      this.inFunction = true; this.labels = []
	      node.body = this.parseBlock(true)
	      node.expression = false
	      this.inFunction = oldInFunc; this.labels = oldLabels
	    }
	
	    // If this is a strict mode function, verify that argument names
	    // are not repeated, and it does not try to bind the words `eval`
	    // or `arguments`.
	    var useStrict = (!isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) ? node.body.body[0] : null;
	    if (this.strict || useStrict) {
	      var oldStrict = this.strict
	      this.strict = true
	      if (node.id)
	        this.checkLVal(node.id, true)
	      this.checkParams(node, useStrict)
	      this.strict = oldStrict
	    } else if (isArrowFunction) {
	      this.checkParams(node, useStrict)
	    }
	  }
	
	  // Checks function params for various disallowed patterns such as using "eval"
	  // or "arguments" and duplicate parameters.
	
	  pp$3.checkParams = function(node, useStrict) {
	      var this$1 = this;
	
	      var nameHash = {}
	      for (var i = 0; i < node.params.length; i++) {
	        if (useStrict && this$1.options.ecmaVersion >= 7 && node.params[i].type !== "Identifier")
	          this$1.raiseRecoverable(useStrict.start, "Illegal 'use strict' directive in function with non-simple parameter list");
	        this$1.checkLVal(node.params[i], true, nameHash)
	      }
	  }
	
	  // Parses a comma-separated list of expressions, and returns them as
	  // an array. `close` is the token type that ends the list, and
	  // `allowEmpty` can be turned on to allow subsequent commas with
	  // nothing in between them to be parsed as `null` (which is needed
	  // for array literals).
	
	  pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
	    var this$1 = this;
	
	    var elts = [], first = true
	    while (!this.eat(close)) {
	      if (!first) {
	        this$1.expect(tt.comma)
	        if (allowTrailingComma && this$1.afterTrailingComma(close)) break
	      } else first = false
	
	      var elt
	      if (allowEmpty && this$1.type === tt.comma)
	        elt = null
	      else if (this$1.type === tt.ellipsis) {
	        elt = this$1.parseSpread(refDestructuringErrors)
	        if (this$1.type === tt.comma && refDestructuringErrors && !refDestructuringErrors.trailingComma) {
	          refDestructuringErrors.trailingComma = this$1.lastTokStart
	        }
	      } else
	        elt = this$1.parseMaybeAssign(false, refDestructuringErrors)
	      elts.push(elt)
	    }
	    return elts
	  }
	
	  // Parse the next token as an identifier. If `liberal` is true (used
	  // when parsing properties), it will also convert keywords into
	  // identifiers.
	
	  pp$3.parseIdent = function(liberal) {
	    var node = this.startNode()
	    if (liberal && this.options.allowReserved == "never") liberal = false
	    if (this.type === tt.name) {
	      if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) &&
	          (this.options.ecmaVersion >= 6 ||
	           this.input.slice(this.start, this.end).indexOf("\\") == -1))
	        this.raiseRecoverable(this.start, "The keyword '" + this.value + "' is reserved")
	      if (!liberal && this.inGenerator && this.value === "yield")
	        this.raiseRecoverable(this.start, "Can not use 'yield' as identifier inside a generator")
	      node.name = this.value
	    } else if (liberal && this.type.keyword) {
	      node.name = this.type.keyword
	    } else {
	      this.unexpected()
	    }
	    this.next()
	    return this.finishNode(node, "Identifier")
	  }
	
	  // Parses yield expression inside generator.
	
	  pp$3.parseYield = function() {
	    var node = this.startNode()
	    this.next()
	    if (this.type == tt.semi || this.canInsertSemicolon() || (this.type != tt.star && !this.type.startsExpr)) {
	      node.delegate = false
	      node.argument = null
	    } else {
	      node.delegate = this.eat(tt.star)
	      node.argument = this.parseMaybeAssign()
	    }
	    return this.finishNode(node, "YieldExpression")
	  }
	
	  var pp$4 = Parser.prototype
	
	  // This function is used to raise exceptions on parse errors. It
	  // takes an offset integer (into the current `input`) to indicate
	  // the location of the error, attaches the position to the end
	  // of the error message, and then raises a `SyntaxError` with that
	  // message.
	
	  pp$4.raise = function(pos, message) {
	    var loc = getLineInfo(this.input, pos)
	    message += " (" + loc.line + ":" + loc.column + ")"
	    var err = new SyntaxError(message)
	    err.pos = pos; err.loc = loc; err.raisedAt = this.pos
	    throw err
	  }
	
	  pp$4.raiseRecoverable = pp$4.raise
	
	  pp$4.curPosition = function() {
	    if (this.options.locations) {
	      return new Position(this.curLine, this.pos - this.lineStart)
	    }
	  }
	
	  var Node = function Node(parser, pos, loc) {
	    this.type = ""
	    this.start = pos
	    this.end = 0
	    if (parser.options.locations)
	      this.loc = new SourceLocation(parser, loc)
	    if (parser.options.directSourceFile)
	      this.sourceFile = parser.options.directSourceFile
	    if (parser.options.ranges)
	      this.range = [pos, 0]
	  };
	
	  // Start an AST node, attaching a start offset.
	
	  var pp$5 = Parser.prototype
	
	  pp$5.startNode = function() {
	    return new Node(this, this.start, this.startLoc)
	  }
	
	  pp$5.startNodeAt = function(pos, loc) {
	    return new Node(this, pos, loc)
	  }
	
	  // Finish an AST node, adding `type` and `end` properties.
	
	  function finishNodeAt(node, type, pos, loc) {
	    node.type = type
	    node.end = pos
	    if (this.options.locations)
	      node.loc.end = loc
	    if (this.options.ranges)
	      node.range[1] = pos
	    return node
	  }
	
	  pp$5.finishNode = function(node, type) {
	    return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc)
	  }
	
	  // Finish node at given position
	
	  pp$5.finishNodeAt = function(node, type, pos, loc) {
	    return finishNodeAt.call(this, node, type, pos, loc)
	  }
	
	  var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
	    this.token = token
	    this.isExpr = !!isExpr
	    this.preserveSpace = !!preserveSpace
	    this.override = override
	  };
	
	  var types = {
	    b_stat: new TokContext("{", false),
	    b_expr: new TokContext("{", true),
	    b_tmpl: new TokContext("${", true),
	    p_stat: new TokContext("(", false),
	    p_expr: new TokContext("(", true),
	    q_tmpl: new TokContext("`", true, true, function (p) { return p.readTmplToken(); }),
	    f_expr: new TokContext("function", true)
	  }
	
	  var pp$6 = Parser.prototype
	
	  pp$6.initialContext = function() {
	    return [types.b_stat]
	  }
	
	  pp$6.braceIsBlock = function(prevType) {
	    if (prevType === tt.colon) {
	      var parent = this.curContext()
	      if (parent === types.b_stat || parent === types.b_expr)
	        return !parent.isExpr
	    }
	    if (prevType === tt._return)
	      return lineBreak.test(this.input.slice(this.lastTokEnd, this.start))
	    if (prevType === tt._else || prevType === tt.semi || prevType === tt.eof || prevType === tt.parenR)
	      return true
	    if (prevType == tt.braceL)
	      return this.curContext() === types.b_stat
	    return !this.exprAllowed
	  }
	
	  pp$6.updateContext = function(prevType) {
	    var update, type = this.type
	    if (type.keyword && prevType == tt.dot)
	      this.exprAllowed = false
	    else if (update = type.updateContext)
	      update.call(this, prevType)
	    else
	      this.exprAllowed = type.beforeExpr
	  }
	
	  // Token-specific context update code
	
	  tt.parenR.updateContext = tt.braceR.updateContext = function() {
	    if (this.context.length == 1) {
	      this.exprAllowed = true
	      return
	    }
	    var out = this.context.pop()
	    if (out === types.b_stat && this.curContext() === types.f_expr) {
	      this.context.pop()
	      this.exprAllowed = false
	    } else if (out === types.b_tmpl) {
	      this.exprAllowed = true
	    } else {
	      this.exprAllowed = !out.isExpr
	    }
	  }
	
	  tt.braceL.updateContext = function(prevType) {
	    this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr)
	    this.exprAllowed = true
	  }
	
	  tt.dollarBraceL.updateContext = function() {
	    this.context.push(types.b_tmpl)
	    this.exprAllowed = true
	  }
	
	  tt.parenL.updateContext = function(prevType) {
	    var statementParens = prevType === tt._if || prevType === tt._for || prevType === tt._with || prevType === tt._while
	    this.context.push(statementParens ? types.p_stat : types.p_expr)
	    this.exprAllowed = true
	  }
	
	  tt.incDec.updateContext = function() {
	    // tokExprAllowed stays unchanged
	  }
	
	  tt._function.updateContext = function(prevType) {
	    if (prevType.beforeExpr && prevType !== tt.semi && prevType !== tt._else &&
	        !((prevType === tt.colon || prevType === tt.braceL) && this.curContext() === types.b_stat))
	      this.context.push(types.f_expr)
	    this.exprAllowed = false
	  }
	
	  tt.backQuote.updateContext = function() {
	    if (this.curContext() === types.q_tmpl)
	      this.context.pop()
	    else
	      this.context.push(types.q_tmpl)
	    this.exprAllowed = false
	  }
	
	  // Object type used to represent tokens. Note that normally, tokens
	  // simply exist as properties on the parser object. This is only
	  // used for the onToken callback and the external tokenizer.
	
	  var Token = function Token(p) {
	    this.type = p.type
	    this.value = p.value
	    this.start = p.start
	    this.end = p.end
	    if (p.options.locations)
	      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)
	    if (p.options.ranges)
	      this.range = [p.start, p.end]
	  };
	
	  // ## Tokenizer
	
	  var pp$7 = Parser.prototype
	
	  // Are we running under Rhino?
	  var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]"
	
	  // Move to the next token
	
	  pp$7.next = function() {
	    if (this.options.onToken)
	      this.options.onToken(new Token(this))
	
	    this.lastTokEnd = this.end
	    this.lastTokStart = this.start
	    this.lastTokEndLoc = this.endLoc
	    this.lastTokStartLoc = this.startLoc
	    this.nextToken()
	  }
	
	  pp$7.getToken = function() {
	    this.next()
	    return new Token(this)
	  }
	
	  // If we're in an ES6 environment, make parsers iterable
	  if (typeof Symbol !== "undefined")
	    pp$7[Symbol.iterator] = function () {
	      var self = this
	      return {next: function () {
	        var token = self.getToken()
	        return {
	          done: token.type === tt.eof,
	          value: token
	        }
	      }}
	    }
	
	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).
	
	  pp$7.setStrict = function(strict) {
	    var this$1 = this;
	
	    this.strict = strict
	    if (this.type !== tt.num && this.type !== tt.string) return
	    this.pos = this.start
	    if (this.options.locations) {
	      while (this.pos < this.lineStart) {
	        this$1.lineStart = this$1.input.lastIndexOf("\n", this$1.lineStart - 2) + 1
	        --this$1.curLine
	      }
	    }
	    this.nextToken()
	  }
	
	  pp$7.curContext = function() {
	    return this.context[this.context.length - 1]
	  }
	
	  // Read a single token, updating the parser object's token-related
	  // properties.
	
	  pp$7.nextToken = function() {
	    var curContext = this.curContext()
	    if (!curContext || !curContext.preserveSpace) this.skipSpace()
	
	    this.start = this.pos
	    if (this.options.locations) this.startLoc = this.curPosition()
	    if (this.pos >= this.input.length) return this.finishToken(tt.eof)
	
	    if (curContext.override) return curContext.override(this)
	    else this.readToken(this.fullCharCodeAtPos())
	  }
	
	  pp$7.readToken = function(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */)
	      return this.readWord()
	
	    return this.getTokenFromCode(code)
	  }
	
	  pp$7.fullCharCodeAtPos = function() {
	    var code = this.input.charCodeAt(this.pos)
	    if (code <= 0xd7ff || code >= 0xe000) return code
	    var next = this.input.charCodeAt(this.pos + 1)
	    return (code << 10) + next - 0x35fdc00
	  }
	
	  pp$7.skipBlockComment = function() {
	    var this$1 = this;
	
	    var startLoc = this.options.onComment && this.curPosition()
	    var start = this.pos, end = this.input.indexOf("*/", this.pos += 2)
	    if (end === -1) this.raise(this.pos - 2, "Unterminated comment")
	    this.pos = end + 2
	    if (this.options.locations) {
	      lineBreakG.lastIndex = start
	      var match
	      while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
	        ++this$1.curLine
	        this$1.lineStart = match.index + match[0].length
	      }
	    }
	    if (this.options.onComment)
	      this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,
	                             startLoc, this.curPosition())
	  }
	
	  pp$7.skipLineComment = function(startSkip) {
	    var this$1 = this;
	
	    var start = this.pos
	    var startLoc = this.options.onComment && this.curPosition()
	    var ch = this.input.charCodeAt(this.pos+=startSkip)
	    while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this$1.pos
	      ch = this$1.input.charCodeAt(this$1.pos)
	    }
	    if (this.options.onComment)
	      this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,
	                             startLoc, this.curPosition())
	  }
	
	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.
	
	  pp$7.skipSpace = function() {
	    var this$1 = this;
	
	    loop: while (this.pos < this.input.length) {
	      var ch = this$1.input.charCodeAt(this$1.pos)
	      switch (ch) {
	        case 32: case 160: // ' '
	          ++this$1.pos
	          break
	        case 13:
	          if (this$1.input.charCodeAt(this$1.pos + 1) === 10) {
	            ++this$1.pos
	          }
	        case 10: case 8232: case 8233:
	          ++this$1.pos
	          if (this$1.options.locations) {
	            ++this$1.curLine
	            this$1.lineStart = this$1.pos
	          }
	          break
	        case 47: // '/'
	          switch (this$1.input.charCodeAt(this$1.pos + 1)) {
	            case 42: // '*'
	              this$1.skipBlockComment()
	              break
	            case 47:
	              this$1.skipLineComment(2)
	              break
	            default:
	              break loop
	          }
	          break
	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this$1.pos
	          } else {
	            break loop
	          }
	      }
	    }
	  }
	
	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.
	
	  pp$7.finishToken = function(type, val) {
	    this.end = this.pos
	    if (this.options.locations) this.endLoc = this.curPosition()
	    var prevType = this.type
	    this.type = type
	    this.value = val
	
	    this.updateContext(prevType)
	  }
	
	  // ### Token reading
	
	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	  pp$7.readToken_dot = function() {
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (next >= 48 && next <= 57) return this.readNumber(true)
	    var next2 = this.input.charCodeAt(this.pos + 2)
	    if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
	      this.pos += 3
	      return this.finishToken(tt.ellipsis)
	    } else {
	      ++this.pos
	      return this.finishToken(tt.dot)
	    }
	  }
	
	  pp$7.readToken_slash = function() { // '/'
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (this.exprAllowed) {++this.pos; return this.readRegexp()}
	    if (next === 61) return this.finishOp(tt.assign, 2)
	    return this.finishOp(tt.slash, 1)
	  }
	
	  pp$7.readToken_mult_modulo_exp = function(code) { // '%*'
	    var next = this.input.charCodeAt(this.pos + 1)
	    var size = 1
	    var tokentype = code === 42 ? tt.star : tt.modulo
	
	    // exponentiation operator ** and **=
	    if (this.options.ecmaVersion >= 7 && next === 42) {
	      ++size
	      tokentype = tt.starstar
	      next = this.input.charCodeAt(this.pos + 2)
	    }
	
	    if (next === 61) return this.finishOp(tt.assign, size + 1)
	    return this.finishOp(tokentype, size)
	  }
	
	  pp$7.readToken_pipe_amp = function(code) { // '|&'
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)
	    if (next === 61) return this.finishOp(tt.assign, 2)
	    return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)
	  }
	
	  pp$7.readToken_caret = function() { // '^'
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (next === 61) return this.finishOp(tt.assign, 2)
	    return this.finishOp(tt.bitwiseXOR, 1)
	  }
	
	  pp$7.readToken_plus_min = function(code) { // '+-'
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (next === code) {
	      if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&
	          lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3)
	        this.skipSpace()
	        return this.nextToken()
	      }
	      return this.finishOp(tt.incDec, 2)
	    }
	    if (next === 61) return this.finishOp(tt.assign, 2)
	    return this.finishOp(tt.plusMin, 1)
	  }
	
	  pp$7.readToken_lt_gt = function(code) { // '<>'
	    var next = this.input.charCodeAt(this.pos + 1)
	    var size = 1
	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2
	      if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)
	      return this.finishOp(tt.bitShift, size)
	    }
	    if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&
	        this.input.charCodeAt(this.pos + 3) == 45) {
	      if (this.inModule) this.unexpected()
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4)
	      this.skipSpace()
	      return this.nextToken()
	    }
	    if (next === 61) size = 2
	    return this.finishOp(tt.relational, size)
	  }
	
	  pp$7.readToken_eq_excl = function(code) { // '=!'
	    var next = this.input.charCodeAt(this.pos + 1)
	    if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)
	    if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'
	      this.pos += 2
	      return this.finishToken(tt.arrow)
	    }
	    return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)
	  }
	
	  pp$7.getTokenFromCode = function(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	    case 46: // '.'
	      return this.readToken_dot()
	
	      // Punctuation tokens.
	    case 40: ++this.pos; return this.finishToken(tt.parenL)
	    case 41: ++this.pos; return this.finishToken(tt.parenR)
	    case 59: ++this.pos; return this.finishToken(tt.semi)
	    case 44: ++this.pos; return this.finishToken(tt.comma)
	    case 91: ++this.pos; return this.finishToken(tt.bracketL)
	    case 93: ++this.pos; return this.finishToken(tt.bracketR)
	    case 123: ++this.pos; return this.finishToken(tt.braceL)
	    case 125: ++this.pos; return this.finishToken(tt.braceR)
	    case 58: ++this.pos; return this.finishToken(tt.colon)
	    case 63: ++this.pos; return this.finishToken(tt.question)
	
	    case 96: // '`'
	      if (this.options.ecmaVersion < 6) break
	      ++this.pos
	      return this.finishToken(tt.backQuote)
	
	    case 48: // '0'
	      var next = this.input.charCodeAt(this.pos + 1)
	      if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number
	      if (this.options.ecmaVersion >= 6) {
	        if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number
	      }
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
	      return this.readNumber(false)
	
	      // Quotes produce strings.
	    case 34: case 39: // '"', "'"
	      return this.readString(code)
	
	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.
	
	    case 47: // '/'
	      return this.readToken_slash()
	
	    case 37: case 42: // '%*'
	      return this.readToken_mult_modulo_exp(code)
	
	    case 124: case 38: // '|&'
	      return this.readToken_pipe_amp(code)
	
	    case 94: // '^'
	      return this.readToken_caret()
	
	    case 43: case 45: // '+-'
	      return this.readToken_plus_min(code)
	
	    case 60: case 62: // '<>'
	      return this.readToken_lt_gt(code)
	
	    case 61: case 33: // '=!'
	      return this.readToken_eq_excl(code)
	
	    case 126: // '~'
	      return this.finishOp(tt.prefix, 1)
	    }
	
	    this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'")
	  }
	
	  pp$7.finishOp = function(type, size) {
	    var str = this.input.slice(this.pos, this.pos + size)
	    this.pos += size
	    return this.finishToken(type, str)
	  }
	
	  // Parse a regular expression. Some context-awareness is necessary,
	  // since a '/' inside a '[]' set does not end the expression.
	
	  function tryCreateRegexp(src, flags, throwErrorAt, parser) {
	    try {
	      return new RegExp(src, flags)
	    } catch (e) {
	      if (throwErrorAt !== undefined) {
	        if (e instanceof SyntaxError) parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message)
	        throw e
	      }
	    }
	  }
	
	  var regexpUnicodeSupport = !!tryCreateRegexp("\uffff", "u")
	
	  pp$7.readRegexp = function() {
	    var this$1 = this;
	
	    var escaped, inClass, start = this.pos
	    for (;;) {
	      if (this$1.pos >= this$1.input.length) this$1.raise(start, "Unterminated regular expression")
	      var ch = this$1.input.charAt(this$1.pos)
	      if (lineBreak.test(ch)) this$1.raise(start, "Unterminated regular expression")
	      if (!escaped) {
	        if (ch === "[") inClass = true
	        else if (ch === "]" && inClass) inClass = false
	        else if (ch === "/" && !inClass) break
	        escaped = ch === "\\"
	      } else escaped = false
	      ++this$1.pos
	    }
	    var content = this.input.slice(start, this.pos)
	    ++this.pos
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1()
	    var tmp = content, tmpFlags = ""
	    if (mods) {
	      var validFlags = /^[gim]*$/
	      if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag")
	      if (mods.indexOf("u") >= 0) {
	        if (regexpUnicodeSupport) {
	          tmpFlags = "u"
	        } else {
	          // Replace each astral symbol and every Unicode escape sequence that
	          // possibly represents an astral symbol or a paired surrogate with a
	          // single ASCII symbol to avoid throwing on regular expressions that
	          // are only valid in combination with the `/u` flag.
	          // Note: replacing with the ASCII symbol `x` might cause false
	          // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	          // perfectly valid pattern that is equivalent to `[a-b]`, but it would
	          // be replaced by `[x-b]` which throws an error.
	          tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
	            code = Number("0x" + code)
	            if (code > 0x10FFFF) this$1.raise(start + offset + 3, "Code point out of bounds")
	            return "x"
	          })
	          tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x")
	          tmpFlags = tmpFlags.replace("u", "")
	        }
	      }
	    }
	    // Detect invalid regular expressions.
	    var value = null
	    // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
	    // so don't do detection if we are running under Rhino
	    if (!isRhino) {
	      tryCreateRegexp(tmp, tmpFlags, start, this)
	      // Get a regular expression object for this pattern-flag pair, or `null` in
	      // case the current environment doesn't support the flags it uses.
	      value = tryCreateRegexp(content, mods)
	    }
	    return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})
	  }
	
	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.
	
	  pp$7.readInt = function(radix, len) {
	    var this$1 = this;
	
	    var start = this.pos, total = 0
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this$1.input.charCodeAt(this$1.pos), val
	      if (code >= 97) val = code - 97 + 10 // a
	      else if (code >= 65) val = code - 65 + 10 // A
	      else if (code >= 48 && code <= 57) val = code - 48 // 0-9
	      else val = Infinity
	      if (val >= radix) break
	      ++this$1.pos
	      total = total * radix + val
	    }
	    if (this.pos === start || len != null && this.pos - start !== len) return null
	
	    return total
	  }
	
	  pp$7.readRadixNumber = function(radix) {
	    this.pos += 2 // 0x
	    var val = this.readInt(radix)
	    if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix)
	    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number")
	    return this.finishToken(tt.num, val)
	  }
	
	  // Read an integer, octal integer, or floating-point number.
	
	  pp$7.readNumber = function(startsWithDot) {
	    var start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number")
	    var next = this.input.charCodeAt(this.pos)
	    if (next === 46) { // '.'
	      ++this.pos
	      this.readInt(10)
	      isFloat = true
	      next = this.input.charCodeAt(this.pos)
	    }
	    if (next === 69 || next === 101) { // 'eE'
	      next = this.input.charCodeAt(++this.pos)
	      if (next === 43 || next === 45) ++this.pos // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number")
	      isFloat = true
	    }
	    if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number")
	
	    var str = this.input.slice(start, this.pos), val
	    if (isFloat) val = parseFloat(str)
	    else if (!octal || str.length === 1) val = parseInt(str, 10)
	    else if (/[89]/.test(str) || this.strict) this.raise(start, "Invalid number")
	    else val = parseInt(str, 8)
	    return this.finishToken(tt.num, val)
	  }
	
	  // Read a string value, interpreting backslash-escapes.
	
	  pp$7.readCodePoint = function() {
	    var ch = this.input.charCodeAt(this.pos), code
	
	    if (ch === 123) {
	      if (this.options.ecmaVersion < 6) this.unexpected()
	      var codePos = ++this.pos
	      code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)
	      ++this.pos
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds")
	    } else {
	      code = this.readHexChar(4)
	    }
	    return code
	  }
	
	  function codePointToString(code) {
	    // UTF-16 Decoding
	    if (code <= 0xFFFF) return String.fromCharCode(code)
	    code -= 0x10000
	    return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)
	  }
	
	  pp$7.readString = function(quote) {
	    var this$1 = this;
	
	    var out = "", chunkStart = ++this.pos
	    for (;;) {
	      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, "Unterminated string constant")
	      var ch = this$1.input.charCodeAt(this$1.pos)
	      if (ch === quote) break
	      if (ch === 92) { // '\'
	        out += this$1.input.slice(chunkStart, this$1.pos)
	        out += this$1.readEscapedChar(false)
	        chunkStart = this$1.pos
	      } else {
	        if (isNewLine(ch)) this$1.raise(this$1.start, "Unterminated string constant")
	        ++this$1.pos
	      }
	    }
	    out += this.input.slice(chunkStart, this.pos++)
	    return this.finishToken(tt.string, out)
	  }
	
	  // Reads template string tokens.
	
	  pp$7.readTmplToken = function() {
	    var this$1 = this;
	
	    var out = "", chunkStart = this.pos
	    for (;;) {
	      if (this$1.pos >= this$1.input.length) this$1.raise(this$1.start, "Unterminated template")
	      var ch = this$1.input.charCodeAt(this$1.pos)
	      if (ch === 96 || ch === 36 && this$1.input.charCodeAt(this$1.pos + 1) === 123) { // '`', '${'
	        if (this$1.pos === this$1.start && this$1.type === tt.template) {
	          if (ch === 36) {
	            this$1.pos += 2
	            return this$1.finishToken(tt.dollarBraceL)
	          } else {
	            ++this$1.pos
	            return this$1.finishToken(tt.backQuote)
	          }
	        }
	        out += this$1.input.slice(chunkStart, this$1.pos)
	        return this$1.finishToken(tt.template, out)
	      }
	      if (ch === 92) { // '\'
	        out += this$1.input.slice(chunkStart, this$1.pos)
	        out += this$1.readEscapedChar(true)
	        chunkStart = this$1.pos
	      } else if (isNewLine(ch)) {
	        out += this$1.input.slice(chunkStart, this$1.pos)
	        ++this$1.pos
	        switch (ch) {
	          case 13:
	            if (this$1.input.charCodeAt(this$1.pos) === 10) ++this$1.pos
	          case 10:
	            out += "\n"
	            break
	          default:
	            out += String.fromCharCode(ch)
	            break
	        }
	        if (this$1.options.locations) {
	          ++this$1.curLine
	          this$1.lineStart = this$1.pos
	        }
	        chunkStart = this$1.pos
	      } else {
	        ++this$1.pos
	      }
	    }
	  }
	
	  // Used to read escaped characters
	
	  pp$7.readEscapedChar = function(inTemplate) {
	    var ch = this.input.charCodeAt(++this.pos)
	    ++this.pos
	    switch (ch) {
	    case 110: return "\n" // 'n' -> '\n'
	    case 114: return "\r" // 'r' -> '\r'
	    case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'
	    case 117: return codePointToString(this.readCodePoint()) // 'u'
	    case 116: return "\t" // 't' -> '\t'
	    case 98: return "\b" // 'b' -> '\b'
	    case 118: return "\u000b" // 'v' -> '\u000b'
	    case 102: return "\f" // 'f' -> '\f'
	    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\r\n'
	    case 10: // ' \n'
	      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }
	      return ""
	    default:
	      if (ch >= 48 && ch <= 55) {
	        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]
	        var octal = parseInt(octalStr, 8)
	        if (octal > 255) {
	          octalStr = octalStr.slice(0, -1)
	          octal = parseInt(octalStr, 8)
	        }
	        if (octalStr !== "0" && (this.strict || inTemplate)) {
	          this.raise(this.pos - 2, "Octal literal in strict mode")
	        }
	        this.pos += octalStr.length - 1
	        return String.fromCharCode(octal)
	      }
	      return String.fromCharCode(ch)
	    }
	  }
	
	  // Used to read character escape sequences ('\x', '\u', '\U').
	
	  pp$7.readHexChar = function(len) {
	    var codePos = this.pos
	    var n = this.readInt(16, len)
	    if (n === null) this.raise(codePos, "Bad character escape sequence")
	    return n
	  }
	
	  // Read an identifier, and return it as a string. Sets `this.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.
	
	  pp$7.readWord1 = function() {
	    var this$1 = this;
	
	    this.containsEsc = false
	    var word = "", first = true, chunkStart = this.pos
	    var astral = this.options.ecmaVersion >= 6
	    while (this.pos < this.input.length) {
	      var ch = this$1.fullCharCodeAtPos()
	      if (isIdentifierChar(ch, astral)) {
	        this$1.pos += ch <= 0xffff ? 1 : 2
	      } else if (ch === 92) { // "\"
	        this$1.containsEsc = true
	        word += this$1.input.slice(chunkStart, this$1.pos)
	        var escStart = this$1.pos
	        if (this$1.input.charCodeAt(++this$1.pos) != 117) // "u"
	          this$1.raise(this$1.pos, "Expecting Unicode escape sequence \\uXXXX")
	        ++this$1.pos
	        var esc = this$1.readCodePoint()
	        if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))
	          this$1.raise(escStart, "Invalid Unicode escape")
	        word += codePointToString(esc)
	        chunkStart = this$1.pos
	      } else {
	        break
	      }
	      first = false
	    }
	    return word + this.input.slice(chunkStart, this.pos)
	  }
	
	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.
	
	  pp$7.readWord = function() {
	    var word = this.readWord1()
	    var type = tt.name
	    if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word))
	      type = keywordTypes[word]
	    return this.finishToken(type, word)
	  }
	
	  var version = "3.3.0"
	
	  // The main exported interface (under `self.acorn` when in the
	  // browser) is a `parse` function that takes a code string and
	  // returns an abstract syntax tree as specified by [Mozilla parser
	  // API][api].
	  //
	  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API
	
	  function parse(input, options) {
	    return new Parser(options, input).parse()
	  }
	
	  // This function tries to parse a single expression at a given
	  // offset in a string. Useful for parsing mixed-language formats
	  // that embed JavaScript expressions.
	
	  function parseExpressionAt(input, pos, options) {
	    var p = new Parser(options, input, pos)
	    p.nextToken()
	    return p.parseExpression()
	  }
	
	  // Acorn is organized as a tokenizer and a recursive-descent parser.
	  // The `tokenizer` export provides an interface to the tokenizer.
	
	  function tokenizer(input, options) {
	    return new Parser(options, input)
	  }
	
	  exports.version = version;
	  exports.parse = parse;
	  exports.parseExpressionAt = parseExpressionAt;
	  exports.tokenizer = tokenizer;
	  exports.Parser = Parser;
	  exports.plugins = plugins;
	  exports.defaultOptions = defaultOptions;
	  exports.Position = Position;
	  exports.SourceLocation = SourceLocation;
	  exports.getLineInfo = getLineInfo;
	  exports.Node = Node;
	  exports.TokenType = TokenType;
	  exports.tokTypes = tt;
	  exports.TokContext = TokContext;
	  exports.tokContexts = types;
	  exports.isIdentifierChar = isIdentifierChar;
	  exports.isIdentifierStart = isIdentifierStart;
	  exports.Token = Token;
	  exports.isNewLine = isNewLine;
	  exports.lineBreak = lineBreak;
	  exports.lineBreakG = lineBreakG;
	
	  Object.defineProperty(exports, '__esModule', { value: true });
	
	}));

/***/ },
/* 62 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function BasicEvaluatedExpression() {
		this.range = null;
	}
	module.exports = BasicEvaluatedExpression;
	
	BasicEvaluatedExpression.prototype.isNull = function() {
		return !!this.null;
	};
	BasicEvaluatedExpression.prototype.isString = function() {
		return Object.prototype.hasOwnProperty.call(this, "string");
	};
	BasicEvaluatedExpression.prototype.isNumber = function() {
		return Object.prototype.hasOwnProperty.call(this, "number");
	};
	BasicEvaluatedExpression.prototype.isBoolean = function() {
		return Object.prototype.hasOwnProperty.call(this, "bool");
	};
	BasicEvaluatedExpression.prototype.isRegExp = function() {
		return Object.prototype.hasOwnProperty.call(this, "regExp");
	};
	BasicEvaluatedExpression.prototype.isConditional = function() {
		return Object.prototype.hasOwnProperty.call(this, "options");
	};
	BasicEvaluatedExpression.prototype.isArray = function() {
		return Object.prototype.hasOwnProperty.call(this, "items");
	};
	BasicEvaluatedExpression.prototype.isConstArray = function() {
		return Object.prototype.hasOwnProperty.call(this, "array");
	};
	BasicEvaluatedExpression.prototype.isIdentifier = function() {
		return Object.prototype.hasOwnProperty.call(this, "identifier");
	};
	BasicEvaluatedExpression.prototype.isWrapped = function() {
		return Object.prototype.hasOwnProperty.call(this, "prefix") || Object.prototype.hasOwnProperty.call(this, "postfix");
	};
	BasicEvaluatedExpression.prototype.asBool = function() {
		if(this.isBoolean()) return this.bool;
		else if(this.isNull()) return false;
		else if(this.isString()) return !!this.string;
		else if(this.isNumber()) return !!this.number;
		else if(this.isRegExp()) return true;
		else if(this.isArray()) return true;
		else if(this.isConstArray()) return true;
		else if(this.isWrapped()) return this.prefix && this.prefix.asBool() || this.postfix && this.postfix.asBool() ? true : undefined;
		return undefined;
	};
	BasicEvaluatedExpression.prototype.set = function(value) {
		if(typeof value === "string") return this.setString(value);
		if(typeof value === "number") return this.setNumber(value);
		if(typeof value === "boolean") return this.setBoolean(value);
		if(value === null) return this.setNull();
		if(value instanceof RegExp) return this.setRegExp(value);
		if(Array.isArray(value)) return this.setArray(value);
		return this;
	};
	BasicEvaluatedExpression.prototype.setString = function(str) {
		if(str === null)
			delete this.string;
		else
			this.string = str;
		return this;
	};
	BasicEvaluatedExpression.prototype.setNull = function() {
		this.null = true;
		return this;
	};
	BasicEvaluatedExpression.prototype.setNumber = function(num) {
		if(num === null)
			delete this.number;
		else
			this.number = num;
		return this;
	};
	BasicEvaluatedExpression.prototype.setBoolean = function(bool) {
		if(bool === null)
			delete this.bool;
		else
			this.bool = bool;
		return this;
	};
	BasicEvaluatedExpression.prototype.setRegExp = function(regExp) {
		if(regExp === null)
			delete this.regExp;
		else
			this.regExp = regExp;
		return this;
	};
	BasicEvaluatedExpression.prototype.setIdentifier = function(identifier) {
		if(identifier === null)
			delete this.identifier;
		else
			this.identifier = identifier;
		return this;
	};
	BasicEvaluatedExpression.prototype.setWrapped = function(prefix, postfix) {
		this.prefix = prefix;
		this.postfix = postfix;
		return this;
	};
	BasicEvaluatedExpression.prototype.unsetWrapped = function() {
		delete this.prefix;
		delete this.postfix;
		return this;
	};
	BasicEvaluatedExpression.prototype.setOptions = function(options) {
		if(options === null)
			delete this.options;
		else
			this.options = options;
		return this;
	};
	BasicEvaluatedExpression.prototype.setItems = function(items) {
		if(items === null)
			delete this.items;
		else
			this.items = items;
		return this;
	};
	BasicEvaluatedExpression.prototype.setArray = function(array) {
		if(array === null)
			delete this.array;
		else
			this.array = array;
		return this;
	};
	BasicEvaluatedExpression.prototype.addOptions = function(options) {
		if(!this.options) this.options = [];
		options.forEach(function(item) {
			this.options.push(item);
		}, this);
		return this;
	};
	BasicEvaluatedExpression.prototype.setRange = function(range) {
		this.range = range;
		return this;
	};


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(8);
	var createInnerCallback = __webpack_require__(64);
	
	function Resolver(fileSystem) {
		Tapable.call(this);
		this.fileSystem = fileSystem;
	}
	module.exports = Resolver;
	
	Resolver.prototype = Object.create(Tapable.prototype);
	
	Resolver.prototype.resolveSync = function resolveSync(context, request) {
		var err, result, sync = false;
		this.resolve(context, request, function(e, r) {
			err = e;
			result = r;
			sync = true;
		});
		if(!sync) throw new Error("Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!");
		if(err) throw err;
		return result;
	};
	
	Resolver.prototype.resolve = function resolve(context, request, callback) {
		if(typeof request === "string") request = this.parse(request);
		this.applyPlugins("resolve", context, request);
		var obj = {
			path: context,
			request: request.path,
			query: request.query,
			directory: request.directory
		};
		function onResolved(err, result) {
			if(err) return callback(err);
			return callback(null, result.path === false ? false : result.path + (result.query || ""));
		}
		onResolved.log = callback.log;
		onResolved.missing = callback.missing;
		if(request.module) return this.doResolve("module", obj, onResolved);
		if(request.directory) return this.doResolve("directory", obj, onResolved);
		return this.doResolve(["file", "directory"], obj, onResolved);
	};
	
	Resolver.prototype.doResolve = function doResolve(types, request, callback, noError) {
		if(!Array.isArray(types)) types = [types];
		var stackLine = types.join(" or ") + ": (" + request.path + ") " +
			(request.request || "") + (request.query || "") +
			(request.directory ? " directory" : "") +
			(request.module ? " module" : "");
		var newStack = [stackLine];
		if(callback.stack) {
			newStack = callback.stack.concat(newStack);
			if(callback.stack.indexOf(stackLine) >= 0) {
				// Prevent recursion
				var recursionError = new Error("Recursion in resolving\nStack:\n  " + newStack.join("\n  "));
				recursionError.recursion = true;
				if(callback.log) callback.log("abort resolving because of recursion");
				return callback(recursionError);
			}
		}
		this.applyPlugins("resolve-step", types, request);
		var localMissing = [];
		var missing = callback.missing ? {
			push: function(item) {
				callback.missing.push(item);
				localMissing.push(item);
			}
		} : localMissing;
		var log = [];
		function writeLog(msg) {
			log.push(msg);
		}
		function logAsString() {
			return log.join("\n");
		}
		var currentRequestString = request.request ? request.request + " in " + request.path : request.path;
		if(types.length == 1 && !noError) {
			// If only one type, we can pass the error.
			return this.applyPluginsParallelBailResult(types[0], request, createInnerCallback(function innerCallback(err, result) {
				if(callback.log) {
					for(var i = 0; i < log.length; i++)
						callback.log(log[i]);
				}
				if(err) return callback(err);
				if(result) return callback(null, result);
				if(types[0] === "result") return callback(null, request);
				var error = new Error("Cannot resolve " + types[0] + " '" + request.request + "' in " + request.path);
				error.details = logAsString();
				error.missing = localMissing;
				return callback(error);
			}, {
				log: writeLog,
				missing: missing,
				stack: newStack
			}, "resolve " + types[0] + " " + currentRequestString));
		}
		// For multiple type we list the errors in the details although some of them are not important
		this.forEachBail(types, function(type, callback) {
			this.applyPluginsParallelBailResult(type, request, createInnerCallback(function(err, result) {
				if(!err && result) return callback(result);
				if (err) {
					(err.message || "").split("\n").forEach(function(line) {
						log.push("  " + line);
					});
				}
				callback();
			}, {
				log: writeLog,
				missing: missing,
				stack: newStack
			}, "resolve " + type));
		}.bind(this), function(result) {
			if(callback.log) {
				callback.log("resolve '" + types.join("' or '") + "' " + currentRequestString);
				for(var i = 0; i < log.length; i++)
					callback.log("  " + log[i]);
			}
			if(noError && !result) return callback();
			if(result) return callback(null, result);
			var error = new Error("Cannot resolve '" + types.join("' or '") + "' " + currentRequestString);
			error.details = logAsString();
			error.missing = localMissing;
			return callback(error);
		});
	};
	
	Resolver.prototype.parse = function parse(identifier) {
		if(identifier === "") return null;
		var part = {
			path: null,
			query: null,
			module: false,
			directory: false,
			file: false
		};
		var idxQuery = identifier.indexOf("?");
		if(idxQuery == 0) {
			part.query = identifier;
		} else if(idxQuery > 0) {
			part.path = identifier.slice(0, idxQuery);
			part.query = identifier.slice(idxQuery);
		} else {
			part.path = identifier;
		}
		if(part.path) {
			part.module = this.isModule(part.path);
			if(part.directory = this.isDirectory(part.path)) {
				part.path = part.path.substr(0, part.path.length - 1);
			}
		}
		return part;
	};
	
	var notModuleRegExp = /^\.$|^\.[\\\/]|^\.\.$|^\.\.[\/\\]|^\/|^[A-Z]:[\\\/]/i;
	Resolver.prototype.isModule = function isModule(path) {
		return !notModuleRegExp.test(path);
	};
	
	var directoryRegExp = /[\/\\]$/i;
	Resolver.prototype.isDirectory = function isDirectory(path) {
		return directoryRegExp.test(path);
	};
	
	Resolver.prototype.join = __webpack_require__(65);
	
	Resolver.prototype.normalize = __webpack_require__(66);
	
	Resolver.prototype.forEachBail = function(array, iterator, callback) {
		if(array.length == 0) return callback();
		var currentPos = array.length;
		var currentError, currentResult;
		var done = [];
		for(var i = 0; i < array.length; i++) {
			var itCb = (function(i) {
				return function() {
					if(i >= currentPos) return; // ignore
					var args = Array.prototype.slice.call(arguments);
					done.push(i);
					if(args.length > 0) {
						currentPos = i + 1;
						done = done.filter(function(item) {
							return item <= i;
						});
						currentResult = args;
					}
					if(done.length == currentPos) {
						callback.apply(null, currentResult);
						currentPos = 0;
					}
				};
			}(i));
			iterator(array[i], itCb);
			if(currentPos == 0) break;
		}
	};
	


/***/ },
/* 64 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function createInnerCallback(callback, options, message) {
		var log = options.log;
		if(!log) {
			if(options.stack !== callback.stack) {
				function callbackWrapper() {
					return callback.apply(this, arguments);
				}
				callbackWrapper.stack = options.stack;
				callbackWrapper.missing = options.missing;
			}
			return callback;
		}
		function loggingCallbackWrapper() {
			log(message);
			for(var i = 0; i < theLog.length; i++)
				log("  " + theLog[i]);
			return callback.apply(this, arguments);
		}
		var theLog = [];
		loggingCallbackWrapper.log = function writeLog(msg) {
			theLog.push(msg);
		};
		loggingCallbackWrapper.stack = options.stack;
		loggingCallbackWrapper.missing = options.missing;
		return loggingCallbackWrapper;
	}

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	var normalize = __webpack_require__(66);
	
	var absoluteWinRegExp = /^[A-Z]:([\\\/]|$)/i;
	var absoluteNixRegExp = /^\//i;
	
	module.exports = function join(path, request) {
		if(request == "") return normalize(path);
		if(absoluteWinRegExp.test(request)) return normalize(request.replace(/\//g, "\\"));
		if(absoluteNixRegExp.test(request)) return normalize(request);
		if(path == "/") return normalize(path + request);
		if(absoluteWinRegExp.test(path)) return normalize(path + "\\" + request.replace(/\//g, "\\"));
		if(absoluteNixRegExp.test(path)) return normalize(path + "/" + request);
		return normalize(path + "/" + request);
	};

/***/ },
/* 66 */
/***/ function(module, exports) {

	var doubleSlashWinRegExp = /\\+/g;
	var doubleSlashNixRegExp = /\/+/g;
	var currentDirectoryWinMiddleRegExp = /\\(\.\\)+/;
	var currentDirectoryWinEndRegExp = /\\\.$/;
	var parentDirectoryWinMiddleRegExp = /\\+[^\\]+\\+\.\.\\/;
	var parentDirectoryWinEndRegExp1 = /([A-Z]:\\)\\*[^\\]+\\+\.\.$/i;
	var parentDirectoryWinEndRegExp2 = /\\+[^\\]+\\+\.\.$/;
	var currentDirectoryNixMiddleRegExp = /\/+(\.\/)+/;
	var currentDirectoryNixEndRegExp1 = /^\/+\.$/;
	var currentDirectoryNixEndRegExp2 = /\/+\.$/;
	var parentDirectoryNixMiddleRegExp = /(^|\/[^\/]+)\/+\.\.\/+/;
	var parentDirectoryNixEndRegExp1 = /^\/[^\/]+\/+\.\.$/;
	var parentDirectoryNixEndRegExp2 = /\/+[^\/]+\/+\.\.$/;
	var parentDirectoryNixEndRegExp3 = /^\/+\.\.$/;
	
	// RegExp magic :)
	
	module.exports = function normalize(path) {
		while(currentDirectoryWinMiddleRegExp.test(path))
			path = path.replace(currentDirectoryWinMiddleRegExp, "\\");
		path = path.replace(currentDirectoryWinEndRegExp, "");
		while(parentDirectoryWinMiddleRegExp.test(path))
			path = path.replace(parentDirectoryWinMiddleRegExp, "\\");
		path = path.replace(parentDirectoryWinEndRegExp1, "$1");
		path = path.replace(parentDirectoryWinEndRegExp2, "");
	
		while(currentDirectoryNixMiddleRegExp.test(path))
			path = path.replace(currentDirectoryNixMiddleRegExp, "/");
		path = path.replace(currentDirectoryNixEndRegExp1, "/");
		path = path.replace(currentDirectoryNixEndRegExp2, "");
		while(parentDirectoryNixMiddleRegExp.test(path))
			path = path.replace(parentDirectoryNixMiddleRegExp, "/");
		path = path.replace(parentDirectoryNixEndRegExp1, "/");
		path = path.replace(parentDirectoryNixEndRegExp2, "");
		path = path.replace(parentDirectoryNixEndRegExp3, "/");
	
		return path.replace(doubleSlashWinRegExp, "\\").replace(doubleSlashNixRegExp, "/");
	};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(10);
	
	var Tapable = __webpack_require__(8);
	var NormalModule = __webpack_require__(68);
	var RawModule = __webpack_require__(78);
	var LoadersList = __webpack_require__(79);
	
	function NormalModuleFactory(context, resolvers, parser, options) {
		Tapable.call(this);
		this.resolvers = resolvers;
		this.parser = parser;
		this.loaders = new LoadersList(options.loaders);
		this.preLoaders = new LoadersList(options.preLoaders);
		this.postLoaders = new LoadersList(options.postLoaders);
		this.context = context || "";
		this.plugin("factory", function() {
			var _this = this;
			return function(result, callback) {
				var resolver = _this.applyPluginsWaterfall("resolver", null);
	
				// Ignored
				if(!resolver) return callback();
	
				resolver(result, function onDoneResolving(err, data) {
					if(err) return callback(err);
	
					// Ignored
					if(!data) return callback();
	
					// direct module
					if(typeof data.source === "function")
						return callback(null, data);
	
					_this.applyPluginsAsyncWaterfall("after-resolve", data, function(err, result) {
						if(err) return callback(err);
	
						// Ignored
						if(!result) return callback();
	
						var createdModule = _this.applyPluginsBailResult("create-module", result);
						if(!createdModule) {
							createdModule = new NormalModule(
								result.request,
								result.userRequest,
								result.rawRequest,
								result.loaders,
								result.resource,
								result.parser
							);
						}
	
						createdModule = _this.applyPluginsWaterfall("module", createdModule);
	
						return callback(null, createdModule);
					});
				});
			};
		});
		this.plugin("resolver", function() {
			var _this = this;
			return function(data, callback) {
				var context = data.context;
				var request = data.request;
	
				var noAutoLoaders = /^-?!/.test(request);
				var noPrePostAutoLoaders = /^!!/.test(request);
				var noPostAutoLoaders = /^-!/.test(request);
				var elements = request.replace(/^-?!+/, "").replace(/!!+/g, "!").split("!");
				var resource = elements.pop();
	
				async.parallel([
					function(callback) {
						_this.resolveRequestArray(context, elements, _this.resolvers.loader, callback);
					},
					function(callback) {
						if(resource === "" || resource[0] === "?")
							return callback(null, resource);
						_this.resolvers.normal.resolve(context, resource, callback);
					}
				], function(err, results) {
					if(err) return callback(err);
					var loaders = results[0];
					resource = results[1];
	
					if(resource === false)
						return callback(null,
							new RawModule("/* (ignored) */",
								"ignored " + context + " " + request,
								request + " (ignored)")); // ignored
	
					var userRequest = loaders.concat([resource]).join("!");
	
					if(noPrePostAutoLoaders)
						return onDoneResolving();
					if(noAutoLoaders) {
						async.parallel([
							_this.resolveRequestArray.bind(_this, context, noPostAutoLoaders ? [] : _this.postLoaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.preLoaders.match(resource), _this.resolvers.loader)
						], function(err, results) {
							if(err) return callback(err);
							loaders = results[0].concat(loaders).concat(results[1]);
							onDoneResolving();
						});
					} else {
						async.parallel([
							_this.resolveRequestArray.bind(_this, context, noPostAutoLoaders ? [] : _this.postLoaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.loaders.match(resource), _this.resolvers.loader),
							_this.resolveRequestArray.bind(_this, context, _this.preLoaders.match(resource), _this.resolvers.loader)
						], function(err, results) {
							if(err) return callback(err);
							loaders = results[0].concat(loaders).concat(results[1]).concat(results[2]);
							onDoneResolving();
						});
					}
	
					function onDoneResolving() {
						callback(null, {
							context: context,
							request: loaders.concat([resource]).join("!"),
							userRequest: userRequest,
							rawRequest: request,
							loaders: loaders,
							resource: resource,
							parser: _this.parser
						});
					}
				});
			};
		});
	}
	module.exports = NormalModuleFactory;
	
	NormalModuleFactory.prototype = Object.create(Tapable.prototype);
	NormalModuleFactory.prototype.constructor = NormalModuleFactory;
	
	NormalModuleFactory.prototype.create = function(context, dependency, callback) {
		var _this = this;
		context = context || this.context;
		var request = dependency.request;
		_this.applyPluginsAsyncWaterfall("before-resolve", {
			context: context,
			request: request,
			dependency: dependency
		}, function(err, result) {
			if(err) return callback(err);
	
			// Ignored
			if(!result) return callback();
	
			var factory = _this.applyPluginsWaterfall("factory", null);
	
			// Ignored
			if(!factory) return callback();
	
			factory(result, callback);
	
		});
	};
	
	NormalModuleFactory.prototype.resolveRequestArray = function resolveRequestArray(context, array, resolver, callback) {
		if(array.length === 0) return callback(null, []);
		async.map(array, function(item, callback) {
			if(item === "" || item[0] === "?")
				return callback(null, item);
			resolver.resolve(context, item, callback);
		}, callback);
	};


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var Module = __webpack_require__(15);
	var NormalModuleMixin = __webpack_require__(69);
	var SourceMapSource = __webpack_require__(70);
	var OriginalSource = __webpack_require__(50);
	var RawSource = __webpack_require__(40);
	var ReplaceSource = __webpack_require__(18);
	var CachedSource = __webpack_require__(58);
	var ModuleParseError = __webpack_require__(75);
	var TemplateArgumentDependency = __webpack_require__(76);
	var AsyncDependenciesBlock = __webpack_require__(77);
	
	function NormalModule(request, userRequest, rawRequest, loaders, resource, parser) {
		Module.call(this);
		this.request = request;
		this.userRequest = userRequest;
		this.rawRequest = rawRequest;
		this.parser = parser;
		NormalModuleMixin.call(this, loaders, resource);
		this.meta = {};
		this.assets = {};
		this.built = false;
		this._cachedSource = null;
	}
	module.exports = NormalModule;
	
	NormalModule.prototype = Object.create(Module.prototype);
	NormalModuleMixin.mixin(NormalModule.prototype);
	
	NormalModule.prototype.identifier = function() {
		return this.request;
	};
	
	NormalModule.prototype.readableIdentifier = function(requestShortener) {
		return requestShortener.shorten(this.userRequest);
	};
	
	function contextify(options, request) {
		return request.split("!").map(function(r) {
			var rp = path.relative(options.context, r);
			if(path.sep === "\\")
				rp = rp.replace(/\\/g, "/");
			if(rp.indexOf("../") !== 0)
				rp = "./" + rp;
			return rp;
		}).join("!");
	}
	
	NormalModule.prototype.libIdent = function(options) {
		return contextify(options, this.userRequest);
	};
	
	NormalModule.prototype.fillLoaderContext = function fillLoaderContext(loaderContext, options, compilation) {
		loaderContext.webpack = true;
		loaderContext.sourceMap = !!this.useSourceMap;
		loaderContext.emitFile = function(name, content, sourceMap) {
			if(typeof sourceMap === "string") {
				this.assets[name] = new OriginalSource(content, sourceMap);
			} else if(sourceMap) {
				this.assets[name] = new SourceMapSource(content, name, sourceMap);
			} else {
				this.assets[name] = new RawSource(content);
			}
		}.bind(this);
		loaderContext._module = this;
		loaderContext._compilation = compilation;
		loaderContext._compiler = compilation.compiler;
		loaderContext.fs = compilation.compiler.inputFileSystem;
		compilation.applyPlugins("normal-module-loader", loaderContext, this);
	};
	
	NormalModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};
	
	NormalModule.prototype.build = function build(options, compilation, resolver, fs, callback) {
		this.buildTimestamp = new Date().getTime();
		this.built = true;
		return this.doBuild(options, compilation, resolver, fs, function(err) {
			if(err) return callback(err);
			this.dependencies.length = 0;
			this.variables.length = 0;
			this.blocks.length = 0;
			this._cachedSource = null;
			if(options.module && options.module.noParse) {
				if(Array.isArray(options.module.noParse)) {
					if(options.module.noParse.some(function(regExp) {
							return typeof regExp === "string" ?
								this.request.indexOf(regExp) === 0 :
								regExp.test(this.request);
						}, this)) return callback();
				} else if(typeof options.module.noParse === "string" ?
					this.request.indexOf(options.module.noParse) === 0 :
					options.module.noParse.test(this.request)) {
					return callback();
				}
			}
			try {
				this.parser.parse(this._source.source(), {
					current: this,
					module: this,
					compilation: compilation,
					options: options
				});
			} catch(e) {
				var source = this._source.source();
				this._source = null;
				return callback(new ModuleParseError(this, source, e));
			}
			return callback();
		}.bind(this));
	};
	
	NormalModule.prototype.source = function(dependencyTemplates, outputOptions, requestShortener) {
		var hash = __webpack_require__(59).createHash("md5");
		this.updateHash(hash);
		hash = hash.digest("hex");
		if(this._cachedSource && this._cachedSource.hash === hash) {
			return this._cachedSource.source;
		}
		var _source = this._source;
		if(!_source) return new RawSource("throw new Error('No source available');");
		var source = new ReplaceSource(_source);
		this._cachedSource = {
			source: source,
			hash: hash
		};
		var topLevelBlock = this;
	
		function doDep(dep) {
			var template = dependencyTemplates.get(dep.constructor);
			if(!template) throw new Error("No template for dependency: " + dep.constructor.name);
			template.apply(dep, source, outputOptions, requestShortener, dependencyTemplates);
		}
	
		function doVariable(vars, variable) {
			var name = variable.name;
			var expr = variable.expressionSource(dependencyTemplates, outputOptions, requestShortener);
			vars.push({
				name: name,
				expression: expr
			});
		}
	
		function doBlock(block) {
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
			if(block.variables.length > 0) {
				var vars = [];
				block.variables.forEach(doVariable.bind(null, vars));
				var varNames = [];
				var varExpressions = [];
				var varStartCode = "";
				var varEndCode = "";
	
				function emitFunction() {
					if(varNames.length === 0) return;
	
					varStartCode += "/* WEBPACK VAR INJECTION */(function(" + varNames.join(", ") + ") {";
					// exports === this in the topLevelBlock, but exports do compress better...
					varEndCode = (topLevelBlock === block ? "}.call(exports, " : "}.call(this, ") +
						varExpressions.map(function(e) {
							return e.source();
						}).join(", ") + "))" + varEndCode;
	
					varNames.length = 0;
					varExpressions.length = 0;
				}
				vars.forEach(function(v) {
					if(varNames.indexOf(v.name) >= 0) emitFunction();
					varNames.push(v.name);
					varExpressions.push(v.expression);
				});
				emitFunction();
				var start = block.range ? block.range[0] : 0;
				var end = block.range ? block.range[1] : _source.size();
				if(varStartCode) source.insert(start + 0.5, varStartCode);
				if(varEndCode) source.insert(end + 0.5, "\n/* WEBPACK VAR INJECTION */" + varEndCode);
			}
		}
		doBlock(this);
		return new CachedSource(source);
	};
	
	NormalModule.prototype.needRebuild = function needRebuild(fileTimestamps, contextTimestamps) {
		var timestamp = 0;
		this.fileDependencies.forEach(function(file) {
			var ts = fileTimestamps[file];
			if(!ts) timestamp = Infinity;
			if(ts > timestamp) timestamp = ts;
		});
		this.contextDependencies.forEach(function(context) {
			var ts = contextTimestamps[context];
			if(!ts) timestamp = Infinity;
			if(ts > timestamp) timestamp = ts;
		});
		return timestamp >= this.buildTimestamp;
	};
	
	NormalModule.prototype.size = function() {
		return this._source ? this._source.size() : -1;
	};
	
	NormalModule.prototype.updateHash = function(hash) {
		if(this._source) {
			hash.update("source");
			this._source.updateHash(hash);
		} else
			hash.update("null");
		hash.update("meta");
		hash.update(JSON.stringify(this.meta));
		Module.prototype.updateHash.call(this, hash);
	};
	
	NormalModule.prototype.getSourceHash = function() {
		if(!this._source) return "";
		var hash = __webpack_require__(59).createHash("md5");
		hash.update(this._source.source());
		return hash.digest("hex");
	};
	
	NormalModule.prototype.getAllModuleDependencies = function() {
		var list = [];
	
		function doDep(dep) {
			if(dep.module && list.indexOf(dep.module) < 0)
				list.push(dep.module);
		}
	
		function doVariable(variable) {
			variable.dependencies.forEach(doDep);
		}
	
		function doBlock(block) {
			block.variables.forEach(doVariable);
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
		}
		doBlock(this);
		return list;
	};
	
	NormalModule.prototype.createTemplate = function(keepModules, roots) {
		roots.sort(function(a, b) {
			var ia = a.identifier();
			var ib = b.identifier();
			if(ia < ib) return -1;
			if(ib < ia) return 1;
			return 0;
		});
		var template = new NormalModule("", "", "", [], "", null);
		template._source = this._source;
		template.built = this.built;
		template.templateModules = keepModules;
		template._templateOrigin = this;
		template.readableIdentifier = function() {
			return "template of " + this._templateOrigin.id + " referencing " + keepModules.map(function(m) {
				return m.id;
			}).join(", ");
		};
		template.identifier = function() {
			var array = roots.map(function(m) {
				return m.identifier();
			});
			array.sort();
			return array.join("|");
		};
		var args = template.arguments = [];
	
		function doDeps(deps) {
			return deps.map(function(dep) {
				if(dep.module && keepModules.indexOf(dep.module) < 0) {
					var argName = "__webpack_module_template_argument_" + args.length + "__";
					args.push(argName);
					return new TemplateArgumentDependency(argName, dep);
				} else {
					return dep;
				}
			});
		}
	
		function doBlock(block, newBlock) {
			block.variables.forEach(function(variable) {
				var newDependencies = doDeps(variable.dependencies);
				newBlock.addVariable(variable.name, variable.expression, newDependencies);
			});
			newBlock.dependencies = doDeps(block.dependencies);
			block.blocks.forEach(function(childBlock) {
				var newChildBlock = new AsyncDependenciesBlock(childBlock.name, childBlock.module, childBlock.loc);
				newBlock.addBlock(newChildBlock);
				doBlock(childBlock, newChildBlock);
			});
		}
		doBlock(this, template);
		return template;
	};
	
	NormalModule.prototype.getTemplateArguments = function(keepModules) {
		var list = [];
	
		function doDep(dep) {
			if(dep.module && keepModules.indexOf(dep.module) < 0)
				list.push(dep.module);
		}
	
		function doVariable(variable) {
			variable.dependencies.forEach(doDep);
		}
	
		function doBlock(block) {
			block.variables.forEach(doVariable);
			block.dependencies.forEach(doDep);
			block.blocks.forEach(doBlock);
		}
		doBlock(this);
		return list;
	};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(40);
	var OriginalSource = __webpack_require__(50);
	var SourceMapSource = __webpack_require__(70);
	var LineToLineMappedSource = __webpack_require__(71);
	var path = __webpack_require__(4); // TODO refactor
	
	var ModuleBuildError = __webpack_require__(72);
	var ModuleError = __webpack_require__(73);
	var ModuleWarning = __webpack_require__(74);
	
	function utf8BufferToString(buf) {
		var str = buf.toString("utf-8");
		if(str.charCodeAt(0) === 0xFEFF) {
			return str.substr(1);
		} else {
			return str;
		}
	}
	
	function NormalModuleMixin(loaders, resource) {
		this.resource = resource;
		this.loaders = loaders;
		var resourcePath = this.splitQuery(this.resource)[0];
		this.context = resourcePath ? path.dirname(resourcePath) : null;
		this.fileDependencies = [];
		this.contextDependencies = [];
		this.warnings = [];
		this.errors = [];
		this.error = null;
		this._source = null;
	}
	module.exports = NormalModuleMixin;
	
	NormalModuleMixin.mixin = function(pt) {
		for(var name in NormalModuleMixin.prototype)
			pt[name] = NormalModuleMixin.prototype[name];
	};
	
	NormalModuleMixin.prototype.splitQuery = function splitQuery(req) {
		var i = req.indexOf("?");
		if(i < 0) return [req, ""];
		return [req.substr(0, i), req.substr(i)];
	};
	
	NormalModuleMixin.prototype.doBuild = function doBuild(options, moduleContext, resolver, fs, callback) {
		var splitQuery = this.splitQuery.bind(this);
		var module = this;
		this.cacheable = true;
	
		// Prepare context
		var loaders = [];
		function addLoaderToList(loader) {
			var l = splitQuery(loader);
			loaders.push({
				request: loader,
				path: l[0],
				query: l[1],
				module: null
			});
		}
		this.loaders.forEach(addLoaderToList);
		var loaderContextCacheable;
		var loaderContext = {
			version: 1,
			context: this.context,
			loaders: loaders,
			loaderIndex: 0,
			resource: this.resource,
			resourcePath: splitQuery(this.resource)[0],
			resourceQuery: this.resource ? splitQuery(this.resource)[1] || null : undefined,
			emitWarning: function(warning) {
				this.warnings.push(new ModuleWarning(this, warning));
			}.bind(this),
			emitError: function(error) {
				this.errors.push(new ModuleError(this, error));
			}.bind(this),
			exec: function(code, filename) {
				if(false) {
					// TODO: check if in enhanced-require
					var Module = require("module");
					var m = new Module(filename, module);
					m.paths = Module._nodeModulePaths(loaderContext.context);
					m.filename = filename;
					m._compile(code, filename);
					return m.exports;
				} else {
					throw new Error("loaderContext.exec is not supported");
				}
			},
			resolve: function(context, request, callback) {
				resolver.resolve(context, request, callback);
			},
			resolveSync: function(context, request) {
				return resolver.resolveSync(context, request);
			},
			cacheable: function(flag) {
				loaderContextCacheable = flag !== false;
			},
			dependency: function(file) {
				this.fileDependencies.push(file);
			}.bind(this),
			addDependency: function(file) {
				this.fileDependencies.push(file);
			}.bind(this),
			addContextDependency: function(context) {
				this.contextDependencies.push(context);
			}.bind(this),
			clearDependencies: function() {
				this.fileDependencies.length = 0;
				this.contextDependencies.length = 0;
				module.cacheable = true;
			}.bind(this),
			inputValue: undefined,
			value: null,
			options: options,
			debug: options.debug
		};
		this.fillLoaderContext(loaderContext, options, moduleContext);
		if(options.loader) for(var key in options.loader)
			loaderContext[key] = options.loader[key];
	
	
		function runSyncOrAsync(fn, context, args, callback) {
			var isSync = true;
			var isDone = false;
			var isError = false; // internal error
			var reportedError = false;
			if(!context.async) context.async = function async() {
				if(isDone) {
					if(reportedError) return; // ignore
					throw new Error("async(): The callback was already called.");
				}
				isSync = false;
				return context.callback;
			};
			context.callback = function() {
				if(isDone) {
					if(reportedError) return; // ignore
					throw new Error("callback(): The callback was already called.");
				}
				isDone = true;
				isSync = false;
				try {
					callback.apply(null, arguments);
				} catch(e) {
					isError = true;
					throw e;
				}
			};
			try {
				var result = (function WEBPACK_CORE_LOADER_EXECUTION() { return fn.apply(context, args) }());
				if(isSync) {
					isDone = true;
					if(result === undefined)
						return callback();
					return callback(null, result);
				}
			} catch(e) {
				if(isError) throw e;
				if(isDone) {
					// loader is already "done", so we cannot use the callback function
					// for better debugging we print the error on the console
					if(typeof e === "object" && e.stack) console.error(e.stack);
					else console.error(e);
					return;
				}
				isDone = true;
				reportedError = true;
				callback(e);
			}
	
		}
	
		// Load and pitch loaders
		(function loadPitch() {
			var l = loaderContext.loaders[loaderContext.loaderIndex];
			if(!l) {
				return onLoadPitchDone.call(this);
			}
			if(l.module) {
				loaderContext.loaderIndex++;
				return loadPitch.call(this);
			}
			if(false) {
				if(require.supportQuery) {
					l.module = require(l.request);
				} else {
					try {
						l.module = require(l.path);
					} catch (e) {
						// it is possible for node to choke on a require if the FD descriptor
						// limit has been reached. give it a chance to recover.
						if (e instanceof Error && e.code === 'EMFILE') {
							if (typeof setImmediate === 'function') {
								// node >= 0.9.0
								return setImmediate(loadPitch.bind(this));
							} else  {
								// node < 0.9.0
								return process.nextTick(loadPitch.bind(this));
							}
						}
						return callback(e)
					}
				}
			} else if(typeof __webpack_require_loader__ === "function") {
				l.module = __webpack_require_loader__(l.request);
			} else {
				return callback(new Error("Cannot load loader, __webpack_require_loader__ not provided."));
			}
			if(typeof l.module !== "function")
				return callback(new Error("Loader " + l.request + " didn't return a function"));
			var pitchedLoaders = [];
			var remaining = [];
			for(var i = 0; i < loaderContext.loaderIndex; i++)
				pitchedLoaders.push(loaderContext.loaders[i].request);
			for(i = loaderContext.loaderIndex + 1; i < loaderContext.loaders.length; i++)
				remaining.push(loaderContext.loaders[i].request);
			remaining.push(loaderContext.resource);
			if(typeof l.module.pitch !== "function") return loadPitch.call(this);
			loaderContextCacheable = false;
			var privateLoaderContext = Object.create(loaderContext);
			privateLoaderContext.query = l.query;
			runSyncOrAsync(l.module.pitch, privateLoaderContext, [remaining.join("!"), pitchedLoaders.join("!"), l.data = {}], function(err) {
				if(err) return onModuleBuildFailed.call(this, err);
				if(!loaderContextCacheable) this.cacheable = false;
				var args = Array.prototype.slice.call(arguments, 1);
				loaderContext.resourcePath = privateLoaderContext.resourcePath;
				loaderContext.resourceQuery = privateLoaderContext.resourceQuery;
				loaderContext.resource = privateLoaderContext.resource;
				loaderContext.loaderIndex = privateLoaderContext.loaderIndex;
				if(args.length > 0) {
					nextLoader.apply(this, [null].concat(args));
				} else {
					loadPitch.call(this);
				}
			}.bind(this));
		}.call(this));
	
		var resourceBuffer;
		function onLoadPitchDone() {
			loaderContext.loaderIndex = loaderContext.loaders.length;
			var request = [];
			for(var i = 0; i < loaderContext.loaders.length; i++)
				request.push(loaderContext.loaders[i].request);
			request.push(loaderContext.resource);
			loaderContext.request = request.join("!");
			var resourcePath = loaderContext.resourcePath;
			loaderContextCacheable = true;
			if(resourcePath) {
				loaderContext.addDependency(resourcePath);
				fs.readFile(resourcePath, function(err, buffer) {
					if(err) return nextLoader(err);
					if(module.lineToLine)
						resourceBuffer = buffer;
					nextLoader(null, buffer);
				});
			} else
				nextLoader(null, null);
		}
	
		function nextLoader(err/*, paramBuffer1, param2, ...*/) {
			if(!loaderContextCacheable) module.cacheable = false;
			var args = Array.prototype.slice.call(arguments, 1);
			if(err) {
				// a loader emitted an error
				return onModuleBuildFailed.call(module, err);
			}
			if(loaderContext.loaderIndex === 0) {
				if(Buffer.isBuffer(args[0]))
					args[0] = utf8BufferToString(args[0]);
				return onModuleBuild.apply(module, args);
			}
			loaderContext.loaderIndex--;
			var l = loaderContext.loaders[loaderContext.loaderIndex];
			if(!l.module) return nextLoader.apply(null, [null].concat(args));
			var privateLoaderContext = Object.create(loaderContext);
			privateLoaderContext.data = l.data;
			privateLoaderContext.inputValue = loaderContext.inputValue;
			privateLoaderContext.query = l.query;
			if(!l.module.raw && Buffer.isBuffer(args[0])) {
				args[0] = utf8BufferToString(args[0]);
			} else if(l.module.raw && typeof args[0] === "string") {
				args[0] = new Buffer(args[0], "utf-8");
			}
			loaderContextCacheable = false;
			runSyncOrAsync(l.module, privateLoaderContext, args, function() {
				loaderContext.inputValue = privateLoaderContext.value;
				nextLoader.apply(null, arguments);
			});
		}
	
	
		function onModuleBuild(source, sourceMap) {
			if(!Buffer.isBuffer(source) && typeof source !== "string")
				return onModuleBuildFailed.call(this, new Error("Final loader didn't return a Buffer or String"));
			if(this.identifier && this.lineToLine && resourceBuffer) {
				this._source = new LineToLineMappedSource(source, this.identifier(),
					resourceBuffer.toString("utf-8"));
			} else if(this.identifier && this.useSourceMap && sourceMap) {
				this._source = new SourceMapSource(source, this.identifier(), sourceMap);
			} else if(this.identifier) {
				this._source = new OriginalSource(source, this.identifier());
			} else {
				this._source = new RawSource(source);
			}
			return callback();
		}
	
		function onModuleBuildFailed(err) {
			this.error = err;
			return callback(new ModuleBuildError(this, err));
		}
	};
	
	NormalModuleMixin.prototype.fillLoaderContext = function fillLoaderContext() {};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceMapConsumer = __webpack_require__(20).SourceMapConsumer;
	var SourceMapGenerator = __webpack_require__(20).SourceMapGenerator;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(31).fromStringWithSourceMap;
	var Source = __webpack_require__(19);
	
	function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._sourceMap = sourceMap;
		this._originalSource = originalSource;
		this._innerSourceMap = innerSourceMap;
	}
	module.exports = SourceMapSource;
	
	SourceMapSource.prototype = Object.create(Source.prototype);
	SourceMapSource.prototype.constructor = SourceMapSource;
	
	SourceMapSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(39)(SourceMapSource.prototype);
	
	SourceMapSource.prototype.node = function(options) {
		var innerSourceMap = this._innerSourceMap;
		var sourceMap = this._sourceMap;
		if(innerSourceMap) {
			innerSourceMap = new SourceMapConsumer(innerSourceMap);
			sourceMap = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));
			sourceMap.setSourceContent(this._name, this._originalSource);
			sourceMap.applySourceMap(innerSourceMap, this._name);
			sourceMap = sourceMap.toJSON();
		}
		return SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));
	};
	
	SourceMapSource.prototype.listMap = function(options) {
		if(options.module === false)
			return new SourceListMap(this._value, this._name, this._value);
		return fromStringWithSourceMap(this._value, typeof this._sourceMap === "string" ? JSON.parse(this._sourceMap) : this._sourceMap);
	};
	
	SourceMapSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		if(this._originalSource)
			hash.update(this._originalSource);
	};


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(20).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(19);
	
	function LineToLineMappedSource(value, name, originalSource) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._originalSource = originalSource;
	}
	
	module.exports = LineToLineMappedSource;
	
	LineToLineMappedSource.prototype = Object.create(Source.prototype);
	LineToLineMappedSource.prototype.constructor = LineToLineMappedSource;
	
	LineToLineMappedSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(39)(LineToLineMappedSource.prototype);
	
	LineToLineMappedSource.prototype.node = function(options) {
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				return new SourceNode(idx+1, 0, name,
					(line + (idx != lines.length-1 ? "\n" : ""))
				);
			})
		);
		node.setSourceContent(name, this._originalSource);
		return node;
	};
	
	LineToLineMappedSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._originalSource)
	};
	
	LineToLineMappedSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		hash.update(this._originalSource);
	};


/***/ },
/* 72 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var loaderFlag = "WEBPACK_CORE_LOADER_EXECUTION";
	function ModuleBuildError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleBuildError);
		this.name = "ModuleBuildError";
		this.message = "Module build failed: ";
		if(err !== null && typeof err === "object") {
			if(typeof err.stack === "string" && err.stack) {
				var stack = err.stack.split("\n");
				for(var i = 0; i < stack.length; i++)
					if(stack[i].indexOf(loaderFlag) >= 0)
						stack.length = i;
				stack = stack.join("\n");
				if(!err.hideStack) {
					this.message += stack;
				} else {
					this.details = stack;
					if(typeof err.message === "string" && err.message) {
						this.message += err.message;
					} else {
						this.message += err;
					}
				}
			} else if(typeof err.message === "string" && err.message) {
				this.message += err.message;
			} else {
				this.message += err;
			}
		}
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleBuildError;
	
	ModuleBuildError.prototype = Object.create(Error.prototype);


/***/ },
/* 73 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleError(module, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleError);
		this.name = "ModuleError";
		this.module = module;
		this.message = err;
		this.error = err;
	}
	module.exports = ModuleError;
	
	ModuleError.prototype = Object.create(Error.prototype);


/***/ },
/* 74 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleWarning(module, warning) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleWarning);
		this.name = "ModuleWarning";
		this.module = module;
		this.message = warning;
		this.warning = warning;
	}
	module.exports = ModuleWarning;
	
	ModuleWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 75 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleParseError(module, source, err) {
		Error.call(this);
		Error.captureStackTrace(this, ModuleParseError);
		this.name = "ModuleParseError";
		this.message = "Module parse failed: " + module.request + " " + err.message;
		this.message += "\nYou may need an appropriate loader to handle this file type.";
		if(typeof err.lineNumber === "number") {
			if(/[\0\u0001\u0002\u0003\u0004\u0005\u0006\u0007]/.test(source)) { // binary file
				this.message += "\n(Source code omitted for this binary file)";
			} else {
				source = source.split("\n");
				this.message += "\n| " + source.slice(Math.max(0, err.lineNumber - 3), err.lineNumber + 2).join("\n| ");
			}
		} else {
			this.message += "\n" + err.stack;
		}
		this.module = module;
		this.error = err;
	}
	module.exports = ModuleParseError;
	
	ModuleParseError.prototype = Object.create(Error.prototype);


/***/ },
/* 76 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function TemplateArgumentDependency(name, dep) {
		this.name = name;
		this.dep = dep;
	}
	module.exports = TemplateArgumentDependency;
	
	TemplateArgumentDependency.prototype.constructor = TemplateArgumentDependency;
	TemplateArgumentDependency.prototype.type = "template argument";
	
	TemplateArgumentDependency.prototype.updateHash = function(hash) {
		hash.update(this.name);
	};
	
	TemplateArgumentDependency.Template = function TemplateArgumentDependencyTemplate() {};
	
	TemplateArgumentDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener, dependencyTemplates) {
		var d = dep.dep;
		var template = dependencyTemplates.get(d.constructor);
		if(!template) throw new Error("No template for dependency: " + d.constructor.name);
		if(!template.applyAsTemplateArgument) throw new Error("Template cannot be applied as TemplateArgument: " + d.constructor.name);
		return template.applyAsTemplateArgument(dep.name, d, source, outputOptions, requestShortener, dependencyTemplates);
	};


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DependenciesBlock = __webpack_require__(16);
	
	function AsyncDependenciesBlock(name, module, loc) {
		DependenciesBlock.call(this);
		this.chunkName = name;
		this.chunks = null;
		this.module = module;
		this.loc = loc;
	
		Object.defineProperty(this, "chunk", {
			get: function() {
				throw new Error("`chunk` was been renamed to `chunks` and is now an array");
			},
			set: function() {
				throw new Error("`chunk` was been renamed to `chunks` and is now an array");
			}
		});
	
	}
	module.exports = AsyncDependenciesBlock;
	
	AsyncDependenciesBlock.prototype = Object.create(DependenciesBlock.prototype);
	
	AsyncDependenciesBlock.prototype.updateHash = function updateHash(hash) {
		hash.update(this.chunkName || "");
		hash.update(this.chunks && this.chunks.map(function(chunk) {
			return typeof chunk.id === "number" ? chunk.id : "";
		}).join(",") || "");
		DependenciesBlock.prototype.updateHash.call(this, hash);
	};
	
	AsyncDependenciesBlock.prototype.disconnect = function() {
		this.chunks = null;
		DependenciesBlock.prototype.disconnect.call(this);
	};


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(15);
	var OriginalSource = __webpack_require__(50);
	var RawSource = __webpack_require__(40);
	
	function RawModule(source, identifier, readableIdentifier) {
		Module.call(this);
		this.sourceStr = source;
		this.identifierStr = identifier || this.sourceStr;
		this.readableIdentifierStr = readableIdentifier || this.identifierStr;
		this.cacheable = true;
		this.built = false;
	}
	module.exports = RawModule;
	
	RawModule.prototype = Object.create(Module.prototype);
	
	RawModule.prototype.identifier = function() {
		return this.identifierStr;
	};
	
	RawModule.prototype.readableIdentifier = function(requestShortener) {
		return requestShortener.shorten(this.readableIdentifierStr);
	};
	
	RawModule.prototype.needRebuild = function() {
		return false;
	};
	
	RawModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.builtTime = new Date().getTime();
		callback();
	};
	
	RawModule.prototype.source = function() {
		if(this.useSourceMap)
			return new OriginalSource(this.sourceStr, this.identifier());
		else
			return new RawSource(this.sourceStr);
	};
	
	RawModule.prototype.size = function() {
		return this.sourceStr.length;
	};
	
	RawModule.prototype.getSourceHash = function() {
		var hash = __webpack_require__(59).createHash("md5");
		hash.update(this.sourceStr);
		return hash.digest("hex");
	};
	
	RawModule.prototype.getAllModuleDependencies = function() {
		return [];
	};
	
	RawModule.prototype.createTemplate = function() {
		return new RawModule(this.sourceStr, "template of " + this.id);
	};
	
	RawModule.prototype.getTemplateArguments = function() {
		return [];
	};


/***/ },
/* 79 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LoadersList(list) {
		this.list = list || [];
		this.list.forEach(function(element) {
			if(element === null || typeof element !== "object")
				throw new Error("Each element of the loaders list must be an object or array");
		});
	}
	module.exports = LoadersList;
	
	function regExpAsMatcher(regExp) {
		return function(str) {
			return regExp.test(str);
		}
	}
	
	function asMatcher(test) {
		if(typeof test === "string") {
			return regExpAsMatcher(new RegExp("^"+test.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&")));
		} else if(typeof test === "function") {
			return test;
		} else if(test instanceof RegExp) {
			return regExpAsMatcher(test);
		} else if(Array.isArray(test)) {
			var matchers = test.map(function(item) {
				if(Array.isArray(item)) {
					var matchers = item.map(asMatcher);
					return function(str) {
						return matchers.every(function(matcher) {
							return matcher(str);
						});
					};
				} else {
					return asMatcher(item);
				}
			});
			return function(str) {
				for(var i = 0; i < test.length; i++) {
					if(matchers[i](str))
						return true;
				}
				return false;
			};
		} else {
			throw new Error(test + " is not a valid test");
		}
	}
	
	function getLoadersFromObject(element) {
		if(element.query) {
			if(!element.loader || element.loader.indexOf("!") >= 0) throw new Error("Cannot define 'query' and multiple loaders in loaders list");
			if(typeof element.query === "string") return [element.loader + "?" + element.query];
			return [element.loader + "?" + JSON.stringify(element.query)];
		}
		if(element.loader) return element.loader.split("!");
		if(element.loaders) return element.loaders;
		throw new Error("Element from loaders list should have one of the fields 'loader' or 'loaders'");
	}
	
	LoadersList.prototype.matchPart = function matchPart(str, test) {
		if(!test) return true;
		var matcher = asMatcher(test);
		return matcher(str);
	};
	
	LoadersList.prototype.match = function match(str) {
		return this.list.map(function(element) {
			if(Array.isArray(element)) {
				for(var i = 0; i < element.length; i++) {
					if(this.matchObject(str, element[i]))
						return getLoadersFromObject(element[i]);
				}
			} else {
				if(this.matchObject(str, element))
					return getLoadersFromObject(element);
			}
		}, this).filter(Boolean).reduce(function(array, r) {
			r.forEach(function(r) {
				array.push(r);
			});
			return array;
		}, []) || [];
	};
	
	LoadersList.prototype.matchObject = function matchObject(str, obj) {
		if(obj.test)
			if(!this.matchPart(str, obj.test)) return false;
		if(obj.include)
			if(!this.matchPart(str, obj.include)) return false;
		if(obj.exclude)
			if(this.matchPart(str, obj.exclude)) return false;
		return true;
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(10);
	var path = __webpack_require__(4);
	
	var Tapable = __webpack_require__(8);
	var ContextModule = __webpack_require__(81);
	var ContextElementDependency = __webpack_require__(82);
	
	function ContextModuleFactory(resolvers) {
		Tapable.call(this);
		this.resolvers = resolvers;
	}
	module.exports = ContextModuleFactory;
	
	ContextModuleFactory.prototype = Object.create(Tapable.prototype);
	ContextModuleFactory.prototype.constructor = ContextModuleFactory;
	
	ContextModuleFactory.prototype.create = function(context, dependency, callback) {
		this.applyPluginsAsyncWaterfall("before-resolve", {
			context: context,
			request: dependency.request,
			recursive: dependency.recursive,
			regExp: dependency.regExp
		}, function(err, result) {
			if(err) return callback(err);
	
			// Ignored
			if(!result) return callback();
	
			var context = result.context;
			var request = result.request;
			var recursive = result.recursive;
			var regExp = result.regExp;
	
			var loaders, resource, loadersPrefix = "";
			var idx = request.lastIndexOf("!");
			if(idx >= 0) {
				loaders = request.substr(0, idx + 1);
				for(var i = 0; i < loaders.length && loaders[i] === "!"; i++) {
					loadersPrefix += "!";
				}
				loaders = loaders.substr(i).replace(/!+$/, "").replace(/!!+/g, "!");
				if(loaders === "") loaders = [];
				else loaders = loaders.split("!");
				resource = request.substr(idx + 1);
			} else {
				loaders = [];
				resource = request;
			}
	
			async.parallel([
				this.resolvers.context.resolve.bind(this.resolvers.context, context, resource),
				async.map.bind(async, loaders, this.resolvers.loader.resolve.bind(this.resolvers.loader, context))
			], function(err, result) {
				if(err) return callback(err);
	
				this.applyPluginsAsyncWaterfall("after-resolve", {
					loaders: loadersPrefix + result[1].join("!") + (result[1].length > 0 ? "!" : ""),
					resource: result[0],
					recursive: recursive,
					regExp: regExp,
					resolveDependencies: this.resolveDependencies.bind(this)
				}, function(err, result) {
					if(err) return callback(err);
	
					// Ignored
					if(!result) return callback();
	
					return callback(null, new ContextModule(result.resolveDependencies, result.resource, result.recursive, result.regExp, result.loaders));
				});
			}.bind(this));
		}.bind(this));
	};
	
	ContextModuleFactory.prototype.resolveDependencies = function resolveDependencies(fs, resource, recursive, regExp, callback) {
		(function addDirectory(directory, callback) {
			fs.readdir(directory, function(err, files) {
				if(err) return callback(err);
				if(!files || files.length === 0) return callback(null, []);
				async.map(files.filter(function(p) {
					return p.indexOf(".") !== 0;
				}), function(seqment, callback) {
	
					var subResource = path.join(directory, seqment);
	
					fs.stat(subResource, function(err, stat) {
						if(err) return callback(err);
	
						if(stat.isDirectory()) {
	
							if(!recursive) return callback();
							addDirectory.call(this, subResource, callback);
	
						} else if(stat.isFile()) {
	
							var obj = {
								context: resource,
								request: "." + subResource.substr(resource.length).replace(/\\/g, "/")
							};
							this.applyPluginsAsyncWaterfall("alternatives", [obj], function(err, alternatives) {
								if(err) return callback(err);
								alternatives = alternatives.filter(function(obj) {
									return regExp.test(obj.request);
								}).map(function(obj) {
									var dep = new ContextElementDependency(obj.request);
									dep.optional = true;
									return dep;
								});
								callback(null, alternatives);
							});
	
						} else callback();
	
					}.bind(this));
	
				}.bind(this), function(err, result) {
					if(err) return callback(err);
	
					if(!result) return callback(null, []);
	
					callback(null, result.filter(function(i) {
						return !!i;
					}).reduce(function(a, i) {
						return a.concat(i);
					}, []));
				});
			}.bind(this));
		}.call(this, resource, callback));
	};


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(15);
	var OriginalSource = __webpack_require__(50);
	var RawSource = __webpack_require__(40);
	
	function ContextModule(resolveDependencies, context, recursive, regExp, addon) {
		Module.call(this);
		this.resolveDependencies = resolveDependencies;
		this.context = context;
		this.recursive = recursive;
		this.regExp = regExp;
		this.addon = addon;
		this.cacheable = true;
		this.contextDependencies = [context];
		this.built = false;
	}
	module.exports = ContextModule;
	
	ContextModule.prototype = Object.create(Module.prototype);
	
	ContextModule.prototype.identifier = function() {
		var identifier = "";
		identifier += this.context + " ";
		if(!this.recursive)
			identifier += "nonrecursive ";
		if(this.addon)
			identifier += this.addon;
		if(this.regExp)
			identifier += this.regExp;
		return identifier.replace(/ $/, "");
	};
	
	function prettyRegExp(str) {
		return str.substring(1, str.length - 1);
	}
	
	ContextModule.prototype.readableIdentifier = function(requestShortener) {
		var identifier = "";
		identifier += requestShortener.shorten(this.context) + " ";
		if(!this.recursive)
			identifier += "nonrecursive ";
		if(this.addon)
			identifier += requestShortener.shorten(this.addon);
		if(this.regExp)
			identifier += prettyRegExp(this.regExp + "");
		return identifier.replace(/ $/, "");
	};
	
	ContextModule.prototype.needRebuild = function(fileTimestamps, contextTimestamps) {
		var ts = contextTimestamps[this.context];
		if(!ts) return true;
		return ts >= this.builtTime;
	};
	
	ContextModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};
	
	ContextModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.built = true;
		this.builtTime = new Date().getTime();
		var addon = this.addon;
		this.resolveDependencies(fs, this.context, this.recursive, this.regExp, function(err, dependencies) {
			if(err) return callback(err);
			if(dependencies) {
				dependencies.forEach(function(dep) {
					dep.loc = dep.userRequest;
					dep.request = addon + dep.request;
				});
			}
			this.dependencies = dependencies;
			callback();
		}.bind(this));
	};
	
	ContextModule.prototype.source = function() {
		var str;
		if(this.dependencies && this.dependencies.length > 0) {
			var map = {};
			this.dependencies.slice().sort(function(a, b) {
				if(a.userRequest === b.userRequest) return 0;
				return a.userRequest < b.userRequest ? -1 : 1;
			}).forEach(function(dep) {
				if(dep.module)
					map[dep.userRequest] = dep.module.id;
			});
			str = [
				"var map = ", JSON.stringify(map, null, "\t"), ";\n",
				"function webpackContext(req) {\n",
				"\treturn __webpack_require__(webpackContextResolve(req));\n",
				"};\n",
				"function webpackContextResolve(req) {\n",
				"\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n",
				"};\n",
				"webpackContext.keys = function webpackContextKeys() {\n",
				"\treturn Object.keys(map);\n",
				"};\n",
				"webpackContext.resolve = webpackContextResolve;\n",
				"module.exports = webpackContext;\n",
				"webpackContext.id = " + this.id + ";\n"
			];
		} else {
			str = [
				"function webpackContext(req) {\n",
				"\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n",
				"}\n",
				"webpackContext.keys = function() { return []; };\n",
				"webpackContext.resolve = webpackContext;\n",
				"module.exports = webpackContext;\n",
				"webpackContext.id = " + this.id + ";\n"
			];
		}
		if(this.useSourceMap) {
			return new OriginalSource(str.join(""), this.identifier());
		} else {
			return new RawSource(str.join(""));
		}
	};
	
	ContextModule.prototype.size = function() {
		return this.dependencies.map(function(dep) {
			return dep.userRequest.length + 5;
		}).reduce(function(a, b) {
			return a + b;
		}, 160);
	};


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function ContextElementDependency(request, userRequest) {
		ModuleDependency.call(this, request);
		if(userRequest) {
			this.userRequest = userRequest;
		}
	}
	module.exports = ContextElementDependency;
	
	ContextElementDependency.prototype = Object.create(ModuleDependency.prototype);
	ContextElementDependency.prototype.constructor = ContextElementDependency;
	ContextElementDependency.prototype.type = "context element";


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(56);
	
	function ModuleDependency(request) {
		Dependency.call(this);
		this.request = request;
		this.userRequest = request;
	}
	module.exports = ModuleDependency;
	
	ModuleDependency.prototype = Object.create(Dependency.prototype);
	ModuleDependency.prototype.constructor = ModuleDependency;
	ModuleDependency.prototype.isEqualResource = function isEqualResource(other) {
		if(!(other instanceof ModuleDependency))
			return false;
		return this.request === other.request;
	};


/***/ },
/* 84 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function WebEnvironmentPlugin(inputFileSystem, outputFileSystem) {
		this.inputFileSystem = inputFileSystem;
		this.outputFileSystem = outputFileSystem;
	}
	module.exports = WebEnvironmentPlugin;
	WebEnvironmentPlugin.prototype.apply = function(compiler) {
		var inputFileSystem = compiler.inputFileSystem = this.inputFileSystem;
		compiler.resolvers.normal.fileSystem = inputFileSystem;
		compiler.resolvers.context.fileSystem = inputFileSystem;
		compiler.resolvers.loader.fileSystem = inputFileSystem;
		compiler.outputFileSystem = this.outputFileSystem;
	};


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var OptionsApply = __webpack_require__(86);
	
	var LoaderTargetPlugin = __webpack_require__(87);
	var FunctionModulePlugin = __webpack_require__(88);
	var EvalDevToolModulePlugin = __webpack_require__(90);
	var SourceMapDevToolPlugin = __webpack_require__(93);
	var EvalSourceMapDevToolPlugin = __webpack_require__(95);
	
	var EntryOptionPlugin = __webpack_require__(97);
	var RecordIdsPlugin = __webpack_require__(104);
	
	var APIPlugin = __webpack_require__(105);
	var ConstPlugin = __webpack_require__(109);
	var RequireJsStuffPlugin = __webpack_require__(110);
	var NodeStuffPlugin = __webpack_require__(111);
	var CompatibilityPlugin = __webpack_require__(114);
	var DefinePlugin = __webpack_require__(116);
	
	var MovedToPluginWarningPlugin = __webpack_require__(117);
	var TemplatedPathPlugin = __webpack_require__(118);
	var WarnCaseSensitiveModulesPlugin = __webpack_require__(119);
	
	var LoaderPlugin = __webpack_require__(121);
	var CommonJsPlugin = __webpack_require__(123);
	var AMDPlugin = __webpack_require__(141);
	var RequireContextPlugin = __webpack_require__(153);
	var RequireEnsurePlugin = __webpack_require__(157);
	var RequireIncludePlugin = __webpack_require__(163);
	
	var RemoveParentModulesPlugin = __webpack_require__(166);
	var RemoveEmptyChunksPlugin = __webpack_require__(167);
	var MergeDuplicateChunksPlugin = __webpack_require__(168);
	var FlagIncludedChunksPlugin = __webpack_require__(169);
	
	var UnsafeCachePlugin = __webpack_require__(170);
	var ModulesInDirectoriesPlugin = __webpack_require__(171);
	var ModulesInRootPlugin = __webpack_require__(173);
	var ModuleTemplatesPlugin = __webpack_require__(174);
	var ModuleAsFilePlugin = __webpack_require__(175);
	var ModuleAsDirectoryPlugin = __webpack_require__(176);
	var ModuleAliasPlugin = __webpack_require__(115);
	var DirectoryDefaultFilePlugin = __webpack_require__(177);
	var DirectoryDescriptionFilePlugin = __webpack_require__(178);
	var DirectoryDescriptionFileFieldAliasPlugin = __webpack_require__(179);
	var FileAppendPlugin = __webpack_require__(180);
	var DirectoryResultPlugin = __webpack_require__(181);
	var ResultSymlinkPlugin = __webpack_require__(182);
	
	function WebpackOptionsApply() {
		OptionsApply.call(this);
	}
	module.exports = WebpackOptionsApply;
	
	WebpackOptionsApply.prototype = Object.create(OptionsApply.prototype);
	WebpackOptionsApply.prototype.process = function(options, compiler) {
		compiler.context = options.context;
		if(options.plugins && Array.isArray(options.plugins)) {
			compiler.apply.apply(compiler, options.plugins);
		}
		compiler.outputPath = options.output.path;
		compiler.recordsInputPath = options.recordsInputPath || options.recordsPath;
		compiler.recordsOutputPath = options.recordsOutputPath || options.recordsPath;
		compiler.name = options.name;
		if(typeof options.target === "string") {
			switch(options.target) {
				case "web":
					var JsonpTemplatePlugin = __webpack_require__(183);
					var NodeSourcePlugin = __webpack_require__(188);
					compiler.apply(
						new JsonpTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeSourcePlugin(options.node),
						new LoaderTargetPlugin("web")
					);
					break;
				case "webworker":
					var WebWorkerTemplatePlugin = __webpack_require__(200);
					var NodeSourcePlugin = __webpack_require__(188);
					compiler.apply(
						new WebWorkerTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeSourcePlugin(options.node),
						new LoaderTargetPlugin("webworker")
					);
					break;
				case "node":
				case "async-node":
					var NodeTemplatePlugin = __webpack_require__(203);
					var NodeTargetPlugin = __webpack_require__(303);
					compiler.apply(
						new NodeTemplatePlugin(options.output, options.target === "async-node"),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new LoaderTargetPlugin("node")
					);
					break;
				case "node-webkit":
					var JsonpTemplatePlugin = __webpack_require__(183);
					var NodeTargetPlugin = __webpack_require__(303);
					var ExternalsPlugin = __webpack_require__(304);
					compiler.apply(
						new JsonpTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new ExternalsPlugin("commonjs", "nw.gui"),
						new LoaderTargetPlugin("node-webkit")
					);
					break;
				case "atom":
				case "electron":
				case "electron-main":
					var NodeTemplatePlugin = __webpack_require__(203);
					var NodeTargetPlugin = __webpack_require__(303);
					var ExternalsPlugin = __webpack_require__(304);
					compiler.apply(
						new NodeTemplatePlugin(options.output, true),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new ExternalsPlugin("commonjs", [
							"app",
							"auto-updater",
							"browser-window",
							"content-tracing",
							"dialog",
							"electron",
							"global-shortcut",
							"ipc",
							"ipc-main",
							"menu",
							"menu-item",
							"power-monitor",
							"power-save-blocker",
							"protocol",
							"session",
							"web-contents",
							"tray",
							"clipboard",
							"crash-reporter",
							"native-image",
							"screen",
							"shell"
						]),
						new LoaderTargetPlugin(options.target)
					);
					break;
				case "electron-renderer":
					var JsonpTemplatePlugin = __webpack_require__(183);
					var NodeTargetPlugin = __webpack_require__(303);
					var ExternalsPlugin = __webpack_require__(304);
					compiler.apply(
						new JsonpTemplatePlugin(options.output),
						new FunctionModulePlugin(options.output),
						new NodeTargetPlugin(),
						new ExternalsPlugin("commonjs", [
							"desktop-capturer",
							"electron",
							"ipc",
							"ipc-renderer",
							"remote",
							"web-frame",
							"clipboard",
							"crash-reporter",
							"native-image",
							"screen",
							"shell"
						]),
						new LoaderTargetPlugin(options.target)
					);
					break;
				default:
					throw new Error("Unsupported target '" + options.target + "'.");
			}
		} else if(options.target !== false) {
			options.target(compiler);
		} else {
			throw new Error("Unsupported target '" + options.target + "'.");
		}
		if(options.output.library || options.output.libraryTarget !== "var") {
			var LibraryTemplatePlugin = __webpack_require__(308);
			compiler.apply(new LibraryTemplatePlugin(options.output.library, options.output.libraryTarget, options.output.umdNamedDefine));
		}
		if(options.externals) {
			var ExternalsPlugin = __webpack_require__(304);
			compiler.apply(new ExternalsPlugin(options.output.libraryTarget, options.externals));
		}
	
		if(options.hot) {
			compiler.apply(new MovedToPluginWarningPlugin("hot", "HotModuleReplacementPlugin"));
			var HotModuleReplacementPlugin = __webpack_require__(313);
			compiler.apply(new HotModuleReplacementPlugin(options.output));
		}
	
		if(options.devtool && (options.devtool.indexOf("sourcemap") >= 0 || options.devtool.indexOf("source-map") >= 0)) {
			var hidden = options.devtool.indexOf("hidden") >= 0;
			var inline = options.devtool.indexOf("inline") >= 0;
			var evalWrapped = options.devtool.indexOf("eval") >= 0;
			var cheap = options.devtool.indexOf("cheap") >= 0;
			var moduleMaps = options.devtool.indexOf("module") >= 0;
			var noSources = options.devtool.indexOf("nosources") >= 0;
			var legacy = options.devtool.indexOf("@") >= 0;
			var modern = options.devtool.indexOf("#") >= 0;
			var comment = legacy && modern ? "\n/*\n//@ sourceMappingURL=[url]\n//# sourceMappingURL=[url]\n*/" :
				legacy ? "\n/*\n//@ sourceMappingURL=[url]\n*/" :
				modern ? "\n//# sourceMappingURL=[url]" :
				null;
			var Plugin = evalWrapped ? EvalSourceMapDevToolPlugin : SourceMapDevToolPlugin;
			compiler.apply(new Plugin({
				filename: inline ? null : options.output.sourceMapFilename,
				moduleFilenameTemplate: options.output.devtoolModuleFilenameTemplate,
				fallbackModuleFilenameTemplate: options.output.devtoolFallbackModuleFilenameTemplate,
				append: hidden ? false : comment,
				module: moduleMaps ? true : cheap ? false : true,
				columns: cheap ? false : true,
				lineToLine: options.output.devtoolLineToLine,
				noSources: noSources,
			}));
		} else if(options.devtool && options.devtool.indexOf("eval") >= 0) {
			var legacy = options.devtool.indexOf("@") >= 0;
			var modern = options.devtool.indexOf("#") >= 0;
			var comment = legacy && modern ? "//@ sourceURL=[url]\n//# sourceURL=[url]" :
				legacy ? "//@ sourceURL=[url]" :
				modern ? "//# sourceURL=[url]" :
				null;
			compiler.apply(new EvalDevToolModulePlugin(comment, options.output.devtoolModuleFilenameTemplate));
		}
	
		compiler.apply(new EntryOptionPlugin());
		compiler.applyPluginsBailResult("entry-option", options.context, options.entry);
	
		if(options.prefetch) {
			compiler.apply(new MovedToPluginWarningPlugin("prefetch", "PrefetchPlugin"));
			var PrefetchPlugin = __webpack_require__(317);
			options.prefetch.map(function(request) {
				compiler.apply(new PrefetchPlugin(options.context, request));
			});
		}
		compiler.apply(
			new CompatibilityPlugin(),
			new LoaderPlugin(),
			new NodeStuffPlugin(options.node),
			new RequireJsStuffPlugin(),
			new APIPlugin(),
			new ConstPlugin(),
			new RequireIncludePlugin(),
			new RequireEnsurePlugin(),
			new RequireContextPlugin(options.resolve.modulesDirectories, options.resolve.extensions),
			new AMDPlugin(options.module, options.amd || {}),
			new CommonJsPlugin(options.module)
		);
	
		compiler.apply(
			new RemoveParentModulesPlugin(),
			new RemoveEmptyChunksPlugin(),
			new MergeDuplicateChunksPlugin(),
			new FlagIncludedChunksPlugin()
		);
	
		compiler.apply(new TemplatedPathPlugin());
	
		compiler.apply(new RecordIdsPlugin());
	
		compiler.apply(new WarnCaseSensitiveModulesPlugin());
	
		if(options.optimize && options.optimize.occurenceOrder) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.occurenceOrder", "optimize.OccurrenceOrderPlugin"));
			var OccurrenceOrderPlugin = __webpack_require__(319);
			compiler.apply(new OccurrenceOrderPlugin(options.optimize.occurenceOrderPreferEntry));
		}
	
		if(options.optimize && options.optimize.minChunkSize) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.minChunkSize", "optimize.MinChunkSizePlugin"));
			var MinChunkSizePlugin = __webpack_require__(320);
			compiler.apply(new MinChunkSizePlugin(options.optimize));
		}
	
		if(options.optimize && options.optimize.maxChunks) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.maxChunks", "optimize.LimitChunkCountPlugin"));
			var LimitChunkCountPlugin = __webpack_require__(321);
			compiler.apply(new LimitChunkCountPlugin(options.optimize));
		}
	
		if(options.optimize.minimize) {
			compiler.apply(new MovedToPluginWarningPlugin("optimize.minimize", "optimize.UglifyJsPlugin"));
			var UglifyJsPlugin = __webpack_require__(322);
			if(options.optimize.minimize === true)
				compiler.apply(new UglifyJsPlugin());
			else
				compiler.apply(new UglifyJsPlugin(options.optimize.minimize));
		}
	
		if(options.cache === undefined ? options.watch : options.cache) {
			var CachePlugin = __webpack_require__(336);
			compiler.apply(new CachePlugin(typeof options.cache === "object" ? options.cache : null));
		}
	
		if(typeof options.provide === "object") {
			compiler.apply(new MovedToPluginWarningPlugin("provide", "ProvidePlugin"));
			var ProvidePlugin = __webpack_require__(337);
			compiler.apply(new ProvidePlugin(options.provide));
		}
	
		if(options.define) {
			compiler.apply(new MovedToPluginWarningPlugin("define", "DefinePlugin"));
			var defineObject = {};
			if(typeof options.define === "object") {
				Object.keys(options.define).forEach(function(key) {
					defineObject[key] = options.define[key];
				});
			}
			compiler.apply(new DefinePlugin(defineObject));
		}
		if(options.defineDebug !== false)
			compiler.apply(new DefinePlugin({
				DEBUG: !!options.debug
			}));
	
		compiler.applyPlugins("after-plugins", compiler);
		compiler.resolvers.normal.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			options.resolve.packageAlias ? new DirectoryDescriptionFileFieldAliasPlugin("package.json", options.resolve.packageAlias) : function() {},
			new ModuleAliasPlugin(options.resolve.alias),
			makeRootPlugin("module", options.resolve.root),
			new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories),
			makeRootPlugin("module", options.resolve.fallback),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryDescriptionFilePlugin("package.json", options.resolve.packageMains),
			new DirectoryDefaultFilePlugin(["index"]),
			new FileAppendPlugin(options.resolve.extensions),
			new ResultSymlinkPlugin()
		);
		compiler.resolvers.context.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			new ModuleAliasPlugin(options.resolve.alias),
			makeRootPlugin("module", options.resolve.root),
			new ModulesInDirectoriesPlugin("module", options.resolve.modulesDirectories),
			makeRootPlugin("module", options.resolve.fallback),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryResultPlugin(),
			new ResultSymlinkPlugin()
		);
		compiler.resolvers.loader.apply(
			new UnsafeCachePlugin(options.resolve.unsafeCache),
			new ModuleAliasPlugin(options.resolveLoader.alias),
			makeRootPlugin("loader-module", options.resolveLoader.root),
			new ModulesInDirectoriesPlugin("loader-module", options.resolveLoader.modulesDirectories),
			makeRootPlugin("loader-module", options.resolveLoader.fallback),
			new ModuleTemplatesPlugin("loader-module", options.resolveLoader.moduleTemplates, "module"),
			new ModuleAsFilePlugin("module"),
			new ModuleAsDirectoryPlugin("module"),
			new DirectoryDescriptionFilePlugin("package.json", options.resolveLoader.packageMains),
			new DirectoryDefaultFilePlugin(["index"]),
			new FileAppendPlugin(options.resolveLoader.extensions),
			new ResultSymlinkPlugin()
		);
		compiler.applyPlugins("after-resolvers", compiler);
		return options;
	};
	
	function makeRootPlugin(name, root) {
		if(typeof root === "string")
			return new ModulesInRootPlugin(name, root);
		else if(Array.isArray(root)) {
			return function() {
				root.forEach(function(root) {
					this.apply(new ModulesInRootPlugin(name, root));
				}, this);
			};
		}
		return function() {};
	}


/***/ },
/* 86 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OptionsApply() {}
	module.exports = OptionsApply;
	
	OptionsApply.prototype.process = function( /* options, compiler */ ) {
	
	};


/***/ },
/* 87 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LoaderTargetPlugin(target) {
		this.target = target;
	}
	module.exports = LoaderTargetPlugin;
	LoaderTargetPlugin.prototype.apply = function(compiler) {
		var target = this.target;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("normal-module-loader", function(loaderContext) {
				loaderContext.target = target;
			});
		});
	};


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var FunctionModuleTemplatePlugin = __webpack_require__(89);
	var RequestShortener = __webpack_require__(46);
	
	function FunctionModulePlugin(options, requestShortener) {
		this.options = options;
		this.requestShortener = requestShortener;
	}
	module.exports = FunctionModulePlugin;
	FunctionModulePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.moduleTemplate.requestShortener = this.requestShortener || new RequestShortener(compiler.context);
			compilation.moduleTemplate.apply(new FunctionModuleTemplatePlugin());
		}.bind(this));
	};


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var PrefixSource = __webpack_require__(51);
	
	function FunctionModuleTemplatePlugin() {}
	module.exports = FunctionModuleTemplatePlugin;
	
	FunctionModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		moduleTemplate.plugin("render", function(moduleSource, module) {
			var source = new ConcatSource();
			var defaultArguments = ["module", "exports"];
			if((module.arguments && module.arguments.length !== 0) || module.hasDependencies()) {
				defaultArguments.push("__webpack_require__");
			}
			source.add("/***/ function(" + defaultArguments.concat(module.arguments || []).join(", ") + ") {\n\n");
			source.add(new PrefixSource(this.outputOptions.sourcePrefix, moduleSource));
			source.add("\n\n/***/ }");
			return source;
		});
		moduleTemplate.plugin("package", function(moduleSource, module) {
			if(this.outputOptions.pathinfo) {
				var source = new ConcatSource();
				var req = module.readableIdentifier(this.requestShortener);
				source.add("/*!****" + req.replace(/./g, "*") + "****!*\\\n");
				source.add("  !*** " + req.replace(/\*\//g, "*_/") + " ***!\n");
				source.add("  \\****" + req.replace(/./g, "*") + "****/\n");
				source.add(moduleSource);
				return source;
			}
			return moduleSource;
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("FunctionModuleTemplatePlugin");
			hash.update("2");
		});
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EvalDevToolModuleTemplatePlugin = __webpack_require__(91);
	
	function EvalDevToolModulePlugin(sourceUrlComment, moduleFilenameTemplate) {
		this.sourceUrlComment = sourceUrlComment;
		this.moduleFilenameTemplate = moduleFilenameTemplate;
	}
	module.exports = EvalDevToolModulePlugin;
	EvalDevToolModulePlugin.prototype.apply = function(compiler) {
		var self = this;
		compiler.plugin("compilation", function(compilation) {
			compilation.moduleTemplate.apply(new EvalDevToolModuleTemplatePlugin(self.sourceUrlComment, self.moduleFilenameTemplate));
		});
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(40);
	var ModuleFilenameHelpers = __webpack_require__(92);
	
	function EvalDevToolModuleTemplatePlugin(sourceUrlComment, moduleFilenameTemplate) {
		this.sourceUrlComment = sourceUrlComment || "//# sourceURL=[url]";
		this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resourcePath]?[loaders]";
	}
	module.exports = EvalDevToolModuleTemplatePlugin;
	
	EvalDevToolModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		var self = this;
		moduleTemplate.plugin("module", function(source, module) {
			var content = source.source();
			var str = ModuleFilenameHelpers.createFilename(module, self.moduleFilenameTemplate, this.requestShortener);
			var footer = ["\n",
				ModuleFilenameHelpers.createFooter(module, this.requestShortener),
				self.sourceUrlComment.replace(/\[url\]/g, encodeURI(str).replace(/%2F/g, "/").replace(/%20/g, "_").replace(/%5E/g, "^").replace(/%5C/g, "\\").replace(/^\//, ""))
			].join("\n");
			return new RawSource("eval(" + JSON.stringify(content + footer) + ");");
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("EvalDevToolModuleTemplatePlugin");
			hash.update("2");
		});
	};


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleFilenameHelpers = exports;
	
	ModuleFilenameHelpers.ALL_LOADERS_RESOURCE = "[all-loaders][resource]";
	ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE = /\[all-?loaders\]\[resource\]/gi;
	ModuleFilenameHelpers.LOADERS_RESOURCE = "[loaders][resource]";
	ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE = /\[loaders\]\[resource\]/gi;
	ModuleFilenameHelpers.RESOURCE = "[resource]";
	ModuleFilenameHelpers.REGEXP_RESOURCE = /\[resource\]/gi;
	ModuleFilenameHelpers.ABSOLUTE_RESOURCE_PATH = "[absolute-resource-path]";
	ModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH = /\[abs(olute)?-?resource-?path\]/gi;
	ModuleFilenameHelpers.RESOURCE_PATH = "[resource-path]";
	ModuleFilenameHelpers.REGEXP_RESOURCE_PATH = /\[resource-?path\]/gi;
	ModuleFilenameHelpers.ALL_LOADERS = "[all-loaders]";
	ModuleFilenameHelpers.REGEXP_ALL_LOADERS = /\[all-?loaders\]/gi;
	ModuleFilenameHelpers.LOADERS = "[loaders]";
	ModuleFilenameHelpers.REGEXP_LOADERS = /\[loaders\]/gi;
	ModuleFilenameHelpers.QUERY = "[query]";
	ModuleFilenameHelpers.REGEXP_QUERY = /\[query\]/gi;
	ModuleFilenameHelpers.ID = "[id]";
	ModuleFilenameHelpers.REGEXP_ID = /\[id\]/gi;
	ModuleFilenameHelpers.HASH = "[hash]";
	ModuleFilenameHelpers.REGEXP_HASH = /\[hash\]/gi;
	
	function getAfter(str, token) {
		var idx = str.indexOf(token);
		return idx < 0 ? "" : str.substr(idx);
	}
	
	function getBefore(str, token) {
		var idx = str.lastIndexOf(token);
		return idx < 0 ? "" : str.substr(0, idx);
	}
	
	function getHash(str) {
		var hash = __webpack_require__(59).createHash("md5");
		hash.update(str);
		return hash.digest("hex").substr(0, 4);
	}
	
	function asRegExp(test) {
		if(typeof test === "string") test = new RegExp("^" + test.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"));
		return test;
	}
	
	ModuleFilenameHelpers.createFilename = function createFilename(module, moduleFilenameTemplate, requestShortener) {
		if(!module) module = "";
		if(typeof module === "string") {
			var shortIdentifier = requestShortener.shorten(module);
			var identifier = shortIdentifier;
			var moduleId = "";
			var absoluteResourcePath = module.split("!").pop();
			var hash = getHash(identifier);
		} else {
			var shortIdentifier = module.readableIdentifier(requestShortener);
			var identifier = requestShortener.shorten(module.identifier());
			var moduleId = module.id;
			var absoluteResourcePath = module.resourcePath || module.identifier().split("!").pop();
			var hash = getHash(identifier);
		}
		var resource = shortIdentifier.split("!").pop();
		var loaders = getBefore(shortIdentifier, "!");
		var allLoaders = getBefore(identifier, "!");
		var query = getAfter(resource, "?");
		var resourcePath = resource.substr(0, resource.length - query.length);
		if(typeof moduleFilenameTemplate === "function") {
			return moduleFilenameTemplate({
				identifier: identifier,
				shortIdentifier: shortIdentifier,
				resource: resource,
				resourcePath: resourcePath,
				absoluteResourcePath: absoluteResourcePath,
				allLoaders: allLoaders,
				query: query,
				moduleId: moduleId,
				hash: hash
			});
		}
		return moduleFilenameTemplate
			.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS_RESOURCE, identifier)
			.replace(ModuleFilenameHelpers.REGEXP_LOADERS_RESOURCE, shortIdentifier)
			.replace(ModuleFilenameHelpers.REGEXP_RESOURCE, resource)
			.replace(ModuleFilenameHelpers.REGEXP_RESOURCE_PATH, resourcePath)
			.replace(ModuleFilenameHelpers.REGEXP_ABSOLUTE_RESOURCE_PATH, absoluteResourcePath)
			.replace(ModuleFilenameHelpers.REGEXP_ALL_LOADERS, allLoaders)
			.replace(ModuleFilenameHelpers.REGEXP_LOADERS, loaders)
			.replace(ModuleFilenameHelpers.REGEXP_QUERY, query)
			.replace(ModuleFilenameHelpers.REGEXP_ID, moduleId)
			.replace(ModuleFilenameHelpers.REGEXP_HASH, hash);
	};
	
	ModuleFilenameHelpers.createFooter = function createFooter(module, requestShortener) {
		if(!module) module = "";
		if(typeof module === "string") {
			return [
				"// WEBPACK FOOTER //",
				"// " + requestShortener.shorten(module)
			].join("\n");
		} else {
			return [
				"//////////////////",
				"// WEBPACK FOOTER",
				"// " + module.readableIdentifier(requestShortener),
				"// module id = " + module.id,
				"// module chunks = " + module.chunks.map(function(c) {
					return c.id;
				}).join(" ")
			].join("\n");
		}
	};
	
	ModuleFilenameHelpers.replaceDuplicates = function replaceDuplicates(array, fn, comparator) {
		var countMap = {};
		var posMap = {};
		array.forEach(function(item, idx) {
			countMap[item] = (countMap[item] || []);
			countMap[item].push(idx);
			posMap[item] = 0;
		});
		if(comparator) {
			Object.keys(countMap).forEach(function(item) {
				countMap[item].sort(comparator);
			});
		}
		return array.map(function(item, i) {
			if(countMap[item].length > 1) {
				if(comparator && countMap[item][0] === i)
					return item;
				return fn(item, i, posMap[item]++);
			} else return item;
		});
	};
	
	ModuleFilenameHelpers.matchPart = function matchPart(str, test) {
		if(!test) return true;
		test = asRegExp(test);
		if(Array.isArray(test)) {
			return test.map(asRegExp).filter(function(regExp) {
				return regExp.test(str);
			}).length > 0;
		} else {
			return test.test(str);
		}
	};
	
	ModuleFilenameHelpers.matchObject = function matchObject(obj, str) {
		if(obj.test)
			if(!ModuleFilenameHelpers.matchPart(str, obj.test)) return false;
		if(obj.include)
			if(!ModuleFilenameHelpers.matchPart(str, obj.include)) return false;
		if(obj.exclude)
			if(ModuleFilenameHelpers.matchPart(str, obj.exclude)) return false;
		return true;
	};


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var RequestShortener = __webpack_require__(46);
	var ConcatSource = __webpack_require__(49);
	var RawSource = __webpack_require__(40);
	var ModuleFilenameHelpers = __webpack_require__(92);
	var SourceMapDevToolModuleOptionsPlugin = __webpack_require__(94);
	
	function SourceMapDevToolPlugin(options, sourceMappingURLComment, moduleFilenameTemplate, fallbackModuleFilenameTemplate) {
		if(!options || typeof options !== "object") {
			this.sourceMapFilename = options;
			this.sourceMappingURLComment = sourceMappingURLComment === false ? false : sourceMappingURLComment || "\n//# sourceMappingURL=[url]";
			this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resourcePath]";
			this.fallbackModuleFilenameTemplate = fallbackModuleFilenameTemplate || "webpack:///[resourcePath]?[hash]";
			this.options = {};
		} else {
			this.sourceMapFilename = options.filename;
			this.sourceMappingURLComment = options.append === false ? false : options.append || "\n//# sourceMappingURL=[url]";
			this.moduleFilenameTemplate = options.moduleFilenameTemplate || "webpack:///[resourcePath]";
			this.fallbackModuleFilenameTemplate = options.fallbackModuleFilenameTemplate || "webpack:///[resourcePath]?[hash]";
			this.options = options;
		}
	}
	module.exports = SourceMapDevToolPlugin;
	SourceMapDevToolPlugin.prototype.apply = function(compiler) {
		var sourceMapFilename = this.sourceMapFilename;
		var sourceMappingURLComment = this.sourceMappingURLComment;
		var moduleFilenameTemplate = this.moduleFilenameTemplate;
		var fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;
		var requestShortener = new RequestShortener(compiler.context);
		var options = this.options;
		options.test = options.test || /\.(js|css)($|\?)/i;
		compiler.plugin("compilation", function(compilation) {
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
			compilation.plugin("after-optimize-chunk-assets", function(chunks) {
				var allModules = [];
				var allModuleFilenames = [];
				var tasks = [];
				chunks.forEach(function(chunk) {
					chunk.files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options)).map(function(file) {
						var asset = this.assets[file];
						if(asset.__SourceMapDevToolData) {
							var data = asset.__SourceMapDevToolData;
							for(var cachedFile in data) {
								this.assets[cachedFile] = data[cachedFile];
								if(cachedFile !== file)
									chunk.files.push(cachedFile);
							}
							return;
						}
						if(asset.sourceAndMap) {
							var sourceAndMap = asset.sourceAndMap(options);
							var sourceMap = sourceAndMap.map;
							var source = sourceAndMap.source;
						} else {
							var sourceMap = asset.map(options);
							var source = asset.source();
						}
						if(sourceMap) {
							return {
								chunk: chunk,
								file: file,
								asset: asset,
								source: source,
								sourceMap: sourceMap
							};
						}
					}, this).filter(Boolean).map(function(task) {
						var modules = task.sourceMap.sources.map(function(source) {
							var module = compilation.findModule(source);
							return module || source;
						});
						var moduleFilenames = modules.map(function(module) {
							return ModuleFilenameHelpers.createFilename(module, moduleFilenameTemplate, requestShortener);
						});
						task.modules = modules;
						task.moduleFilenames = moduleFilenames;
						return task;
					}, this).forEach(function(task) {
						allModules = allModules.concat(task.modules);
						allModuleFilenames = allModuleFilenames.concat(task.moduleFilenames);
						tasks.push(task);
					}, this);
				}, this);
				allModuleFilenames = ModuleFilenameHelpers.replaceDuplicates(allModuleFilenames, function(filename, i) {
					return ModuleFilenameHelpers.createFilename(allModules[i], fallbackModuleFilenameTemplate, requestShortener);
				}, function(ai, bi) {
					var a = allModules[ai];
					var b = allModules[bi];
					a = !a ? "" : typeof a === "string" ? a : a.identifier();
					b = !b ? "" : typeof b === "string" ? b : b.identifier();
					return a.length - b.length;
				});
				allModuleFilenames = ModuleFilenameHelpers.replaceDuplicates(allModuleFilenames, function(filename, i, n) {
					for(var j = 0; j < n; j++)
						filename += "*";
					return filename;
				});
				tasks.forEach(function(task) {
					task.moduleFilenames = allModuleFilenames.slice(0, task.moduleFilenames.length);
					allModuleFilenames = allModuleFilenames.slice(task.moduleFilenames.length);
				}, this);
				tasks.forEach(function(task) {
					var chunk = task.chunk;
					var file = task.file;
					var asset = task.asset;
					var sourceMap = task.sourceMap;
					var source = task.source;
					var moduleFilenames = task.moduleFilenames;
					var modules = task.modules;
					sourceMap.sources = moduleFilenames;
					if(sourceMap.sourcesContent && !options.noSources) {
						sourceMap.sourcesContent = sourceMap.sourcesContent.map(function(content, i) {
							return content + "\n\n\n" + ModuleFilenameHelpers.createFooter(modules[i], requestShortener);
						});
					} else {
						sourceMap.sourcesContent = undefined;
					}
					sourceMap.sourceRoot = "";
					sourceMap.file = file;
					asset.__SourceMapDevToolData = {};
					var currentSourceMappingURLComment = sourceMappingURLComment;
					if(currentSourceMappingURLComment !== false && /\.css($|\?)/i.test(file)) {
						currentSourceMappingURLComment = currentSourceMappingURLComment.replace(/^\n\/\/(.*)$/, "\n/*$1*/");
					}
					if(sourceMapFilename) {
						var filename = file,
							query = "";
						var idx = filename.indexOf("?");
						if(idx >= 0) {
							query = filename.substr(idx);
							filename = filename.substr(0, idx);
						}
						var sourceMapFile = this.getPath(sourceMapFilename, {
							chunk: chunk,
							filename: filename,
							query: query,
							basename: basename(filename)
						});
						var sourceMapUrl = path.relative(path.dirname(file), sourceMapFile).replace(/\\/g, "/");
						if(currentSourceMappingURLComment !== false) {
							asset.__SourceMapDevToolData[file] = this.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\[url\]/g, sourceMapUrl));
						}
						asset.__SourceMapDevToolData[sourceMapFile] = this.assets[sourceMapFile] = new RawSource(JSON.stringify(sourceMap));
						chunk.files.push(sourceMapFile);
					} else {
						asset.__SourceMapDevToolData[file] = this.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment
							.replace(/\[map\]/g, function() {
								return JSON.stringify(sourceMap);
							})
							.replace(/\[url\]/g, function() {
								return "data:application/json;charset=utf-8;base64," +
									new Buffer(JSON.stringify(sourceMap)).toString("base64");
							})
						);
					}
				}, this);
			});
		});
	};
	
	function basename(name) {
		if(name.indexOf("/") < 0) return name;
		return name.substr(name.lastIndexOf("/") + 1);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleFilenameHelpers = __webpack_require__(92);
	
	function SourceMapDevToolModuleOptionsPlugin(options) {
		this.options = options;
	}
	
	module.exports = SourceMapDevToolModuleOptionsPlugin;
	
	SourceMapDevToolModuleOptionsPlugin.prototype.apply = function(compilation) {
		var options = this.options;
		if(options.module !== false) {
			compilation.plugin("build-module", function(module) {
				module.useSourceMap = true;
			});
		}
		if(options.lineToLine === true) {
			compilation.plugin("build-module", function(module) {
				module.lineToLine = true;
			});
		} else if(options.lineToLine) {
			compilation.plugin("build-module", function(module) {
				if(!module.resource) return;
				var resourcePath = module.resource;
				var idx = resourcePath.indexOf("?");
				if(idx >= 0) resourcePath = resourcePath.substr(0, idx);
				module.lineToLine = ModuleFilenameHelpers.matchObject(options.lineToLine, resourcePath);
			});
		}
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EvalSourceMapDevToolModuleTemplatePlugin = __webpack_require__(96);
	var SourceMapDevToolModuleOptionsPlugin = __webpack_require__(94);
	
	function EvalSourceMapDevToolPlugin(options, moduleFilenameTemplate) {
		if(!options || typeof options !== "object") {
			this.options = {
				append: options,
				moduleFilenameTemplate: moduleFilenameTemplate
			};
		} else {
			this.options = options;
		}
	}
	module.exports = EvalSourceMapDevToolPlugin;
	EvalSourceMapDevToolPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		compiler.plugin("compilation", function(compilation) {
			new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);
			compilation.moduleTemplate.apply(new EvalSourceMapDevToolModuleTemplatePlugin(compilation, options, options.append, options.moduleFilenameTemplate));
		});
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RawSource = __webpack_require__(40);
	var ModuleFilenameHelpers = __webpack_require__(92);
	
	function EvalSourceMapDevToolModuleTemplatePlugin(compilation, options, sourceMapComment, moduleFilenameTemplate) {
		this.compilation = compilation;
		this.sourceMapComment = sourceMapComment || "//# sourceMappingURL=[url]";
		this.moduleFilenameTemplate = moduleFilenameTemplate || "webpack:///[resource-path]?[hash]";
		this.options = options;
	}
	module.exports = EvalSourceMapDevToolModuleTemplatePlugin;
	
	EvalSourceMapDevToolModuleTemplatePlugin.prototype.apply = function(moduleTemplate) {
		var self = this;
		var options = this.options;
		moduleTemplate.plugin("module", function(source, module) {
			if(source.__EvalSourceMapDevToolData)
				return source.__EvalSourceMapDevToolData;
	
			if(source.sourceAndMap) {
				var sourceAndMap = source.sourceAndMap(options);
				var sourceMap = sourceAndMap.map;
				var content = sourceAndMap.source;
			} else {
				var sourceMap = source.map(options);
				var content = source.source();
			}
			if(!sourceMap) {
				return source;
			}
	
			// Clone (flat) the sourcemap to ensure that the mutations below do not persist.
			sourceMap = Object.keys(sourceMap).reduce(function(obj, key) {
				obj[key] = sourceMap[key];
				return obj;
			}, {});
			var modules = sourceMap.sources.map(function(source) {
				var module = self.compilation.findModule(source);
				return module || source;
			});
			var moduleFilenames = modules.map(function(module) {
				return ModuleFilenameHelpers.createFilename(module, self.moduleFilenameTemplate, this.requestShortener);
			}, this);
			moduleFilenames = ModuleFilenameHelpers.replaceDuplicates(moduleFilenames, function(filename, i, n) {
				for(var j = 0; j < n; j++)
					filename += "*";
				return filename;
			});
			sourceMap.sources = moduleFilenames;
			if(sourceMap.sourcesContent) {
				sourceMap.sourcesContent = sourceMap.sourcesContent.map(function(content, i) {
					return content + "\n\n\n" + ModuleFilenameHelpers.createFooter(modules[i], this.requestShortener);
				}, this);
			}
			sourceMap.sourceRoot = "";
			sourceMap.file = module.id + ".js";
			var footer = self.sourceMapComment.replace(/\[url\]/g, "data:application/json;charset=utf-8;base64," + new Buffer(JSON.stringify(sourceMap)).toString("base64"));
			source.__EvalSourceMapDevToolData = new RawSource("eval(" + JSON.stringify(content + footer) + ");");
			return source.__EvalSourceMapDevToolData;
		});
		moduleTemplate.plugin("hash", function(hash) {
			hash.update("eval-source-map");
			hash.update("1");
		});
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SingleEntryPlugin = __webpack_require__(98);
	var MultiEntryPlugin = __webpack_require__(100);
	
	function EntryOptionPlugin() {}
	module.exports = EntryOptionPlugin;
	
	EntryOptionPlugin.prototype.apply = function(compiler) {
		compiler.plugin("entry-option", function(context, entry) {
			function itemToPlugin(item, name) {
				if(Array.isArray(item))
					return new MultiEntryPlugin(context, item, name);
				else
					return new SingleEntryPlugin(context, item, name);
			}
			if(typeof entry === "string" || Array.isArray(entry)) {
				compiler.apply(itemToPlugin(entry, "main"));
			} else if(typeof entry === "object") {
				Object.keys(entry).forEach(function(name) {
					compiler.apply(itemToPlugin(entry[name], name));
				});
			}
			return true;
		});
	};


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SingleEntryDependency = __webpack_require__(99);
	
	function SingleEntryPlugin(context, entry, name) {
		this.context = context;
		this.entry = entry;
		this.name = name;
	}
	module.exports = SingleEntryPlugin;
	SingleEntryPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			var dep = new SingleEntryDependency(this.entry);
			dep.loc = this.name;
			compilation.addEntry(this.context, dep, this.name, callback);
		}.bind(this));
	};


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function SingleEntryDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = SingleEntryDependency;
	
	SingleEntryDependency.prototype = Object.create(ModuleDependency.prototype);
	SingleEntryDependency.prototype.constructor = SingleEntryDependency;
	SingleEntryDependency.prototype.type = "single entry";


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var MultiEntryDependency = __webpack_require__(101);
	var SingleEntryDependency = __webpack_require__(99);
	var MultiModuleFactory = __webpack_require__(102);
	
	function MultiEntryPlugin(context, entries, name) {
		this.context = context;
		this.entries = entries;
		this.name = name;
	}
	module.exports = MultiEntryPlugin;
	MultiEntryPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var multiModuleFactory = new MultiModuleFactory();
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);
	
			compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			compilation.addEntry(this.context, new MultiEntryDependency(this.entries.map(function(e, idx) {
				var dep = new SingleEntryDependency(e);
				dep.loc = this.name + ":" + (100000 + idx);
				return dep;
			}, this), this.name), this.name, callback);
		}.bind(this));
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(56);
	
	function MultiEntryDependency(dependencies, name) {
		Dependency.call(this);
		this.dependencies = dependencies;
		this.name = name;
	}
	module.exports = MultiEntryDependency;
	
	MultiEntryDependency.prototype = Object.create(Dependency.prototype);
	MultiEntryDependency.prototype.constructor = MultiEntryDependency;
	MultiEntryDependency.prototype.type = "multi entry";


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Tapable = __webpack_require__(8);
	var MultiModule = __webpack_require__(103);
	
	function MultiModuleFactory() {
		Tapable.call(this);
	}
	module.exports = MultiModuleFactory;
	
	MultiModuleFactory.prototype = Object.create(Tapable.prototype);
	MultiModuleFactory.prototype.constructor = MultiModuleFactory;
	
	MultiModuleFactory.prototype.create = function(context, dependency, callback) {
		callback(null, new MultiModule(context, dependency.dependencies, dependency.name));
	};


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(15);
	var RawSource = __webpack_require__(40);
	
	function MultiModule(context, dependencies, name) {
		Module.call(this);
		this.context = context;
		this.dependencies = dependencies;
		this.name = name;
		this.built = false;
		this.cacheable = true;
	}
	module.exports = MultiModule;
	
	MultiModule.prototype = Object.create(Module.prototype);
	
	MultiModule.prototype.identifier = function() {
		return "multi " + this.name;
	};
	
	MultiModule.prototype.readableIdentifier = function() {
		return "multi " + this.name;
	};
	
	MultiModule.prototype.disconnect = function disconnect() {
		this.built = false;
		Module.prototype.disconnect.call(this);
	};
	
	MultiModule.prototype.build = function build(options, compilation, resolver, fs, callback) {
		this.built = true;
		return callback();
	};
	
	MultiModule.prototype.source = function(dependencyTemplates, outputOptions) {
		var str = [];
		this.dependencies.forEach(function(dep, idx) {
			if(dep.module) {
				if(idx === this.dependencies.length - 1)
					str.push("module.exports = ");
				str.push("__webpack_require__(");
				if(outputOptions.pathinfo)
					str.push("/*! " + dep.request + " */");
				str.push("" + JSON.stringify(dep.module.id));
				str.push(")");
			} else {
				str.push("(function webpackMissingModule() { throw new Error(");
				str.push(JSON.stringify("Cannot find module \"" + dep.request + "\""));
				str.push("); }())");
			}
			str.push(";\n");
		}, this);
		return new RawSource(str.join(""));
	};
	
	MultiModule.prototype.needRebuild = function needRebuild() {
		return false;
	};
	
	MultiModule.prototype.size = function() {
		return 16 + this.dependencies.length * 12;
	};
	
	MultiModule.prototype.updateHash = function(hash) {
		hash.update("multi module");
		hash.update(this.name || "");
		Module.prototype.updateHash.call(this, hash);
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	
	function RecordIdsPlugin() {}
	module.exports = RecordIdsPlugin;
	
	function makeRelative(compiler, identifier) {
		var context = compiler.context;
		return identifier.split("|").map(function(str) {
			return identifier.split("!").map(function(str) {
				return path.relative(context, str);
			}).join("!");
		}).join("|");
	}
	
	RecordIdsPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("record-modules", function(modules, records) {
				records.nextFreeModuleId = compilation.nextFreeModuleId;
				if(!records.modules) records.modules = {};
				if(!records.modules.byIdentifier) records.modules.byIdentifier = {};
				modules.forEach(function(module) {
					var identifier = makeRelative(compiler, module.identifier());
					records.modules.byIdentifier[identifier] = module.id;
				});
			});
			compilation.plugin("revive-modules", function(modules, records) {
				if(records.nextFreeModuleId)
					compilation.nextFreeModuleId = records.nextFreeModuleId;
				if(!records.modules || !records.modules.byIdentifier) return;
				var usedIds = {
					0: true
				};
				modules.forEach(function(module) {
					if(module.id !== null) return;
					var identifier = makeRelative(compiler, module.identifier());
					var id = records.modules.byIdentifier[identifier];
					if(id === undefined) return;
					if(usedIds[id]) return;
					usedIds[id] = true;
					module.id = id;
				});
			});
	
			function getDepBlockIdent(chunk, block) {
				var ident = [];
				if(block.chunks.length > 1)
					ident.push(block.chunks.indexOf(chunk));
				while(block.parent) {
					var p = block.parent;
					var idx = p.blocks.indexOf(block);
					var l = p.blocks.length - 1;
					ident.unshift(idx + "/" + l);
					block = block.parent;
				}
				if(!block.identifier) return null;
				ident.unshift(makeRelative(compiler, block.identifier()));
				return ident.join(":");
			}
			compilation.plugin("record-chunks", function(chunks, records) {
				records.nextFreeChunkId = compilation.nextFreeChunkId;
				if(!records.chunks) records.chunks = {};
				if(!records.chunks.byName) records.chunks.byName = {};
				if(!records.chunks.byBlocks) records.chunks.byBlocks = {};
				chunks.forEach(function(chunk) {
					var name = chunk.name;
					var blockIdents = chunk.blocks.map(getDepBlockIdent.bind(null, chunk)).filter(Boolean);
					if(name) records.chunks.byName[name] = chunk.id;
					blockIdents.forEach(function(blockIdent) {
						records.chunks.byBlocks[blockIdent] = chunk.id;
					});
				});
			});
			compilation.plugin("revive-chunks", function(chunks, records) {
				if(records.nextFreeChunkId)
					compilation.nextFreeChunkId = records.nextFreeChunkId;
				if(!records.chunks) return;
				var usedIds = {};
				if(records.chunks.byName) {
					chunks.forEach(function(chunk) {
						if(chunk.id !== null) return;
						if(!chunk.name) return;
						var id = records.chunks.byName[chunk.name];
						if(id === undefined) return;
						if(usedIds[id]) return;
						usedIds[id] = true;
						chunk.id = id;
					});
				}
				if(records.chunks.byBlocks) {
					var argumentedChunks = chunks.filter(function(chunk) {
						return chunk.id === null;
					}).map(function(chunk) {
						return {
							chunk: chunk,
							blockIdents: chunk.blocks.map(getDepBlockIdent.bind(null, chunk)).filter(Boolean)
						};
					}).filter(function(arg) {
						return arg.blockIdents.length > 0;
					});
					var blockIdentsCount = {};
					argumentedChunks.forEach(function(arg, idx) {
						arg.blockIdents.forEach(function(blockIdent) {
							var id = records.chunks.byBlocks[blockIdent];
							if(typeof id !== "number") return;
							var accessor = id + ":" + idx;
							blockIdentsCount[accessor] = (blockIdentsCount[accessor] || 0) + 1;
						});
					});
					blockIdentsCount = Object.keys(blockIdentsCount).map(function(accessor) {
						return [blockIdentsCount[accessor]].concat(accessor.split(":").map(Number));
					}).sort(function(a, b) {
						return b[0] - a[0];
					});
					blockIdentsCount.forEach(function(arg) {
						var id = arg[1];
						if(usedIds[id]) return;
						var idx = arg[2];
						var chunk = argumentedChunks[idx].chunk;
						if(chunk.id !== null) return;
						usedIds[id] = true;
						chunk.id = id;
					});
				}
			});
		});
	};


/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	var NullFactory = __webpack_require__(108);
	
	function APIPlugin() {}
	module.exports = APIPlugin;
	
	var REPLACEMENTS = {
		__webpack_require__: "__webpack_require__", // eslint-disable-line camelcase
		__webpack_public_path__: "__webpack_require__.p", // eslint-disable-line camelcase
		__webpack_modules__: "__webpack_require__.m", // eslint-disable-line camelcase
		__webpack_chunk_load__: "__webpack_require__.e", // eslint-disable-line camelcase
		__non_webpack_require__: "require", // eslint-disable-line camelcase
		"require.onError": "__webpack_require__.onError" // eslint-disable-line camelcase
	};
	var REPLACEMENT_TYPES = {
		__webpack_public_path__: "string", // eslint-disable-line camelcase
		__webpack_require__: "function", // eslint-disable-line camelcase
		__webpack_modules__: "object", // eslint-disable-line camelcase
		__webpack_chunk_load__: "function" // eslint-disable-line camelcase
	};
	var IGNORES = [];
	APIPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		Object.keys(REPLACEMENTS).forEach(function(key) {
			compiler.parser.plugin("expression " + key, function(expr) {
				var dep = new ConstDependency(REPLACEMENTS[key], expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				return new BasicEvaluatedExpression().setString(REPLACEMENT_TYPES[key]).setRange(expr.range);
			});
		});
		IGNORES.forEach(function(key) {
			compiler.parser.plugin(key, function() {
				return true;
			});
		});
	};


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	
	function ConstDependency(expression, range) {
		NullDependency.call(this);
		this.expression = expression;
		this.range = range;
	}
	module.exports = ConstDependency;
	
	ConstDependency.prototype = Object.create(NullDependency.prototype);
	ConstDependency.prototype.constructor = ConstDependency;
	
	ConstDependency.Template = function ConstDependencyTemplate() {};
	
	ConstDependency.Template.prototype.apply = function(dep, source) {
		if(typeof dep.range === "number")
			source.insert(dep.range, dep.expression);
		else
			source.replace(dep.range[0], dep.range[1] - 1, dep.expression);
	};
	
	ConstDependency.prototype.updateHash = function(hash) {
		hash.update(this.range + "");
		hash.update(this.expression + "");
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(56);
	
	function NullDependency() {
		Dependency.call(this);
	}
	module.exports = NullDependency;
	
	NullDependency.prototype = Object.create(Dependency.prototype);
	NullDependency.prototype.constructor = NullDependency;
	NullDependency.prototype.type = "null";
	NullDependency.prototype.isEqualResource = function() {
		return false;
	};


/***/ },
/* 108 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function NullFactory() {}
	module.exports = NullFactory;
	
	NullFactory.prototype.create = function(context, dependency, callback) {
		return callback();
	};


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	var NullFactory = __webpack_require__(108);
	
	function ConstPlugin() {}
	module.exports = ConstPlugin;
	
	ConstPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		compiler.parser.plugin("statement if", function(statement) {
			var param = this.evaluateExpression(statement.test);
			var bool = param.asBool();
			if(typeof bool === "boolean") {
				if(statement.test.type !== "Literal") {
					var dep = new ConstDependency(bool + "", param.range);
					dep.loc = statement.loc;
					this.state.current.addDependency(dep);
				}
				return bool;
			}
		});
		compiler.parser.plugin("expression ?:", function(expression) {
			var param = this.evaluateExpression(expression.test);
			var bool = param.asBool();
			if(typeof bool === "boolean") {
				if(expression.test.type !== "Literal") {
					var dep = new ConstDependency(" " + bool + "", param.range);
					dep.loc = expression.loc;
					this.state.current.addDependency(dep);
				}
				return bool;
			}
		});
		compiler.parser.plugin("evaluate Identifier __resourceQuery", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.splitQuery(this.state.module.resource)[1]);
			res.setRange(expr.range);
			return res;
		});
		compiler.parser.plugin("expression __resourceQuery", function() {
			if(!this.state.module) return;
			this.state.current.addVariable("__resourceQuery", JSON.stringify(this.state.module.splitQuery(this.state.module.resource)[1]));
			return true;
		});
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	
	var NullFactory = __webpack_require__(108);
	
	function RequireJsStuffPlugin() {}
	module.exports = RequireJsStuffPlugin;
	RequireJsStuffPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
	
		function remove(expr) {
			var dep = new ConstDependency(";", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		}
		compiler.parser.plugin("call require.config", remove);
		compiler.parser.plugin("call requirejs.config", remove);
	
		compiler.parser.plugin("expression require.version", function(expr) {
			var dep = new ConstDependency(JSON.stringify("0.0.0"), expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("expression requirejs.onError", function(expr) {
			var dep = new ConstDependency(JSON.stringify("__webpack_require__.onError"), expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var ModuleParserHelpers = __webpack_require__(112);
	var ConstDependency = __webpack_require__(106);
	var BasicEvaluatedExpression = __webpack_require__(62);
	var UnsupportedFeatureWarning = __webpack_require__(113);
	
	var NullFactory = __webpack_require__(108);
	
	function NodeStuffPlugin(options) {
		this.options = options;
	}
	module.exports = NodeStuffPlugin;
	NodeStuffPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
	
		function ignore() {
			return true;
		}
	
		function setConstant(expressionName, value) {
			compiler.parser.plugin("expression " + expressionName, function() {
				this.state.current.addVariable(expressionName, JSON.stringify(value));
				return true;
			});
		}
	
		function setModuleConstant(expressionName, fn) {
			compiler.parser.plugin("expression " + expressionName, function() {
				this.state.current.addVariable(expressionName, JSON.stringify(fn(this.state.module)));
				return true;
			});
		}
		var context = compiler.context;
		if(this.options.__filename === "mock") {
			setConstant("__filename", "/index.js");
		} else if(this.options.__filename) {
			setModuleConstant("__filename", function(module) {
				return path.relative(context, module.resource);
			});
		}
		compiler.parser.plugin("evaluate Identifier __filename", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.splitQuery(this.state.module.resource)[0]);
			res.setRange(expr.range);
			return res;
		});
		if(this.options.__dirname === "mock") {
			setConstant("__dirname", "/");
		} else if(this.options.__dirname) {
			setModuleConstant("__dirname", function(module) {
				return path.relative(context, module.context);
			});
		}
		compiler.parser.plugin("evaluate Identifier __dirname", function(expr) {
			if(!this.state.module) return;
			var res = new BasicEvaluatedExpression();
			res.setString(this.state.module.context);
			res.setRange(expr.range);
			return res;
		});
		compiler.parser.plugin("expression require.main", function(expr) {
			var dep = new ConstDependency("__webpack_require__.c[0]", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("expression require.extensions", function(expr) {
			var dep = new ConstDependency("(void 0)", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			if(!this.state.module) return;
			this.state.module.warnings.push(new UnsupportedFeatureWarning(this.state.module, "require.extensions is not supported by webpack. Use a loader instead."));
			return true;
		});
		compiler.parser.plugin("expression module.exports", ignore);
		compiler.parser.plugin("expression module.loaded", ignore);
		compiler.parser.plugin("expression module.id", ignore);
		compiler.parser.plugin("evaluate Identifier module.hot", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(false).setRange(expr.range);
		});
		compiler.parser.plugin("expression module", function() {
			var moduleJsPath = path.join(__dirname, "..", "buildin", "module.js");
			if(this.state.module.context) {
				moduleJsPath = path.relative(this.state.module.context, moduleJsPath);
				if(!/^[A-Z]:/i.test(moduleJsPath)) {
					moduleJsPath = "./" + moduleJsPath.replace(/\\/g, "/");
				}
			}
			return ModuleParserHelpers.addParsedVariable(this, "module", "require(" + JSON.stringify(moduleJsPath) + ")(module)");
		});
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 112 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleParserHelpers = exports;
	
	ModuleParserHelpers.addParsedVariable = function(parser, name, expression) {
		if(!parser.state.current.addVariable) return false;
		var deps = [];
		parser.parse(expression, {
			current: {
				addDependency: function(dep) {
					dep.userRequest = name;
					deps.push(dep);
				}
			},
			module: parser.state.module
		});
		parser.state.current.addVariable(name, expression, deps);
		return true;
	};


/***/ },
/* 113 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function UnsupportedFeatureWarning(module, message) {
		Error.call(this);
		Error.captureStackTrace(this, UnsupportedFeatureWarning);
		this.name = "UnsupportedFeatureWarning";
		this.message = message;
		this.origin = this.module = module;
	}
	module.exports = UnsupportedFeatureWarning;
	
	UnsupportedFeatureWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var ConstDependency = __webpack_require__(106);
	
	var ModuleAliasPlugin = __webpack_require__(115);
	
	var NullFactory = __webpack_require__(108);
	
	function CompatibilityPlugin() {}
	module.exports = CompatibilityPlugin;
	
	CompatibilityPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		compiler.resolvers.normal.apply(
			new ModuleAliasPlugin({
				"enhanced-require": path.join(__dirname, "..", "buildin", "return-require.js")
			})
		);
		compiler.parser.plugin("call require", function(expr) {
			// support for browserify style require delegator: "require(o, !0)"
			if(expr.arguments.length !== 2) return;
			var second = this.evaluateExpression(expr.arguments[1]);
			if(!second.isBoolean()) return;
			if(second.asBool() !== true) return;
			var dep = new ConstDependency("require", expr.callee.range);
			dep.loc = expr.loc;
			if(this.state.current.dependencies.length > 1) {
				var last = this.state.current.dependencies[this.state.current.dependencies.length - 1];
				if(last.critical && last.request === "." && last.userRequest === "." && last.recursive)
					this.state.current.dependencies.pop();
			}
			dep.critical = "This seems to be a pre-built javascript file. Though this is possible, it's not recommended. Try to require the original source to get better results.";
			this.state.current.addDependency(dep);
			return true;
		});
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function ModuleAliasPlugin(aliasMap) {
		this.aliasMap = aliasMap;
	}
	module.exports = ModuleAliasPlugin;
	
	ModuleAliasPlugin.prototype.apply = function(resolver) {
		var aliasMap = this.aliasMap;
		resolver.plugin("module", function(request, callback) {
			var fs = this.fileSystem;
			var keys = Object.keys(aliasMap);
			var i = 0;
			(function next() {
				for(;i < keys.length; i++) {
					var aliasName = keys[i];
					var onlyModule = /\$$/.test(aliasName);
					if(onlyModule) aliasName = aliasName.substr(0, aliasName.length-1);
					if((!onlyModule && request.request.indexOf(aliasName + "/") === 0) || request.request === aliasName) {
						var aliasValue = aliasMap[keys[i]];
						if(request.request.indexOf(aliasValue + "/") !== 0 && request.request != aliasValue) {
							var newRequestStr = aliasValue + request.request.substr(aliasName.length);
							var newRequest = this.parse(newRequestStr);
							var obj = {
								path: request.path,
								request: newRequest.path,
								query: newRequest.query,
								directory: newRequest.directory
							};
							var newCallback = createInnerCallback(callback, callback, "aliased with mapping " + JSON.stringify(aliasName) + ": " + JSON.stringify(aliasValue) + " to " + newRequestStr);
							if(newRequest.module) return this.doResolve("module", obj, newCallback);
							if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
							return this.doResolve(["file", "directory"], obj, newCallback);
						}
					}
				}
				return callback();
			}.call(this));
		});
	};


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	var NullFactory = __webpack_require__(108);
	
	function DefinePlugin(definitions) {
		this.definitions = definitions;
	}
	module.exports = DefinePlugin;
	DefinePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		(function walkDefinitions(definitions, prefix) {
			Object.keys(definitions).forEach(function(key) {
				var code = definitions[key];
				if(code && typeof code === "object" && !(code instanceof RegExp)) {
					walkDefinitions(code, prefix + key + ".");
					applyObjectDefine(prefix + key, code);
					return;
				}
				applyDefineKey(prefix, key);
				applyDefine(prefix + key, code);
			});
		}(this.definitions, ""));
	
		function stringifyObj(obj) {
			return "{" + Object.keys(obj).map(function(key) {
				var code = obj[key];
				return JSON.stringify(key) + ":" + toCode(code);
			}).join(",") + "}";
		}
	
		function toCode(code) {
			if(code === null) return "null";
			else if(code === undefined) return "undefined";
			else if(code instanceof RegExp && code.toString) return code.toString();
			else if(typeof code === "function" && code.toString) return code.toString();
			else if(typeof code === "object") return stringifyObj(code);
			else return code + "";
		}
	
		function applyDefineKey(prefix, key) {
			var splittedKey = key.split(".");
			splittedKey.slice(1).forEach(function(_, i) {
				var fullKey = prefix + splittedKey.slice(0, i + 1).join(".");
				compiler.parser.plugin("can-rename " + fullKey, function() {
					return true;
				});
			});
		}
	
		function applyDefine(key, code) {
			var isTypeof = /^typeof\s+/.test(key);
			if(isTypeof) key = key.replace(/^typeof\s+/, "");
			var recurse = false;
			var recurseTypeof = false;
			code = toCode(code);
			if(!isTypeof) {
				compiler.parser.plugin("can-rename " + key, function() {
					return true;
				});
				compiler.parser.plugin("evaluate Identifier " + key, function(expr) {
					if(recurse) return;
					recurse = true;
					var res = compiler.parser.evaluate(code);
					recurse = false;
					res.setRange(expr.range);
					return res;
				});
				compiler.parser.plugin("expression " + key, function(expr) {
					var dep = new ConstDependency("(" + code + ")", expr.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
					return true;
				});
			}
			var typeofCode = isTypeof ? code : "typeof (" + code + ")";
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				if(recurseTypeof) return;
				recurseTypeof = true;
				var res = compiler.parser.evaluate(typeofCode);
				recurseTypeof = false;
				res.setRange(expr.range);
				return res;
			});
			compiler.parser.plugin("typeof " + key, function(expr) {
				var res = compiler.parser.evaluate(typeofCode);
				if(!res.isString()) return;
				var dep = new ConstDependency(JSON.stringify(res.string), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
	
		function applyObjectDefine(key, obj) {
			var code = stringifyObj(obj);
			compiler.parser.plugin("can-rename " + key, function() {
				return true;
			});
			compiler.parser.plugin("evaluate Identifier " + key, function(expr) {
				return new BasicEvaluatedExpression().setRange(expr.range);
			});
			compiler.parser.plugin("evaluate typeof " + key, function(expr) {
				return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
			});
			compiler.parser.plugin("expression " + key, function(expr) {
				var dep = new ConstDependency("(" + code + ")", expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
			compiler.parser.plugin("typeof " + key, function(expr) {
				var dep = new ConstDependency("\"object\"", expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
	};


/***/ },
/* 117 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MovedToPluginWarningPlugin(optionName, pluginName) {
		this.optionName = optionName;
		this.pluginName = pluginName;
	}
	module.exports = MovedToPluginWarningPlugin;
	
	MovedToPluginWarningPlugin.prototype.apply = function(compiler) {
		var optionName = this.optionName;
		var pluginName = this.pluginName;
		compiler.plugin("compilation", function(compilation) {
			compilation.warnings.push(new Error("webpack options:\nDEPRECATED option '" + optionName + "' will be moved to the " + pluginName + ". Use this instead.\nFor more info about the usage of the " + pluginName + " see https://webpack.github.io/docs/list-of-plugins.html"));
		});
	};


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Jason Anderson @diurnalist
	*/
	
	var REGEXP_HASH = /\[hash(?::(\d+))?\]/gi,
		REGEXP_CHUNKHASH = /\[chunkhash(?::(\d+))?\]/gi,
		REGEXP_NAME = /\[name\]/gi,
		REGEXP_ID = /\[id\]/gi,
		REGEXP_FILE = /\[file\]/gi,
		REGEXP_QUERY = /\[query\]/gi,
		REGEXP_FILEBASE = /\[filebase\]/gi;
	
	// Using global RegExp for .test is dangerous
	// We use a normal RegExp instead of .test
	var REGEXP_HASH_FOR_TEST = new RegExp(REGEXP_HASH.source, "i"),
		REGEXP_CHUNKHASH_FOR_TEST = new RegExp(REGEXP_CHUNKHASH.source, "i"),
		REGEXP_NAME_FOR_TEST = new RegExp(REGEXP_NAME.source, "i");
	
	// Backwards compatibility; expose regexes on Template object
	var Template = __webpack_require__(52);
	Template.REGEXP_HASH = REGEXP_HASH;
	Template.REGEXP_CHUNKHASH = REGEXP_CHUNKHASH;
	Template.REGEXP_NAME = REGEXP_NAME;
	Template.REGEXP_ID = REGEXP_ID;
	Template.REGEXP_FILE = REGEXP_FILE;
	Template.REGEXP_QUERY = REGEXP_QUERY;
	Template.REGEXP_FILEBASE = REGEXP_FILEBASE;
	
	function TemplatedPathPlugin() {}
	
	module.exports = TemplatedPathPlugin;
	
	function withHashLength(replacer, handlerFn) {
		return function(_, hashLength) {
			var length = hashLength && parseInt(hashLength, 10);
			if(length && handlerFn) {
				return handlerFn(length);
			}
			var hash = replacer.apply(this, arguments);
			return length ? hash.slice(0, length) : hash;
		};
	}
	
	function getReplacer(value, allowEmpty) {
		return function(match) {
			// last argument in replacer is the entire input string
			var input = arguments[arguments.length - 1];
			if(value == null) {
				if(!allowEmpty) throw new Error("Path variable " + match + " not implemented in this context: " + input);
				return "";
			} else {
				return "" + value;
			}
		};
	}
	
	function replacePathVariables(path, data) {
		var chunk = data.chunk;
		var chunkId = chunk && chunk.id;
		var chunkName = chunk && (chunk.name || chunk.id);
		var chunkHash = chunk && (chunk.renderedHash || chunk.hash);
		var chunkHashWithLength = chunk && chunk.hashWithLength;
	
		if(data.noChunkHash && REGEXP_CHUNKHASH_FOR_TEST.test(path)) {
			throw new Error("Cannot use [chunkhash] for chunk in '" + path + "' (use [hash] instead)");
		}
	
		return path
			.replace(REGEXP_HASH, withHashLength(getReplacer(data.hash), data.hashWithLength))
			.replace(REGEXP_CHUNKHASH, withHashLength(getReplacer(chunkHash), chunkHashWithLength))
			.replace(REGEXP_ID, getReplacer(chunkId))
			.replace(REGEXP_NAME, getReplacer(chunkName))
			.replace(REGEXP_FILE, getReplacer(data.filename))
			.replace(REGEXP_FILEBASE, getReplacer(data.basename))
			// query is optional, it's OK if it's in a path but there's nothing to replace it with
			.replace(REGEXP_QUERY, getReplacer(data.query, true));
	}
	
	TemplatedPathPlugin.prototype.constructor = TemplatedPathPlugin;
	TemplatedPathPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			var mainTemplate = compilation.mainTemplate;
	
			mainTemplate.plugin("asset-path", replacePathVariables);
	
			mainTemplate.plugin("global-hash", function(chunk, paths) {
				var outputOptions = this.outputOptions;
				var publicPath = outputOptions.publicPath || "";
				var filename = outputOptions.filename || "";
				var chunkFilename = outputOptions.chunkFilename || outputOptions.filename;
				if(REGEXP_HASH_FOR_TEST.test(publicPath) || REGEXP_CHUNKHASH_FOR_TEST.test(publicPath) || REGEXP_NAME_FOR_TEST.test(publicPath))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(filename))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(chunkFilename))
					return true;
				if(REGEXP_HASH_FOR_TEST.test(paths.join("|")))
					return true;
			});
	
			mainTemplate.plugin("hash-for-chunk", function(hash, chunk) {
				var outputOptions = this.outputOptions;
				var chunkFilename = outputOptions.chunkFilename || outputOptions.filename;
				if(REGEXP_CHUNKHASH_FOR_TEST.test(chunkFilename))
					hash.update(JSON.stringify(chunk.getChunkMaps(true, true).hash));
				if(REGEXP_NAME_FOR_TEST.test(chunkFilename))
					hash.update(JSON.stringify(chunk.getChunkMaps(true, true).name));
			});
		});
	};


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var CaseSensitiveModulesWarning = __webpack_require__(120);
	
	function WarnCaseSensitiveModulesPlugin() {}
	module.exports = WarnCaseSensitiveModulesPlugin;
	
	WarnCaseSensitiveModulesPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("seal", function() {
				var moduleWithoutCase = {};
				this.modules.forEach(function(module) {
					var ident = module.identifier().toLowerCase();
					if(moduleWithoutCase["$" + ident]) {
						if(moduleWithoutCase["$" + ident] !== true)
							this.warnings.push(new CaseSensitiveModulesWarning(moduleWithoutCase["$" + ident]));
						this.warnings.push(new CaseSensitiveModulesWarning(module));
						moduleWithoutCase["$" + ident] = true;
					} else {
						moduleWithoutCase["$" + ident] = module;
					}
				}, this);
			});
		});
	};


/***/ },
/* 120 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CaseSensitiveModulesWarning(module) {
		Error.call(this);
		Error.captureStackTrace(this, CaseSensitiveModulesWarning);
		this.name = "CaseSensitiveModulesWarning";
		this.message = "There is another module with an equal name when case is ignored.\n" +
			"This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.\n" +
			"Rename module if multiple modules are expected or use equal casing if one module is expected.";
		this.origin = this.module = module;
	}
	module.exports = CaseSensitiveModulesWarning;
	
	CaseSensitiveModulesWarning.prototype = Object.create(Error.prototype);


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var LoaderDependency = __webpack_require__(122);
	
	function LoaderPlugin() {}
	module.exports = LoaderPlugin;
	
	LoaderPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(LoaderDependency, normalModuleFactory);
		});
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("normal-module-loader", function(loaderContext, module) {
				loaderContext.loadModule = function loadModule(request, callback) {
					var dep = new LoaderDependency(request);
					dep.loc = request;
					compilation.addModuleDependencies(module, [
						[dep]
					], true, "lm", false, function(err) {
						if(err) return callback(err);
	
						if(!dep.module) return callback(new Error("Cannot load the module"));
						if(dep.module.building) dep.module.building.push(next);
						else next();
	
						function next(err) {
							if(err) return callback(err);
	
							if(dep.module.error) return callback(dep.module.error);
							if(!dep.module._source) throw new Error("The module created for a LoaderDependency must have a property _source");
							var source, map;
							var moduleSource = dep.module._source;
							if(moduleSource.sourceAndMap) {
								var sourceAndMap = moduleSource.sourceAndMap();
								map = sourceAndMap.map;
								source = sourceAndMap.source;
							} else {
								map = moduleSource.map();
								source = moduleSource.source();
							}
							if(dep.module.fileDependencies) {
								dep.module.fileDependencies.forEach(function(dep) {
									loaderContext.addDependency(dep);
								});
							}
							if(dep.module.contextDependencies) {
								dep.module.contextDependencies.forEach(function(dep) {
									loaderContext.addContextDependency(dep);
								});
							}
							return callback(null, source, map, dep.module);
						}
					});
				};
			});
		});
	};


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function LoaderDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = LoaderDependency;
	
	LoaderDependency.prototype = Object.create(ModuleDependency.prototype);
	LoaderDependency.prototype.constructor = LoaderDependency;
	LoaderDependency.prototype.type = "loader";


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	var CommonJsRequireDependency = __webpack_require__(124);
	var CommonJsRequireContextDependency = __webpack_require__(127);
	var RequireResolveDependency = __webpack_require__(130);
	var RequireResolveContextDependency = __webpack_require__(131);
	var RequireResolveHeaderDependency = __webpack_require__(133);
	var RequireHeaderDependency = __webpack_require__(134);
	
	var NullFactory = __webpack_require__(108);
	
	var RequireResolveDependencyParserPlugin = __webpack_require__(135);
	var CommonJsRequireDependencyParserPlugin = __webpack_require__(137);
	
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	function CommonJsPlugin(options) {
		this.options = options;
	}
	module.exports = CommonJsPlugin;
	
	CommonJsPlugin.prototype.apply = function(compiler) {
		function setTypeof(expr, value) {
			compiler.parser.plugin("evaluate typeof " + expr, function(expr) {
				return new BasicEvaluatedExpression().setString(value).setRange(expr.range);
			});
			compiler.parser.plugin("typeof " + expr, function(expr) {
				var dep = new ConstDependency(JSON.stringify(value), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
			var contextModuleFactory = params.contextModuleFactory;
	
			compilation.dependencyFactories.set(CommonJsRequireDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(CommonJsRequireDependency, new CommonJsRequireDependency.Template());
	
			compilation.dependencyFactories.set(CommonJsRequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(CommonJsRequireContextDependency, new CommonJsRequireContextDependency.Template());
	
			compilation.dependencyFactories.set(RequireResolveDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireResolveDependency, new RequireResolveDependency.Template());
	
			compilation.dependencyFactories.set(RequireResolveContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(RequireResolveContextDependency, new RequireResolveContextDependency.Template());
	
			compilation.dependencyFactories.set(RequireResolveHeaderDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireResolveHeaderDependency, new RequireResolveHeaderDependency.Template());
	
			compilation.dependencyFactories.set(RequireHeaderDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireHeaderDependency, new RequireHeaderDependency.Template());
		});
		setTypeof("require", "function");
		setTypeof("require.resolve", "function");
		setTypeof("require.resolveWeak", "function");
		compiler.parser.plugin("evaluate typeof module", function(expr) {
			return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
		});
		compiler.parser.plugin("assign require", function(expr) {
			// to not leak to global "require", we need to define a local require here.
			var dep = new ConstDependency("var require;", 0);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			this.scope.definitions.push("require");
			return true;
		});
		compiler.parser.plugin("can-rename require", function() {
			return true;
		});
		compiler.parser.plugin("rename require", function(expr) {
			// define the require variable. It's still undefined, but not "not defined".
			var dep = new ConstDependency("var require;", 0);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return false;
		});
		compiler.parser.plugin("typeof module", function() {
			return true;
		});
		compiler.parser.plugin("evaluate typeof exports", function(expr) {
			return new BasicEvaluatedExpression().setString("object").setRange(expr.range);
		});
		compiler.parser.apply(
			new CommonJsRequireDependencyParserPlugin(this.options),
			new RequireResolveDependencyParserPlugin(this.options)
		);
	};


/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function CommonJsRequireDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = CommonJsRequireDependency;
	
	CommonJsRequireDependency.prototype = Object.create(ModuleDependency.prototype);
	CommonJsRequireDependency.prototype.constructor = CommonJsRequireDependency;
	CommonJsRequireDependency.prototype.type = "cjs require";
	
	CommonJsRequireDependency.Template = __webpack_require__(125);


/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleDependencyTemplateAsId() {}
	module.exports = ModuleDependencyTemplateAsId;
	
	ModuleDependencyTemplateAsId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		if(!dep.range) return;
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module)
			var content = comment + JSON.stringify(dep.module.id);
		else
			var content = __webpack_require__(126).module(dep.request);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};
	
	ModuleDependencyTemplateAsId.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, name);
	};


/***/ },
/* 126 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	exports.module = function(request) {
		return "!(function webpackMissingModule() { " +
			exports.moduleCode(request) +
			" }())";
	};
	
	exports.moduleCode = function(request) {
		return "var e = new Error(" + JSON.stringify("Cannot find module \"" + request + "\"") + "); " +
			"e.code = 'MODULE_NOT_FOUND'; " +
			"throw e;";
	};
	
	exports.moduleMetaInfo = function(request) {
		return "!(function webpackMissingModuleMetaInfo() { " +
			"var e = new Error(" + JSON.stringify("Module cannot be imported because no meta info about exports is available \"" + request + "\"") + "); " +
			"e.code = 'MODULE_NOT_FOUND'; " +
			"throw e; " +
			"}())";
	};


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(128);
	
	function CommonJsRequireContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = CommonJsRequireContextDependency;
	
	CommonJsRequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	CommonJsRequireContextDependency.prototype.constructor = CommonJsRequireContextDependency;
	CommonJsRequireContextDependency.prototype.type = "cjs require context";
	
	CommonJsRequireContextDependency.Template = __webpack_require__(129);


/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(56);
	
	function ContextDependency(request, recursive, regExp) {
		Dependency.call(this);
		this.request = request;
		this.userRequest = request;
		this.recursive = recursive;
		this.regExp = regExp;
	}
	module.exports = ContextDependency;
	
	ContextDependency.prototype = Object.create(Dependency.prototype);
	ContextDependency.prototype.constructor = ContextDependency;
	ContextDependency.prototype.isEqualResource = function(other) {
		if(!(other instanceof ContextDependency))
			return false;
		return this.request === other.request &&
			this.recursive === other.recursive &&
			this.regExp === other.regExp;
	};


/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ContextDependencyTemplateAsRequireCall() {}
	module.exports = ContextDependencyTemplateAsRequireCall;
	
	ContextDependencyTemplateAsRequireCall.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module && dep.module.dependencies && dep.module.dependencies.length > 0) {
			if(dep.valueRange) {
				source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
				source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
			} else {
				source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")");
			}
		} else {
			var content = __webpack_require__(126).module(dep.request);
			source.replace(dep.range[0], dep.range[1] - 1, content);
		}
	};
	
	ContextDependencyTemplateAsRequireCall.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(dep.valueRange) {
			source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
			source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + name + ")(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
		} else {
			source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + name + ")");
		}
	};


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function RequireResolveDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = RequireResolveDependency;
	
	RequireResolveDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireResolveDependency.prototype.constructor = RequireResolveDependency;
	RequireResolveDependency.prototype.type = "require.resolve";
	
	RequireResolveDependency.Template = __webpack_require__(125);


/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(128);
	
	function RequireResolveContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = RequireResolveContextDependency;
	
	RequireResolveContextDependency.prototype = Object.create(ContextDependency.prototype);
	RequireResolveContextDependency.prototype.constructor = RequireResolveContextDependency;
	RequireResolveContextDependency.prototype.type = "amd require context";
	
	RequireResolveContextDependency.Template = __webpack_require__(132);


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ContextDependencyTemplateAsId() {}
	module.exports = ContextDependencyTemplateAsId;
	
	ContextDependencyTemplateAsId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module && dep.module.dependencies && dep.module.dependencies.length > 0) {
			if(dep.valueRange) {
				source.replace(dep.valueRange[1], dep.range[1] - 1, ")");
				source.replace(dep.range[0], dep.valueRange[0] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ").resolve(" + (typeof dep.prepend === "string" ? JSON.stringify(dep.prepend) : "") + "");
			} else {
				source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ").resolve");
			}
		} else {
			var content = __webpack_require__(126).module(dep.request);
			source.replace(dep.range[0], dep.range[1] - 1, content);
		}
	};


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	
	function RequireResolveHeaderDependency(range) {
		if(!Array.isArray(range)) throw new Error("range must be valid");
		NullDependency.call(this);
		this.range = range;
	}
	module.exports = RequireResolveHeaderDependency;
	
	RequireResolveHeaderDependency.prototype = Object.create(NullDependency.prototype);
	RequireResolveHeaderDependency.prototype.constructor = RequireResolveHeaderDependency;
	
	RequireResolveHeaderDependency.Template = function RequireResolveHeaderDependencyTemplate() {};
	
	RequireResolveHeaderDependency.Template.prototype.apply = function(dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "/*require.resolve*/");
	};
	
	RequireResolveHeaderDependency.Template.prototype.applyAsTemplateArgument = function(name, dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "/*require.resolve*/");
	};


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	
	function RequireHeaderDependency(range) {
		if(!Array.isArray(range)) throw new Error("range must be valid");
		NullDependency.call(this);
		this.range = range;
	}
	module.exports = RequireHeaderDependency;
	
	RequireHeaderDependency.prototype = Object.create(NullDependency.prototype);
	RequireHeaderDependency.prototype.constructor = RequireHeaderDependency;
	
	RequireHeaderDependency.Template = function RequireHeaderDependencyTemplate() {};
	
	RequireHeaderDependency.Template.prototype.apply = function(dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "__webpack_require__");
	};
	
	RequireHeaderDependency.Template.prototype.applyAsTemplateArgument = function(name, dep, source) {
		source.replace(dep.range[0], dep.range[1] - 1, "require");
	};


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireResolveDependency = __webpack_require__(130);
	var RequireResolveContextDependency = __webpack_require__(131);
	var RequireResolveHeaderDependency = __webpack_require__(133);
	var ContextDependencyHelpers = __webpack_require__(136);
	
	function RequireResolveDependencyParserPlugin(options) {
		this.options = options;
	}
	
	module.exports = RequireResolveDependencyParserPlugin;
	
	RequireResolveDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call require.resolve", function(expr) {
			return this.applyPluginsBailResult("call require.resolve(Weak)", expr, false);
		});
		parser.plugin("call require.resolveWeak", function(expr) {
			return this.applyPluginsBailResult("call require.resolve(Weak)", expr, true);
		});
		parser.plugin("call require.resolve(Weak)", function(expr, weak) {
			if(expr.arguments.length !== 1) return;
			var param = this.evaluateExpression(expr.arguments[0]);
			var dep;
			if(param.isConditional()) {
				param.options.forEach(function(option) {
					var result = this.applyPluginsBailResult("call require.resolve(Weak):item", expr, option, weak);
					if(result === undefined) {
						this.applyPluginsBailResult("call require.resolve(Weak):context", expr, option, weak);
					}
				}, this);
				dep = new RequireResolveHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			} else {
				var result = this.applyPluginsBailResult("call require.resolve(Weak):item", expr, param, weak);
				if(result === undefined) {
					this.applyPluginsBailResult("call require.resolve(Weak):context", expr, param, weak);
				}
				dep = new RequireResolveHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require.resolve(Weak):item", function(expr, param, weak) {
			if(param.isString()) {
				var dep = new RequireResolveDependency(param.string, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				dep.weak = weak;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require.resolve(Weak):context", function(expr, param, weak) {
			var dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			dep.weak = weak;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 136 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependencyHelpers = exports;
	
	ContextDependencyHelpers.create = function(Dep, range, param, expr, options) {
		if(param.isWrapped() && (param.prefix && param.prefix.isString() || param.postfix && param.postfix.isString())) {
			var prefix = param.prefix && param.prefix.isString() ? param.prefix.string : "";
			var postfix = param.postfix && param.postfix.isString() ? param.postfix.string : "";
			var prefixRange = param.prefix && param.prefix.isString() ? param.prefix.range : null;
			var valueRange = [prefixRange ? prefixRange[1] : param.range[0], param.range[1]];
			var idx = prefix.lastIndexOf("/");
			var context = ".";
			if(idx >= 0) {
				context = prefix.substr(0, idx);
				prefix = "." + prefix.substr(idx);
			}
			var regExp = new RegExp("^" +
				prefix.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") +
				options.wrappedContextRegExp.source +
				postfix.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&") + "$");
			var dep = new Dep(context, options.wrappedContextRecursive, regExp, range, valueRange);
			dep.loc = expr.loc;
			dep.prepend = param.prefix && param.prefix.isString() ? prefix : null;
			dep.critical = options.wrappedContextCritical && "a part of the request of a dependency is an expression";
			return dep;
		} else {
			var dep = new Dep(options.exprContextRequest, options.exprContextRecursive, options.exprContextRegExp, range, param.range);
			dep.loc = expr.loc;
			dep.critical = options.exprContextCritical && "the request of a dependency is an expression";
			return dep;
		}
	};


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConstDependency = __webpack_require__(106);
	var CommonJsRequireDependency = __webpack_require__(124);
	var CommonJsRequireContextDependency = __webpack_require__(127);
	var RequireHeaderDependency = __webpack_require__(134);
	var LocalModuleDependency = __webpack_require__(138);
	var ContextDependencyHelpers = __webpack_require__(136);
	var LocalModulesHelpers = __webpack_require__(139);
	
	function CommonJsRequireDependencyParserPlugin(options) {
		this.options = options;
	}
	
	module.exports = CommonJsRequireDependencyParserPlugin;
	
	CommonJsRequireDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("expression require.cache", function(expr) {
			var dep = new ConstDependency("__webpack_require__.c", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("expression require", function(expr) {
			var dep = new CommonJsRequireContextDependency(options.unknownContextRequest, options.unknownContextRecursive, options.unknownContextRegExp, expr.range);
			dep.critical = options.unknownContextCritical && "require function is used in a way in which dependencies cannot be statically extracted";
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("call require", function(expr) {
			if(expr.arguments.length !== 1) return;
			var localModule, dep;
			var param = this.evaluateExpression(expr.arguments[0]);
			if(param.isConditional()) {
				var isExpression = false;
				var prevLength = this.state.current.dependencies.length;
				dep = new RequireHeaderDependency(expr.callee.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:commonjs:item", expr, param);
					if(result === undefined) {
						isExpression = true;
					}
				}, this);
				if(isExpression) {
					this.state.current.dependencies.length = prevLength;
				} else {
					return true;
				}
			}
			if(param.isString() && (localModule = LocalModulesHelpers.getLocalModule(this.state, param.string))) {
				dep = new LocalModuleDependency(localModule, expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			} else {
				var result = this.applyPluginsBailResult("call require:commonjs:item", expr, param);
				if(result === undefined) {
					this.applyPluginsBailResult("call require:commonjs:context", expr, param);
				} else {
					dep = new RequireHeaderDependency(expr.callee.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
				}
				return true;
			}
		});
		parser.plugin("call require:commonjs:item", function(expr, param) {
			if(param.isString()) {
				var dep = new CommonJsRequireDependency(param.string, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:commonjs:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(CommonJsRequireContextDependency, expr.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	
	function LocalModuleDependency(localModule, range) {
		NullDependency.call(this);
		localModule.flagUsed();
		this.localModule = localModule;
		this.range = range;
	}
	module.exports = LocalModuleDependency;
	
	LocalModuleDependency.prototype = Object.create(NullDependency.prototype);
	LocalModuleDependency.prototype.constructor = LocalModuleDependency;
	
	LocalModuleDependency.Template = function LocalModuleDependencyTemplate() {};
	
	LocalModuleDependency.Template.prototype.apply = function(dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, dep.localModule.variableName());
	};


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var LocalModule = __webpack_require__(140);
	
	var LocalModulesHelpers = exports;
	
	LocalModulesHelpers.addLocalModule = function(state, name) {
		if(!state.localModules) state.localModules = [];
		var m = new LocalModule(state.module, name, state.localModules.length);
		state.localModules.push(m);
		return m;
	};
	
	LocalModulesHelpers.getLocalModule = function(state, name, namedModule) {
		if(!state.localModules) return null;
		if(namedModule) {
			// resolve dependency name relative to the defining named module
			name = lookup(namedModule, name);
		}
		for(var i = 0; i < state.localModules.length; i++) {
			if(state.localModules[i].name === name)
				return state.localModules[i];
		}
		return null;
	};
	
	function lookup(parent, mod) {
		if(mod.charAt(0) !== ".") return mod;
	
		var path = parent.split("/"),
			segs = mod.split("/");
		path.pop();
	
		for(var i = 0; i < segs.length; i++) {
			var seg = segs[i];
			if(seg === "..") path.pop();
			else if(seg !== ".") path.push(seg);
		}
	
		return path.join("/");
	}


/***/ },
/* 140 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LocalModule(module, name, idx) {
		this.module = module;
		this.name = name;
		this.idx = idx;
		this.used = false;
	}
	module.exports = LocalModule;
	
	LocalModule.prototype.flagUsed = function() {
		this.used = true;
	};
	
	LocalModule.prototype.variableName = function() {
		return "__WEBPACK_LOCAL_MODULE_" + this.idx + "__";
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	var AMDRequireDependency = __webpack_require__(142);
	var AMDRequireItemDependency = __webpack_require__(144);
	var AMDRequireArrayDependency = __webpack_require__(146);
	var AMDRequireContextDependency = __webpack_require__(147);
	var AMDDefineDependency = __webpack_require__(148);
	var LocalModuleDependency = __webpack_require__(138);
	var ConstDependency = __webpack_require__(106);
	
	var NullFactory = __webpack_require__(108);
	
	var AMDRequireDependenciesBlockParserPlugin = __webpack_require__(149);
	var AMDDefineDependencyParserPlugin = __webpack_require__(152);
	
	var ModuleAliasPlugin = __webpack_require__(115);
	
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	function AMDPlugin(options, amdOptions) {
		this.amdOptions = amdOptions;
		this.options = options;
	}
	module.exports = AMDPlugin;
	
	AMDPlugin.prototype.apply = function(compiler) {
		function setTypeof(expr, value) {
			compiler.parser.plugin("evaluate typeof " + expr, function(expr) {
				return new BasicEvaluatedExpression().setString(value).setRange(expr.range);
			});
			compiler.parser.plugin("typeof " + expr, function(expr) {
				var dep = new ConstDependency(JSON.stringify(value), expr.range);
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
	
		function setExpressionToModule(expr, module) {
			compiler.parser.plugin("expression " + expr, function(expr) {
				var dep = new AMDRequireItemDependency(module, expr.range);
				dep.userRequest = expr;
				dep.loc = expr.loc;
				this.state.current.addDependency(dep);
				return true;
			});
		}
		var amdOptions = this.amdOptions;
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
			var contextModuleFactory = params.contextModuleFactory;
	
			compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());
	
			compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());
	
			compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());
	
			compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());
	
			compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());
			compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());
	
			compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());
			compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());
		});
		compiler.parser.apply(
			new AMDRequireDependenciesBlockParserPlugin(this.options),
			new AMDDefineDependencyParserPlugin(this.options)
		);
		setExpressionToModule("require.amd", "!!webpack amd options");
		setExpressionToModule("define.amd", "!!webpack amd options");
		setExpressionToModule("define", "!!webpack amd define");
		compiler.parser.plugin("expression __webpack_amd_options__", function() {
			return this.state.current.addVariable("__webpack_amd_options__", JSON.stringify(amdOptions));
		});
		compiler.parser.plugin("evaluate typeof define.amd", function(expr) {
			return new BasicEvaluatedExpression().setString(typeof amdOptions).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate typeof require.amd", function(expr) {
			return new BasicEvaluatedExpression().setString(typeof amdOptions).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier define.amd", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(true).setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier require.amd", function(expr) {
			return new BasicEvaluatedExpression().setBoolean(true).setRange(expr.range);
		});
		setTypeof("define", "function");
		compiler.parser.plugin("can-rename define", function() {
			return true;
		});
		compiler.parser.plugin("rename define", function(expr) {
			var dep = new AMDRequireItemDependency("!!webpack amd define", expr.range);
			dep.userRequest = "define";
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return false;
		});
		setTypeof("require", "function");
		compiler.resolvers.normal.apply(
			new ModuleAliasPlugin({
				"amdefine": path.join(__dirname, "..", "..", "buildin", "amd-define.js"),
				"webpack amd options": path.join(__dirname, "..", "..", "buildin", "amd-options.js"),
				"webpack amd define": path.join(__dirname, "..", "..", "buildin", "amd-define.js")
			})
		);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	var DepBlockHelpers = __webpack_require__(143);
	
	function AMDRequireDependency(block) {
		NullDependency.call(this);
		this.block = block;
	}
	module.exports = AMDRequireDependency;
	
	AMDRequireDependency.prototype = Object.create(NullDependency.prototype);
	AMDRequireDependency.prototype.constructor = AMDRequireDependency;
	
	AMDRequireDependency.Template = function AMDRequireDependencyTemplate() {};
	
	AMDRequireDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var depBlock = dep.block;
		var wrapper = DepBlockHelpers.getLoadDepBlockWrapper(depBlock, outputOptions, requestShortener, "require");
		if(depBlock.arrayRange && !depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					wrapper[0] + "function() {");
				source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, ";}" + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason));
				source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, ")");
			}
		} else if(!depBlock.arrayRange && depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1,
					wrapper[0] + "function(__webpack_require__) {(");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, ".call(exports, __webpack_require__, exports, module));}" + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason));
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, ".call(exports, __webpack_require__, exports, module))");
			}
		} else if(depBlock.arrayRange && depBlock.functionRange) {
			if(wrapper) {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					wrapper[0] + "function(__webpack_require__) { ");
				source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
				source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
				source.insert(depBlock.functionRange[1], ".apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, "}" + (depBlock.bindThis ? ".bind(this)" : "") + wrapper[1]);
			} else {
				source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1,
					"!/* require */(" + asComment(depBlock.chunkReason) + "function() { ");
				source.insert(depBlock.arrayRange[0] + 0.9, "var __WEBPACK_AMD_REQUIRE_ARRAY__ = ");
				source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, "; (");
				source.insert(depBlock.functionRange[1], ".apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));");
				source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, "}" + (depBlock.bindThis ? ".call(this)" : "()") + ")");
			}
		}
	};
	
	function asComment(str) {
		if(!str) return "";
		return "/* " + str + " */";
	}


/***/ },
/* 143 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var DepBlockHelpers = exports;
	
	DepBlockHelpers.getLoadDepBlockWrapper = function(depBlock, outputOptions, requestShortener, name) {
		if(depBlock.chunks) {
			var chunks = depBlock.chunks.filter(function(chunk) {
				return !chunk.entry && typeof chunk.id === "number";
			});
			if(chunks.length === 1) {
				var chunk = chunks[0];
				return [
					"__webpack_require__.e" + asComment(name) + "(" + chunk.id + "" +
					(outputOptions.pathinfo && depBlock.chunkName ? "/*! " + requestShortener.shorten(depBlock.chunkName) + " */" : "") +
					asComment(depBlock.chunkReason) + ", ",
					")"
				];
			} else if(chunks.length > 0) {
				return [
					"(function(" + asComment(name) + ") {" +
					"var __WEBPACK_REMAINING_CHUNKS__ = " + chunks.length + ";" +
					"var __WEBPACK_CALLBACK__ = function() {" +
					"if(--__WEBPACK_REMAINING_CHUNKS__ < 1) (",
	
					"(__webpack_require__));" +
					"}.bind(this);" +
					chunks.map(function(chunk) {
						return "__webpack_require__.e(" + chunk.id + ", __WEBPACK_CALLBACK__);";
					}).join("") +
					"}).call(this)"
				];
			}
		}
	};
	
	function asComment(str) {
		if(!str) return "";
		return "/* " + str + " */";
	}


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function AMDRequireItemDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = AMDRequireItemDependency;
	
	AMDRequireItemDependency.prototype = Object.create(ModuleDependency.prototype);
	AMDRequireItemDependency.prototype.constructor = AMDRequireItemDependency;
	AMDRequireItemDependency.prototype.type = "amd require";
	
	AMDRequireItemDependency.Template = __webpack_require__(145);


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleDependencyTemplateAsRequireId() {}
	module.exports = ModuleDependencyTemplateAsRequireId;
	
	ModuleDependencyTemplateAsRequireId.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		if(!dep.range) return;
		var comment = "";
		if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
		if(dep.module)
			var content = "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")";
		else
			var content = __webpack_require__(126).module(dep.request);
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};
	
	ModuleDependencyTemplateAsRequireId.prototype.applyAsTemplateArgument = function(name, dep, source) {
		if(!dep.range) return;
		source.replace(dep.range[0], dep.range[1] - 1, "(__webpack_require__(" + name + "))");
	};


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Dependency = __webpack_require__(56);
	
	function AMDRequireArrayDependency(depsArray, range) {
		Dependency.call(this);
		this.depsArray = depsArray;
		this.range = range;
	}
	module.exports = AMDRequireArrayDependency;
	
	AMDRequireArrayDependency.prototype = Object.create(Dependency.prototype);
	AMDRequireArrayDependency.prototype.constructor = AMDRequireArrayDependency;
	AMDRequireArrayDependency.prototype.type = "amd require array";
	
	AMDRequireArrayDependency.Template = function AMDRequireArrayDependencyTemplate() {};
	
	AMDRequireArrayDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var content = "[" + dep.depsArray.map(function(dep) {
			if(typeof dep === "string") {
				return dep;
			} else {
				var comment = "";
				if(outputOptions.pathinfo) comment = "/*! " + requestShortener.shorten(dep.request) + " */ ";
				if(dep.module)
					return "__webpack_require__(" + comment + JSON.stringify(dep.module.id) + ")";
				else
					return __webpack_require__(126).module(dep.request);
			}
		}).join(", ") + "]";
		source.replace(dep.range[0], dep.range[1] - 1, content);
	};


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(128);
	
	function AMDRequireContextDependency(request, recursive, regExp, range, valueRange) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
		this.valueRange = valueRange;
	}
	module.exports = AMDRequireContextDependency;
	
	AMDRequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	AMDRequireContextDependency.prototype.constructor = AMDRequireContextDependency;
	AMDRequireContextDependency.prototype.type = "amd require context";
	
	AMDRequireContextDependency.Template = __webpack_require__(129);


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	
	function AMDDefineDependency(range, arrayRange, functionRange, objectRange) {
		NullDependency.call(this);
		this.range = range;
		this.arrayRange = arrayRange;
		this.functionRange = functionRange;
		this.objectRange = objectRange;
	}
	module.exports = AMDDefineDependency;
	
	AMDDefineDependency.prototype = Object.create(NullDependency.prototype);
	AMDDefineDependency.prototype.constructor = AMDDefineDependency;
	AMDDefineDependency.prototype.type = "amd define";
	
	AMDDefineDependency.Template = function AMDDefineDependencyTemplate() {};
	
	AMDDefineDependency.Template.prototype.apply = function(dep, source) {
		var localModuleVar = dep.localModule && dep.localModule.used && dep.localModule.variableName();
	
		function replace(def, text) {
			if(localModuleVar) text = text.replace(/XXX/g, localModuleVar.replace(/\$/g, "$$$$"));
			if(localModuleVar) def = def.replace(/XXX/g, localModuleVar.replace(/\$/g, "$$$$"));
			var texts = text.split("#");
			if(def)
				source.insert(0, def);
			var current = dep.range[0];
			if(dep.arrayRange) {
				source.replace(current, dep.arrayRange[0] - 1, texts.shift());
				current = dep.arrayRange[1];
			}
			if(dep.objectRange) {
				source.replace(current, dep.objectRange[0] - 1, texts.shift());
				current = dep.objectRange[1];
			} else if(dep.functionRange) {
				source.replace(current, dep.functionRange[0] - 1, texts.shift());
				current = dep.functionRange[1];
			}
			source.replace(current, dep.range[1] - 1, texts.shift());
			if(texts.length > 0)
				throw new Error("Implementation error");
		}
		var branch = (localModuleVar ? "l" : "") + (dep.arrayRange ? "a" : "") + (dep.objectRange ? "o" : "") + (dep.functionRange ? "f" : "");
		var defs = {
			f: ["var __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_RESULT__ = #.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			o: ["", "!(module.exports = #)"],
			of: ["var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			af: ["var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_RESULT__ = #.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			ao: ["", "!(#, module.exports = #)"],
			aof: ["var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))"],
			lf: ["var XXX;", "!(XXX = #.call(exports, __webpack_require__, exports, module))"],
			lo: ["var XXX;", "!(XXX = #)"],
			lof: ["var __WEBPACK_AMD_DEFINE_FACTORY__, XXX;", "!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#), XXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__))"],
			laf: ["var __WEBPACK_AMD_DEFINE_ARRAY__, XXX;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, XXX = (#.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))"],
			lao: ["var XXX;", "!(#, XXX = #)"],
			laof: ["var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, XXX;", "!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#), XXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__))"]
		};
		replace.apply(null, defs[branch]);
	};


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AMDRequireItemDependency = __webpack_require__(144);
	var AMDRequireArrayDependency = __webpack_require__(146);
	var AMDRequireContextDependency = __webpack_require__(147);
	var AMDRequireDependenciesBlock = __webpack_require__(150);
	var LocalModuleDependency = __webpack_require__(138);
	var ContextDependencyHelpers = __webpack_require__(136);
	var LocalModulesHelpers = __webpack_require__(139);
	var ConstDependency = __webpack_require__(106);
	var getFunctionExpression = __webpack_require__(151);
	
	function AMDRequireDependenciesBlockParserPlugin(options) {
		this.options = options;
	}
	
	module.exports = AMDRequireDependenciesBlockParserPlugin;
	
	AMDRequireDependenciesBlockParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call require", function(expr) {
			switch(expr.arguments.length) {
				case 1:
					var param = this.evaluateExpression(expr.arguments[0]);
					var result;
					var dep = new AMDRequireDependenciesBlock(expr, param.range, null, this.state.module, expr.loc);
					var old = this.state.current;
					this.state.current = dep;
					this.inScope([], function() {
						result = this.applyPluginsBailResult("call require:amd:array", expr, param);
					}.bind(this));
					this.state.current = old;
					if(!result) return;
					this.state.current.addBlock(dep);
					return true;
				case 2:
					var param = this.evaluateExpression(expr.arguments[0]);
					var dep = new AMDRequireDependenciesBlock(expr, param.range, expr.arguments[1].range, this.state.module, expr.loc);
					dep.loc = expr.loc;
					var old = this.state.current;
					this.state.current = dep;
					try {
						var result;
						this.inScope([], function() {
							result = this.applyPluginsBailResult("call require:amd:array", expr, param);
						}.bind(this));
						if(!result) return;
						var fnData = getFunctionExpression(expr.arguments[1]);
						if(fnData) {
							this.inScope(fnData.fn.params.filter(function(i) {
								return ["require", "module", "exports"].indexOf(i.name) < 0;
							}), function() {
								if(fnData.fn.body.type === "BlockStatement")
									this.walkStatement(fnData.fn.body);
								else
									this.walkExpression(fnData.fn.body);
							}.bind(this));
							this.walkExpressions(fnData.expressions);
							if(fnData.needThis === false) {
								// smaller bundles for simple function expression
								dep.bindThis = false;
							}
						} else {
							this.walkExpression(expr.arguments[1]);
						}
					} finally {
						this.state.current = old;
						this.state.current.addBlock(dep);
					}
					return true;
			}
		});
		parser.plugin("call require:amd:array", function(expr, param) {
			if(param.isArray()) {
				param.items.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call require:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isConstArray()) {
				var deps = [];
				param.array.forEach(function(request) {
					var dep, localModule;
					if(request === "require") {
						dep = "__webpack_require__";
					} else if(["exports", "module"].indexOf(request) >= 0) {
						dep = request;
					} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, request)) { // eslint-disable-line no-cond-assign
						dep = new LocalModuleDependency(localModule);
						dep.loc = expr.loc;
						this.state.current.addDependency(dep);
					} else {
						dep = new AMDRequireItemDependency(request);
						dep.loc = expr.loc;
						dep.optional = !!this.scope.inTry;
						this.state.current.addDependency(dep);
					}
					deps.push(dep);
				}, this);
				var dep = new AMDRequireArrayDependency(deps, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:amd:item", function(expr, param) {
			if(param.isConditional()) {
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call require:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call require:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isString()) {
				var dep, localModule;
				if(param.string === "require") {
					dep = new ConstDependency("__webpack_require__", param.string);
				} else if(["exports", "module"].indexOf(param.string) >= 0) {
					dep = new ConstDependency(param.string, param.range);
				} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, param.string)) { // eslint-disable-line no-cond-assign
					dep = new LocalModuleDependency(localModule, param.range);
				} else {
					dep = new AMDRequireItemDependency(param.string, param.range);
				}
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call require:amd:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AsyncDependenciesBlock = __webpack_require__(77);
	var AMDRequireDependency = __webpack_require__(142);
	
	function AMDRequireDependenciesBlock(expr, arrayRange, functionRange, module, loc) {
		AsyncDependenciesBlock.call(this, null, module, loc);
		this.expr = expr;
		this.outerRange = expr.range;
		this.arrayRange = arrayRange;
		this.functionRange = functionRange;
		this.bindThis = true;
		this.range = arrayRange && functionRange ? [arrayRange[0], functionRange[1]] :
			arrayRange ? arrayRange :
			functionRange ? functionRange :
			expr.range;
		var dep = new AMDRequireDependency(this);
		dep.loc = loc;
		this.addDependency(dep);
	}
	module.exports = AMDRequireDependenciesBlock;
	
	AMDRequireDependenciesBlock.prototype = Object.create(AsyncDependenciesBlock.prototype);


/***/ },
/* 151 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(expr) {
		// <FunctionExpression>
		if(expr.type === "FunctionExpression") {
			return {
				fn: expr,
				expressions: [],
				needThis: false
			};
		}
		// <FunctionExpression>.bind(<Expression>)
		if(expr.type === "CallExpression" &&
			expr.callee.type === "MemberExpression" &&
			expr.callee.object.type === "FunctionExpression" &&
			expr.callee.property.type === "Identifier" &&
			expr.callee.property.name === "bind" &&
			expr.arguments.length === 1) {
			return {
				fn: expr.callee.object,
				expressions: [expr.arguments[0]]
			};
		}
		// (function(_this) {return <FunctionExpression>})(this) (Coffeescript)
		if(expr.type === "CallExpression" &&
			expr.callee.type === "FunctionExpression" &&
			expr.callee.body.type === "BlockStatement" &&
			expr.arguments.length === 1 &&
			expr.arguments[0].type === "ThisExpression" &&
			expr.callee.body.body &&
			expr.callee.body.body.length === 1 &&
			expr.callee.body.body[0].type === "ReturnStatement" &&
			expr.callee.body.body[0].argument &&
			expr.callee.body.body[0].argument.type === "FunctionExpression") {
			return {
				fn: expr.callee.body.body[0].argument,
				expressions: [],
				needThis: true
			};
		}
	};


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AMDRequireItemDependency = __webpack_require__(144);
	var AMDRequireContextDependency = __webpack_require__(147);
	var ConstDependency = __webpack_require__(106);
	var AMDDefineDependency = __webpack_require__(148);
	var AMDRequireArrayDependency = __webpack_require__(146);
	var LocalModuleDependency = __webpack_require__(138);
	var ContextDependencyHelpers = __webpack_require__(136);
	var LocalModulesHelpers = __webpack_require__(139);
	
	function isBoundFunctionExpression(expr) {
		if(expr.type !== "CallExpression") return false;
		if(expr.callee.type !== "MemberExpression") return false;
		if(expr.callee.computed) return false;
		if(expr.callee.object.type !== "FunctionExpression") return false;
		if(expr.callee.property.type !== "Identifier") return false;
		if(expr.callee.property.name !== "bind") return false;
		return true;
	}
	
	function AMDDefineDependencyParserPlugin(options) {
		this.options = options;
	}
	
	module.exports = AMDDefineDependencyParserPlugin;
	AMDDefineDependencyParserPlugin.prototype.apply = function(parser) {
		var options = this.options;
		parser.plugin("call define", function(expr) {
			var array, fn, obj, namedModule;
			switch(expr.arguments.length) {
				case 1:
					if(expr.arguments[0].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[0])) {
						// define(f() {...})
						fn = expr.arguments[0];
					} else if(expr.arguments[0].type === "ObjectExpression") {
						// define({...})
						obj = expr.arguments[0];
					} else {
						// define(expr)
						// unclear if function or object
						obj = fn = expr.arguments[0];
					}
					break;
				case 2:
					if(expr.arguments[0].type === "Literal") {
						namedModule = expr.arguments[0].value;
						// define("...", ...)
						if(expr.arguments[1].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[1])) {
							// define("...", f() {...})
							fn = expr.arguments[1];
						} else if(expr.arguments[1].type === "ObjectExpression") {
							// define("...", {...})
							obj = expr.arguments[1];
						} else {
							// define("...", expr)
							// unclear if function or object
							obj = fn = expr.arguments[1];
						}
					} else {
						array = expr.arguments[0];
						if(expr.arguments[1].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[1])) {
							// define([...], f() {})
							fn = expr.arguments[1];
						} else if(expr.arguments[1].type === "ObjectExpression") {
							// define([...], {...})
							obj = expr.arguments[1];
						} else {
							// define([...], expr)
							// unclear if function or object
							obj = fn = expr.arguments[1];
						}
					}
					break;
				case 3:
					// define("...", [...], f() {...})
					namedModule = expr.arguments[0].value;
					array = expr.arguments[1];
					if(expr.arguments[2].type === "FunctionExpression" || isBoundFunctionExpression(expr.arguments[2])) {
						// define("...", [...], f() {})
						fn = expr.arguments[2];
					} else if(expr.arguments[2].type === "ObjectExpression") {
						// define("...", [...], {...})
						obj = expr.arguments[2];
					} else {
						// define("...", [...], expr)
						// unclear if function or object
						obj = fn = expr.arguments[2];
					}
					break;
				default:
					return;
			}
			var fnParams = null;
			var fnParamsOffset = 0;
			if(fn) {
				if(fn.type === "FunctionExpression") fnParams = fn.params;
				else if(isBoundFunctionExpression(fn)) {
					fnParams = fn.callee.object.params;
					fnParamsOffset = fn.arguments.length - 1;
					if(fnParamsOffset < 0) fnParamsOffset = 0;
				}
			}
			var fnRenames = Object.create(this.scope.renames);
			var identifiers;
			if(array) {
				identifiers = {};
				var param = this.evaluateExpression(array);
				var result = this.applyPluginsBailResult("call define:amd:array", expr, param, identifiers, namedModule);
				if(!result) return;
				if(fnParams) fnParams = fnParams.slice(fnParamsOffset).filter(function(param, idx) {
					if(identifiers[idx]) {
						fnRenames["$" + param.name] = identifiers[idx];
						return false;
					}
					return true;
				});
			} else {
				identifiers = ["require", "exports", "module"];
				if(fnParams) fnParams = fnParams.slice(fnParamsOffset).filter(function(param, idx) {
					if(identifiers[idx]) {
						fnRenames["$" + param.name] = identifiers[idx];
						return false;
					}
					return true;
				});
			}
			var inTry;
			if(fn && fn.type === "FunctionExpression") {
				inTry = this.scope.inTry;
				this.inScope(fnParams, function() {
					this.scope.renames = fnRenames;
					this.scope.inTry = inTry;
					if(fn.body.type === "BlockStatement")
						this.walkStatement(fn.body);
					else
						this.walkExpression(fn.body);
				}.bind(this));
			} else if(fn && isBoundFunctionExpression(fn)) {
				inTry = this.scope.inTry;
				this.inScope(fn.callee.object.params.filter(function(i) {
					return ["require", "module", "exports"].indexOf(i.name) < 0;
				}), function() {
					this.scope.renames = fnRenames;
					this.scope.inTry = inTry;
					if(fn.callee.object.body.type === "BlockStatement")
						this.walkStatement(fn.callee.object.body);
					else
						this.walkExpression(fn.callee.object.body);
				}.bind(this));
				if(fn.arguments)
					this.walkExpressions(fn.arguments);
			} else if(fn || obj) {
				this.walkExpression(fn || obj);
			}
			var dep = new AMDDefineDependency(expr.range, array ? array.range : null, fn ? fn.range : null, obj ? obj.range : null);
			dep.loc = expr.loc;
			if(namedModule) {
				dep.localModule = LocalModulesHelpers.addLocalModule(this.state, namedModule);
			}
			this.state.current.addDependency(dep);
			return true;
		});
		parser.plugin("call define:amd:array", function(expr, param, identifiers, namedModule) {
			if(param.isArray()) {
				param.items.forEach(function(param, idx) {
					if(param.isString() && ["require", "module", "exports"].indexOf(param.string) >= 0)
						identifiers[idx] = param.string;
					var result = this.applyPluginsBailResult("call define:amd:item", expr, param, namedModule);
					if(result === undefined) {
						this.applyPluginsBailResult("call define:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isConstArray()) {
				var deps = [];
				param.array.forEach(function(request, idx) {
					var dep, localModule;
					if(request === "require") {
						identifiers[idx] = request;
						dep = "__webpack_require__";
					} else if(["exports", "module"].indexOf(request) >= 0) {
						identifiers[idx] = request;
						dep = request;
					} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, request)) { // eslint-disable-line no-cond-assign
						dep = new LocalModuleDependency(localModule);
						dep.loc = expr.loc;
						this.state.current.addDependency(dep);
					} else {
						dep = new AMDRequireItemDependency(request);
						dep.loc = expr.loc;
						dep.optional = !!this.scope.inTry;
						this.state.current.addDependency(dep);
					}
					deps.push(dep);
				}, this);
				var dep = new AMDRequireArrayDependency(deps, param.range);
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call define:amd:item", function(expr, param, namedModule) {
			if(param.isConditional()) {
				param.options.forEach(function(param) {
					var result = this.applyPluginsBailResult("call define:amd:item", expr, param);
					if(result === undefined) {
						this.applyPluginsBailResult("call define:amd:context", expr, param);
					}
				}, this);
				return true;
			} else if(param.isString()) {
				var dep, localModule;
				if(param.string === "require") {
					dep = new ConstDependency("__webpack_require__", param.range);
				} else if(["require", "exports", "module"].indexOf(param.string) >= 0) {
					dep = new ConstDependency(param.string, param.range);
				} else if(localModule = LocalModulesHelpers.getLocalModule(this.state, param.string, namedModule)) { // eslint-disable-line no-cond-assign
					dep = new LocalModuleDependency(localModule, param.range);
				} else {
					dep = new AMDRequireItemDependency(param.string, param.range);
				}
				dep.loc = expr.loc;
				dep.optional = !!this.scope.inTry;
				this.state.current.addDependency(dep);
				return true;
			}
		});
		parser.plugin("call define:amd:context", function(expr, param) {
			var dep = ContextDependencyHelpers.create(AMDRequireContextDependency, param.range, param, expr, options);
			if(!dep) return;
			dep.loc = expr.loc;
			dep.optional = !!this.scope.inTry;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireContextDependency = __webpack_require__(154);
	var ContextElementDependency = __webpack_require__(82);
	
	var RequireContextDependencyParserPlugin = __webpack_require__(155);
	
	function RequireContextPlugin(modulesDirectories, extensions) {
		this.modulesDirectories = modulesDirectories;
		this.extensions = extensions;
	}
	module.exports = RequireContextPlugin;
	
	RequireContextPlugin.prototype.apply = function(compiler) {
		var modulesDirectories = this.modulesDirectories;
		var extensions = this.extensions;
		compiler.plugin("compilation", function(compilation, params) {
			var contextModuleFactory = params.contextModuleFactory;
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(RequireContextDependency, contextModuleFactory);
			compilation.dependencyTemplates.set(RequireContextDependency, new RequireContextDependency.Template());
	
			compilation.dependencyFactories.set(ContextElementDependency, normalModuleFactory);
		});
		compiler.plugin("context-module-factory", function(cmf) {
			cmf.plugin("alternatives", function(items, callback) {
				if(items.length === 0) return callback(null, items);
	
				callback(null, items.map(function(obj) {
					return extensions.filter(function(ext) {
						var l = obj.request.length;
						return l > ext.length && obj.request.substr(l - ext.length, l) === ext;
					}).map(function(ext) {
						var l = obj.request.length;
						return {
							context: obj.context,
							request: obj.request.substr(0, l - ext.length)
						};
					});
				}).reduce(function(a, b) {
					return a.concat(b);
				}, []));
			});
			cmf.plugin("alternatives", function(items, callback) {
				if(items.length === 0) return callback(null, items);
	
				callback(null, items.map(function(obj) {
					for(var i = 0; i < modulesDirectories.length; i++) {
						var dir = modulesDirectories[i];
						var idx = obj.request.indexOf("./" + dir + "/");
						if(idx === 0) {
							obj.request = obj.request.slice(dir.length + 3);
							break;
						}
					}
					return obj;
				}));
			});
		});
		new RequireContextDependencyParserPlugin().apply(compiler.parser);
	};


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ContextDependency = __webpack_require__(128);
	
	function RequireContextDependency(request, recursive, regExp, range) {
		ContextDependency.call(this, request, recursive, regExp);
		this.range = range;
	}
	module.exports = RequireContextDependency;
	
	RequireContextDependency.prototype = Object.create(ContextDependency.prototype);
	RequireContextDependency.prototype.constructor = RequireContextDependency;
	RequireContextDependency.prototype.type = "require.context";
	
	RequireContextDependency.Template = __webpack_require__(145);


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(156);
	var RequireContextDependency = __webpack_require__(154);
	
	module.exports = AbstractPlugin.create({
		"call require.context": function(expr) {
			var regExp = /^\.\/.*$/;
			var recursive = true;
			switch(expr.arguments.length) {
				case 3:
					var regExpExpr = this.evaluateExpression(expr.arguments[2]);
					if(!regExpExpr.isRegExp()) return;
					regExp = regExpExpr.regExp;
					// falls through
				case 2:
					var recursiveExpr = this.evaluateExpression(expr.arguments[1]);
					if(!recursiveExpr.isBoolean()) return;
					recursive = recursiveExpr.bool;
					// falls through
				case 1:
					var requestExpr = this.evaluateExpression(expr.arguments[0]);
					if(!requestExpr.isString()) return;
					var dep = new RequireContextDependency(requestExpr.string, recursive, regExp, expr.range);
					dep.loc = expr.loc;
					dep.optional = this.scope.inTry;
					this.state.current.addDependency(dep);
					return true;
			}
		}
	});


/***/ },
/* 156 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function AbstractPlugin(plugins) {
		this._plugins = plugins || {};
	}
	module.exports = AbstractPlugin;
	
	AbstractPlugin.create = function(plugins) {
		function Plugin() {
			AbstractPlugin.call(this, plugins);
		}
		Plugin.prototype = Object.create(AbstractPlugin.prototype);
		return Plugin;
	};
	
	AbstractPlugin.prototype.apply = function(object) {
		for(var name in this._plugins) {
			object.plugin(name, this._plugins[name]);
		}
	};


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireEnsureItemDependency = __webpack_require__(158);
	var RequireEnsureDependency = __webpack_require__(160);
	var ConstDependency = __webpack_require__(106);
	
	var NullFactory = __webpack_require__(108);
	
	var RequireEnsureDependenciesBlockParserPlugin = __webpack_require__(161);
	
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	function RequireEnsurePlugin() {}
	module.exports = RequireEnsurePlugin;
	
	RequireEnsurePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(RequireEnsureItemDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireEnsureItemDependency, new RequireEnsureItemDependency.Template());
	
			compilation.dependencyFactories.set(RequireEnsureDependency, new NullFactory());
			compilation.dependencyTemplates.set(RequireEnsureDependency, new RequireEnsureDependency.Template());
		});
		new RequireEnsureDependenciesBlockParserPlugin().apply(compiler.parser);
		compiler.parser.plugin("evaluate typeof require.ensure", function(expr) {
			return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
		});
		compiler.parser.plugin("typeof require.ensure", function(expr) {
			var dep = new ConstDependency("'function'", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function RequireEnsureItemDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = RequireEnsureItemDependency;
	
	RequireEnsureItemDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireEnsureItemDependency.prototype.constructor = RequireEnsureItemDependency;
	RequireEnsureItemDependency.prototype.type = "require.ensure item";
	
	RequireEnsureItemDependency.Template = __webpack_require__(159);


/***/ },
/* 159 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function NullDependencyTemplate() {}
	module.exports = NullDependencyTemplate;
	
	NullDependencyTemplate.prototype.apply = function() {};


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NullDependency = __webpack_require__(107);
	var DepBlockHelpers = __webpack_require__(143);
	
	function RequireEnsureDependency(block) {
		NullDependency.call(this);
		this.block = block;
	}
	module.exports = RequireEnsureDependency;
	
	RequireEnsureDependency.prototype = Object.create(NullDependency.prototype);
	RequireEnsureDependency.prototype.constructor = RequireEnsureDependency;
	RequireEnsureDependency.prototype.type = "require.ensure";
	
	RequireEnsureDependency.Template = function RequireEnsureDependencyTemplate() {};
	
	RequireEnsureDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var depBlock = dep.block;
		var wrapper = DepBlockHelpers.getLoadDepBlockWrapper(depBlock, outputOptions, requestShortener, /*require.e*/ "nsure");
		if(!wrapper) wrapper = [
			"!/* require.ensure */(",
			"(__webpack_require__))"
		];
		source.replace(depBlock.expr.range[0], depBlock.expr.arguments[1].range[0] - 1, wrapper[0]);
		source.replace(depBlock.expr.arguments[1].range[1], depBlock.expr.range[1] - 1, wrapper[1]);
	};


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(156);
	var RequireEnsureDependenciesBlock = __webpack_require__(162);
	var RequireEnsureItemDependency = __webpack_require__(158);
	var getFunctionExpression = __webpack_require__(151);
	
	module.exports = AbstractPlugin.create({
		"call require.ensure": function(expr) {
			var chunkName = null,
				chunkNameRange = null;
			switch(expr.arguments.length) {
				case 3:
					var chunkNameExpr = this.evaluateExpression(expr.arguments[2]);
					if(!chunkNameExpr.isString()) return;
					chunkNameRange = chunkNameExpr.range;
					chunkName = chunkNameExpr.string;
					// falls through
				case 2:
					var dependenciesExpr = this.evaluateExpression(expr.arguments[0]);
					var dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];
					var fnExpressionArg = expr.arguments[1];
					var fnExpression = getFunctionExpression(fnExpressionArg);
	
					if(fnExpression) {
						this.walkExpressions(fnExpression.expressions);
					}
	
					var dep = new RequireEnsureDependenciesBlock(expr, fnExpression ? fnExpression.fn : fnExpressionArg, chunkName, chunkNameRange, this.state.module, expr.loc);
					var old = this.state.current;
					this.state.current = dep;
					try {
						var failed = false;
						this.inScope([], function() {
							dependenciesItems.forEach(function(ee) {
								if(ee.isString()) {
									var edep = new RequireEnsureItemDependency(ee.string, ee.range);
									edep.loc = dep.loc;
									dep.addDependency(edep);
								} else {
									failed = true;
								}
							});
						});
						if(failed) {
							return;
						}
						if(fnExpression) {
							if(fnExpression.fn.body.type === "BlockStatement")
								this.walkStatement(fnExpression.fn.body);
							else
								this.walkExpression(fnExpression.fn.body);
						}
						old.addBlock(dep);
					} finally {
						this.state.current = old;
					}
					if(!fnExpression) {
						this.walkExpression(fnExpressionArg);
					}
					return true;
			}
		}
	});


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AsyncDependenciesBlock = __webpack_require__(77);
	var RequireEnsureDependency = __webpack_require__(160);
	
	function RequireEnsureDependenciesBlock(expr, fnExpression, chunkName, chunkNameRange, module, loc) {
		AsyncDependenciesBlock.call(this, chunkName, module, loc);
		this.expr = expr;
		var bodyRange = fnExpression && fnExpression.body && fnExpression.body.range;
		this.range = bodyRange && [bodyRange[0] + 1, bodyRange[1] - 1] || null;
		this.chunkNameRange = chunkNameRange;
		var dep = new RequireEnsureDependency(this);
		dep.loc = loc;
		this.addDependency(dep);
	}
	module.exports = RequireEnsureDependenciesBlock;
	
	RequireEnsureDependenciesBlock.prototype = Object.create(AsyncDependenciesBlock.prototype);


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var RequireIncludeDependency = __webpack_require__(164);
	var RequireIncludeDependencyParserPlugin = __webpack_require__(165);
	var ConstDependency = __webpack_require__(106);
	
	var BasicEvaluatedExpression = __webpack_require__(62);
	
	function RequireIncludePlugin() {}
	module.exports = RequireIncludePlugin;
	
	RequireIncludePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(RequireIncludeDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(RequireIncludeDependency, new RequireIncludeDependency.Template());
		});
		new RequireIncludeDependencyParserPlugin().apply(compiler.parser);
		compiler.parser.plugin("evaluate typeof require.include", function(expr) {
			return new BasicEvaluatedExpression().setString("function").setRange(expr.range);
		});
		compiler.parser.plugin("typeof require.include", function(expr) {
			var dep = new ConstDependency("'function'", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
	};


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function RequireIncludeDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
	}
	module.exports = RequireIncludeDependency;
	
	RequireIncludeDependency.prototype = Object.create(ModuleDependency.prototype);
	RequireIncludeDependency.prototype.constructor = RequireIncludeDependency;
	RequireIncludeDependency.prototype.type = "require.include";
	
	RequireIncludeDependency.Template = function RequireIncludeDependencyTemplate() {};
	
	RequireIncludeDependency.Template.prototype.apply = function(dep, source, outputOptions, requestShortener) {
		var comment = "";
		if(outputOptions.pathinfo && dep.module)
			comment = "/*! require.include " + requestShortener.shorten(dep.request) + " */";
		source.replace(dep.range[0], dep.range[1] - 1,
			"undefined" + comment);
	};


/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var AbstractPlugin = __webpack_require__(156);
	var RequireIncludeDependency = __webpack_require__(164);
	
	module.exports = AbstractPlugin.create({
		"call require.include": function(expr) {
			if(expr.arguments.length !== 1) return;
			var param = this.evaluateExpression(expr.arguments[0]);
			if(!param.isString()) return;
			var dep = new RequireIncludeDependency(param.string, expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		}
	});


/***/ },
/* 166 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function hasModule(chunk, module, checkedChunks) {
		if(chunk.modules.indexOf(module) >= 0) return [chunk];
		if(chunk.entry) return false;
		return allHaveModule(chunk.parents.filter(function(c) {
			return checkedChunks.indexOf(c) < 0;
		}), module, checkedChunks);
	}
	
	function allHaveModule(someChunks, module, checkedChunks) {
		if(!checkedChunks) checkedChunks = [];
		var chunks = [];
		for(var i = 0; i < someChunks.length; i++) {
			checkedChunks.push(someChunks[i]);
			var subChunks = hasModule(someChunks[i], module, checkedChunks);
			if(!subChunks) return false;
			addToSet(chunks, subChunks);
		}
		return chunks;
	}
	
	function addToSet(set, items) {
		items.forEach(function(item) {
			if(set.indexOf(item) < 0)
				set.push(item);
		});
	}
	
	function RemoveParentModulesPlugin() {}
	module.exports = RemoveParentModulesPlugin;
	
	RemoveParentModulesPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin(["optimize-chunks", "optimize-extracted-chunks"], function(chunks) {
				chunks.forEach(function(chunk) {
					chunk.modules.slice().forEach(function(module) {
						if(chunk.entry) return;
						var parentChunksWithModule = allHaveModule(chunk.parents, module);
						if(parentChunksWithModule) {
							module.rewriteChunkInReasons(chunk, parentChunksWithModule);
							chunk.removeModule(module);
						}
					});
				});
			});
		});
	};


/***/ },
/* 167 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function RemoveEmptyChunksPlugin() {}
	module.exports = RemoveEmptyChunksPlugin;
	
	RemoveEmptyChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin(["optimize-chunks", "optimize-extracted-chunks"], function(chunks) {
				chunks.filter(function(chunk) {
					return chunk.isEmpty() && !chunk.initial;
				}).forEach(function(chunk) {
					chunk.remove("empty");
					chunks.splice(chunks.indexOf(chunk), 1);
				});
			});
		});
	};


/***/ },
/* 168 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MergeDuplicateChunksPlugin() {}
	module.exports = MergeDuplicateChunksPlugin;
	
	function getChunkIdentifier(chunk) {
		return chunk.modules.map(function(m) {
			return m.identifier();
		}).sort().join(", ");
	}
	
	MergeDuplicateChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {
				var map = {};
				chunks.slice().forEach(function(chunk) {
					if(chunk.initial) return;
					var ident = getChunkIdentifier(chunk);
					if(map[ident]) {
						if(map[ident].integrate(chunk, "duplicate"))
							chunks.splice(chunks.indexOf(chunk), 1);
						return;
					}
					map[ident] = chunk;
				});
			});
		});
	};


/***/ },
/* 169 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function FlagIncludedChunksPlugin() {}
	module.exports = FlagIncludedChunksPlugin;
	
	FlagIncludedChunksPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunk-ids", function(chunks) {
				chunks.forEach(function(chunkA) {
					chunks.forEach(function(chunkB) {
						if(chunkA === chunkB) return;
						// is chunkB in chunkA?
						if(chunkA.modules.length < chunkB.modules.length) return;
						for(var i = 0; i < chunkB.modules.length; i++) {
							if(chunkA.modules.indexOf(chunkB.modules[i]) < 0) return;
						}
						chunkA.ids.push(chunkB.id);
					});
				});
			});
		});
	};


/***/ },
/* 170 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function UnsafeCachePlugin(regExps, cache) {
		this.regExps = regExps || [/./];
		if(this.regExps === true) this.regExps = [/./];
		else if(!Array.isArray(this.regExps)) this.regExps = [this.regExps];
		this.cache = cache || {};
	}
	module.exports = UnsafeCachePlugin;
	
	UnsafeCachePlugin.prototype.apply = function(resolver) {
		var oldResolve = resolver.resolve;
		var regExps = this.regExps;
		var cache = this.cache;
		resolver.resolve = function resolve(context, request, callback) {
			var id = context + "->" + request;
			if(cache[id]) {
				// From cache
				return callback(null, cache[id]);
			}
			oldResolve.call(resolver, context, request, function(err, result) {
				if(err) return callback(err);
				var doCache = regExps.some(function(regExp) {
					return regExp.test(result.path);
				});
				if(!doCache) return callback(null, result);
				callback(null, cache[id] = result);
			});
		};
	};


/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	var popPathSeqment = __webpack_require__(172);
	
	function ModulesInDirectoriesPlugin(moduleType, directories) {
		this.moduleType = moduleType;
		this.directories = directories;
	}
	module.exports = ModulesInDirectoriesPlugin;
	
	ModulesInDirectoriesPlugin.prototype.apply = function(resolver) {
		var moduleType = this.moduleType;
		var directories = this.directories;
		resolver.plugin("module", function(request, callback) {
			var fs = this.fileSystem;
			var paths = [request.path];
			var addr = [request.path];
			var pathSeqment = popPathSeqment(addr);
			var topLevelCallback = callback;
			while(pathSeqment) {
				paths.push(addr[0]);
				pathSeqment = popPathSeqment(addr);
			}
			var addrs = paths.map(function(p) {
				return directories.map(function(d) {
					return this.join(p, d);
				}, this);
			}, this).reduce(function(array, p) {
				array.push.apply(array, p);
				return array;
			}, []);
			this.forEachBail(addrs, function(addr, callback) {
				fs.stat(addr, function(err, stat) {
					if(!err && stat && stat.isDirectory()) {
						this.applyPluginsParallelBailResult("module-" + moduleType, {
							path: addr,
							request: request.request,
							query: request.query,
							directory: request.directory
						}, createInnerCallback(function(err, result) {
							if(err) return callback(err);
							if(!result) return callback();
							return callback(null, result);
						}, topLevelCallback, "looking for modules in " + addr));
						return;
					}
					return callback();
				}.bind(this));
			}.bind(this), function(err, result) {
				if(err) return callback(err);
				if(!result) return callback();
				return callback(null, result);
			});
		});
	};


/***/ },
/* 172 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function popPathSeqment(pathInArray) {
		var i = pathInArray[0].lastIndexOf("/"),
			j = pathInArray[0].lastIndexOf("\\");
		var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
		if(p < 0) return null;
		var s = pathInArray[0].substr(p+1);
		pathInArray[0] = pathInArray[0].substr(0, p || 1);
		return s;
	};


/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function ModulesInRootPlugin(moduleType, path) {
		this.moduleType = moduleType;
		this.path = path;
	}
	module.exports = ModulesInRootPlugin;
	
	ModulesInRootPlugin.prototype.apply = function(resolver) {
		var moduleType = this.moduleType;
		var path = this.path;
		resolver.plugin("module", function(request, callback) {
			this.applyPluginsParallelBailResult("module-" + moduleType, {
				path: path,
				request: request.request,
				query: request.query,
				directory: request.directory
			}, createInnerCallback(function innerCallback(err, result) {
				if(err) return callback(err);
				if(!result) return callback();
				return callback(null, result);
			}, callback, "looking for modules in " + path));
		});
	};


/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function ModuleTemplatesPlugin(moduleType, templates, targetModuleType) {
		this.moduleType = moduleType;
		this.targetModuleType = targetModuleType;
		this.templates = templates;
	}
	module.exports = ModuleTemplatesPlugin;
	
	ModuleTemplatesPlugin.prototype.apply = function(resolver) {
		var templates = this.templates;
		var targetModuleType = this.targetModuleType;
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var topLevelCallback = callback;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
			var moduleName, remainingRequest;
			if(p < 0) {
				moduleName = request.request;
				remainingRequest = "";
			} else {
				moduleName = request.request.substr(0, p);
				remainingRequest = request.request.substr(p);
			}
			this.forEachBail(templates, function(template, callback) {
				var moduleFinalName = template.replace(/\*/g, moduleName);
				this.applyPluginsParallelBailResult("module-" + targetModuleType, {
					path: request.path,
					request: moduleFinalName + remainingRequest,
					query: request.query,
					directory: request.directory
				}, createInnerCallback(function(err, result) {
					if(err) return callback(err);
					if(!result) return callback();
					return callback(null, result);
				}, topLevelCallback, "module variation " + moduleFinalName));
			}.bind(this), callback);
		});
	};


/***/ },
/* 175 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleAsFilePlugin(moduleType) {
		this.moduleType = moduleType;
	}
	module.exports = ModuleAsFilePlugin;
	
	ModuleAsFilePlugin.prototype.apply = function(resolver) {
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			if(i >= 0 || j >= 0 || request.directory) return callback();
			return this.doResolve("file", request, callback, true);
		});
	};


/***/ },
/* 176 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function ModuleAsDirectoryPlugin(moduleType) {
		this.moduleType = moduleType;
	}
	module.exports = ModuleAsDirectoryPlugin;
	
	ModuleAsDirectoryPlugin.prototype.apply = function(resolver) {
		resolver.plugin("module-" + this.moduleType, function(request, callback) {
			var fs = this.fileSystem;
			var i = request.request.indexOf("/"),
				j = request.request.indexOf("\\");
			var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
			var moduleName, remainingRequest;
			if(p < 0) {
				moduleName = request.request;
				remainingRequest = "";
			} else {
				moduleName = request.request.substr(0, p);
				remainingRequest = request.request.substr(p+1);
			}
			var modulePath = this.join(request.path, moduleName);
			fs.stat(modulePath, function(err, stat) {
				if(err || !stat) {
					if(callback.missing)
						callback.missing.push(modulePath);
					if(callback.log) callback.log(modulePath + " doesn't exist (module as directory)");
					return callback();
				}
				if(stat.isDirectory()) {
					return this.doResolve(request.directory ? "directory" : ["file", "directory"], {
						path: modulePath,
						request: remainingRequest,
						query: request.query
					}, callback, true);
				}
				if(callback.log) callback.log(modulePath + " is not a directory (module as directory)");
				return callback();
			}.bind(this));
		});
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function DirectoryDefaultFilePlugin(files) {
		this.files = files;
	}
	module.exports = DirectoryDefaultFilePlugin;
	
	DirectoryDefaultFilePlugin.prototype.apply = function(resolver) {
		var files = this.files;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var topLevelCallback = callback;
			var directory = this.join(request.path, request.request);
			fs.stat(directory, function(err, stat) {
				if(err || !stat) {
					if(callback.log) callback.log(directory + " doesn't exist (directory default file)");
					return callback();
				}
				if(!stat.isDirectory()) {
					if(callback.log) callback.log(directory + " is not a directory (directory default file)");
					return callback();
				}
				this.forEachBail(files, function(file, callback) {
					this.doResolve("file", {
						path: directory,
						query: request.query,
						request: file
					}, createInnerCallback(function(err, result) {
						if(!err && result) return callback(result);
						return callback();
					}, topLevelCallback, "directory default file " + file));
				}.bind(this), function(result) {
					if(!result) return callback();
					return callback(null, result);
				});
			}.bind(this));
		});
	};

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function DirectoryDescriptionFilePlugin(filename, fields) {
		this.filename = filename;
		this.fields = fields;
	}
	module.exports = DirectoryDescriptionFilePlugin;
	
	DirectoryDescriptionFilePlugin.prototype.apply = function(resolver) {
		var filename = this.filename;
		var fields = this.fields;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var directory = this.join(request.path, request.request);
			var descriptionFilePath = this.join(directory, filename);
			fs.readFile(descriptionFilePath, function(err, content) {
				if(err) {
					if(callback.log)
						callback.log(descriptionFilePath + " doesn't exist (directory description file)");
					return callback();
				}
				content = content.toString("utf-8");
				try {
					content = JSON.parse(content);
				} catch(e) {
					if(callback.log)
						callback.log(descriptionFilePath + " (directory description file): " + e);
					else
						e.message = descriptionFilePath + " (directory description file): " + e;
					return callback(e);
				}
				var mainModules = [];
				for(var i = 0; i < fields.length; i++) {
					if(Array.isArray(fields[i])) {
						var current = content;
						for(var j = 0; j < fields[i].length; j++) {
							if(current === null || typeof current !== "object") {
								current = null;
								break;
							}
							var field = fields[i][j];
							current = current[field];
						}
						if(typeof current === "string") {
							mainModules.push(current);
							continue;
						}
					} else {
						var field = fields[i];
						if(typeof content[field] === "string") {
							mainModules.push(content[field]);
							continue;
						}
					}
				}
				(function next() {
					if(mainModules.length == 0) return callback();
					var mainModule = mainModules.shift();
					return this.doResolve(["file", "directory"], {
						path: directory,
						query: request.query,
						request: mainModule
					}, createInnerCallback(function(err, result) {
						if(!err && result) return callback(null, result);
						return next.call(this);
					}.bind(this), callback, "use " + mainModule + " from " + filename));
				}.call(this))
			}.bind(this));
		});
	};

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var createInnerCallback = __webpack_require__(64);
	
	function DirectoryDescriptionFileFieldAliasPlugin(filename, field) {
		this.filename = filename;
		this.field = field;
	}
	module.exports = DirectoryDescriptionFileFieldAliasPlugin;
	
	function findDescriptionFileField(resolver, directory, filename, field, callback) {
		(function findDescriptionFile() {
			var descriptionFilePath = resolver.join(directory, filename);
			resolver.fileSystem.readFile(descriptionFilePath, function(err, content) {
				if(err) {
					directory = cdUp(directory);
					if(!directory) {
						return callback();
					} else {
						return findDescriptionFile();
					}
				}
				try {
					content = JSON.parse(content);
				} catch(e) {
					if(callback.log)
						callback.log(descriptionFilePath + " (directory description file): " + e);
					else
						e.message = descriptionFilePath + " (directory description file): " + e;
					return callback(e);
				}
				var fieldData;
				if(Array.isArray(field)) {
					var current = content;
					for(var j = 0; j < field.length; j++) {
						if(current === null || typeof current !== "object") {
							current = null;
							break;
						}
						current = current[field[j]];
					}
					if(typeof current === "object") {
						fieldData = current;
					}
				} else {
					if(typeof content[field] === "object") {
						fieldData = content[field];
					}
				}
				if(!fieldData) return callback();
				callback(null, fieldData, directory);
			});
		}());
	}
	
	function cdUp(directory) {
		if(directory === "/") return null;
		var i = directory.lastIndexOf("/"),
			j = directory.lastIndexOf("\\");
		var p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
		if(p < 0) return null;
		return directory.substr(0, p || 1);
	}
	
	DirectoryDescriptionFileFieldAliasPlugin.prototype.apply = function(resolver) {
		var filename = this.filename;
		var field = this.field;
		resolver.plugin("module", function(request, callback) {
			var directory = request.path;
			var moduleName = request.request;
			findDescriptionFileField(this, directory, filename, field, function(err, fieldData, directory) {
				if(err) return callback(err);
				if(!fieldData) return callback();
				var data = fieldData[moduleName];
				if(data === moduleName) return callback();
				if(data === false) return callback(null, {
					path: false,
					resolved: true
				});
				if(!data) return callback();
				var newRequest = this.parse(data);
				var obj = {
					path: directory,
					request: newRequest.path,
					query: newRequest.query,
					directory: newRequest.directory
				};
				var newCallback = createInnerCallback(callback, callback, "aliased from directory description file " + this.join(directory, filename) + " with mapping " + JSON.stringify(moduleName));
				if(newRequest.module) return this.doResolve("module", obj, newCallback);
				if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
				return this.doResolve(["file", "directory"], obj, newCallback);
			}.bind(this));
		});
		resolver.plugin("result", function(request, callback) {
			var directory = cdUp(request.path);
			var requestPath = request.path;
			findDescriptionFileField(this, directory, filename, field, function(err, fieldData, directory) {
				if(err) return callback(err);
				if(!fieldData) return callback();
				var relative = requestPath.substr(directory.length+1).replace(/\\/g, "/");
				if(typeof fieldData[relative] !== "undefined")
					var data = fieldData[relative];
				else if(typeof fieldData["./" + relative] !== "undefined")
					var data = fieldData["./" + relative];
				if(data === relative || data === "./" + relative) return callback();
				if(data === false) return callback(null, {
					path: false,
					resolved: true
				});
				if(!data) return callback();
				var newRequest = this.parse(data);
				var obj = {
					path: directory,
					request: newRequest.path,
					query: newRequest.query,
					directory: newRequest.directory
				};
				var newCallback = createInnerCallback(callback, callback, "aliased from directory description file " + this.join(directory, filename) + " with mapping " + JSON.stringify(relative));
				if(newRequest.module) return this.doResolve("module", obj, newCallback);
				if(newRequest.directory) return this.doResolve("directory", obj, newCallback);
				return this.doResolve(["file", "directory"], obj, newCallback);
			}.bind(this));
		});
	};


/***/ },
/* 180 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function FileAppendPlugin(appendings) {
		this.appendings = appendings;
	}
	module.exports = FileAppendPlugin;
	
	FileAppendPlugin.prototype.apply = function(resolver) {
		var appendings = this.appendings;
		resolver.plugin("file", function(request, callback) {
			var fs = this.fileSystem;
			var addr = this.join(request.path, request.request);
			var addrs = appendings.map(function(a) { return addr + a });
			var log = callback.log;
			var missing = callback.missing;
			this.forEachBail(addrs, function(addr, callback) {
				fs.stat(addr, function(err, stat) {
					if(!err && stat && stat.isFile())
						return callback(addr);
					if(missing && err)
						missing.push(addr);
					if(log) {
						if(err) log(addr + " doesn't exist");
						else log(addr + " is not a file");
					}
					return callback();
				});
			}, function(validAddr) {
				if(!validAddr) return callback();
				return this.doResolve("result", {
					path: validAddr,
					query: request.query,
					file: true,
					resolved: true
				}, callback);
			}.bind(this));
		});
	};

/***/ },
/* 181 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function DirectoryResultPlugin(files) {
		this.files = files;
	}
	module.exports = DirectoryResultPlugin;
	
	DirectoryResultPlugin.prototype.apply = function(resolver) {
		var files = this.files;
		resolver.plugin("directory", function(request, callback) {
			var fs = this.fileSystem;
			var directory = this.join(request.path, request.request);
			fs.stat(directory, function(err, stat) {
				if(!err && stat && stat.isDirectory()) {
					return this.doResolve("result", {
						path: directory,
						query: request.query,
						directory: true,
						resolved: true
					}, callback);
				}
				if(callback.log) {
					if(err) callback.log(directory + " doesn't exist");
					else callback.log(directory + " is not a directory");
				}
				return callback();
			}.bind(this));
		});
	};

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var popPathSeqment = __webpack_require__(172);
	
	function ResultSymlinkPlugin(appendings) {
	}
	module.exports = ResultSymlinkPlugin;
	
	ResultSymlinkPlugin.prototype.apply = function(resolver) {
		resolver.plugin("result", function pluginMethod(request, callback) {
			var fs = this.fileSystem;
			var paths = [request.path];
			var pathSeqments = [];
			var addr = [request.path];
			var pathSeqment = popPathSeqment(addr);
			while(pathSeqment) {
				pathSeqments.push(pathSeqment);
				paths.push(addr[0]);
				pathSeqment = popPathSeqment(addr);
			}
			pathSeqments.push(paths[paths.length-1]);
			var log = callback.log;
			var missing = callback.missing;
			var containsSymlink = false;
			this.forEachBail(paths.map(function(_, i) { return i; }), function(idx, callback) {
				fs.readlink(paths[idx], function(err, result) {
					if(!err && result) {
						pathSeqments[idx] = result;
						containsSymlink = true;
						// Shortcut when absolute symlink found
						if(/^(\/|[a-zA-z]:($|\\))/.test(result))
							return callback(null, idx);
					}
					callback();
				});
			}, function(err, idx) {
				if(!containsSymlink) return callback();
				var resultSeqments = typeof idx === "number" ? pathSeqments.slice(0, idx+1) : pathSeqments.slice();
				var result = resultSeqments.reverse().reduce(function(a, b) {
					return this.join(a, b);
				}.bind(this));
				log("resolved symlink to " + result);
				request.path = result;
				pluginMethod.call(this, request, callback);
			}.bind(this));
		});
	};

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var JsonpMainTemplatePlugin = __webpack_require__(184);
	var JsonpChunkTemplatePlugin = __webpack_require__(186);
	var JsonpHotUpdateChunkTemplatePlugin = __webpack_require__(187);
	
	function JsonpTemplatePlugin() {}
	module.exports = JsonpTemplatePlugin;
	JsonpTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new JsonpMainTemplatePlugin());
			compilation.chunkTemplate.apply(new JsonpChunkTemplatePlugin());
			compilation.hotUpdateChunkTemplate.apply(new JsonpHotUpdateChunkTemplatePlugin());
		});
	};


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	
	function JsonpMainTemplatePlugin() {}
	module.exports = JsonpMainTemplatePlugin;
	
	JsonpMainTemplatePlugin.prototype.constructor = JsonpMainTemplatePlugin;
	JsonpMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded and loading chunks",
					"// \"0\" means \"already loaded\"",
					"// Array means \"loading\", array contains callbacks",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":0";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("jsonp-script", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			var chunkMaps = chunk.getChunkMaps();
			var crossOriginLoading = this.outputOptions.crossOriginLoading;
			return this.asString([
				"var script = document.createElement('script');",
				"script.type = 'text/javascript';",
				"script.charset = 'utf-8';",
				"script.async = true;",
				crossOriginLoading ? "script.crossOrigin = '" + crossOriginLoading + "';" : "",
				"script.src = " + this.requireFn + ".p + " +
				this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), {
					hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
					hashWithLength: function(length) {
						return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
					}.bind(this),
					chunk: {
						id: "\" + chunkId + \"",
						hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
						hashWithLength: function(length) {
							var shortChunkHashMap = {};
							Object.keys(chunkMaps.hash).forEach(function(chunkId) {
								if(typeof chunkMaps.hash[chunkId] === "string")
									shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
							});
							return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
						},
						name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
					}
				}) + ";"
			]);
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			return this.asString([
				"// \"0\" is the signal for \"already loaded\"",
				"if(installedChunks[chunkId] === 0)",
				this.indent("return callback.call(null, " + this.requireFn + ");"),
				"",
				"// an array means \"currently loading\".",
				"if(installedChunks[chunkId] !== undefined) {",
				this.indent("installedChunks[chunkId].push(callback);"),
				"} else {",
				this.indent([
					"// start chunk loading",
					"installedChunks[chunkId] = [callback];",
					"var head = document.getElementsByTagName('head')[0];",
					this.applyPluginsWaterfall("jsonp-script", "", chunk, hash),
					"head.appendChild(script);"
				]),
				"}"
			]);
		});
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
			if(chunk.chunks.length > 0) {
				var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp" + (this.outputOptions.library || ""));
				return this.asString([
					source,
					"",
					"// install a JSONP callback for chunk loading",
					"var parentJsonpFunction = window[" + JSON.stringify(jsonpFunction) + "];",
					"window[" + JSON.stringify(jsonpFunction) + "] = function webpackJsonpCallback(chunkIds, moreModules) {",
					this.indent([
						"// add \"moreModules\" to the modules object,",
						"// then flag all \"chunkIds\" as loaded and fire callback",
						"var moduleId, chunkId, i = 0, callbacks = [];",
						"for(;i < chunkIds.length; i++) {",
						this.indent([
							"chunkId = chunkIds[i];",
							"if(installedChunks[chunkId])",
							this.indent("callbacks.push.apply(callbacks, installedChunks[chunkId]);"),
							"installedChunks[chunkId] = 0;"
						]),
						"}",
						"for(moduleId in moreModules) {",
						this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
						"}",
						"if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);",
						"while(callbacks.length)",
						this.indent("callbacks.shift().call(null, " + this.requireFn + ");"), (this.entryPointInChildren(chunk) ? [
							"if(moreModules[0]) {",
							this.indent([
								"installedModules[0] = 0;",
								"return " + this.requireFn + "(0);"
							]),
							"}"
						] : "")
					]),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) {
			var hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			var hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			var hotUpdateFunction = this.outputOptions.hotUpdateFunction || Template.toIdentifier("webpackHotUpdate" + (this.outputOptions.library || ""));
			var currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this),
				chunk: {
					id: "\" + chunkId + \""
				}
			});
			var currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this)
			});
	
			return source + "\n" +
				"var parentHotUpdateCallback = this[" + JSON.stringify(hotUpdateFunction) + "];\n" +
				"this[" + JSON.stringify(hotUpdateFunction) + "] = " + Template.getFunctionContent(__webpack_require__(185))
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename)
				.replace(/\$hash\$/g, JSON.stringify(hash));
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("jsonp");
			hash.update("4");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
			hash.update(this.outputOptions.jsonpFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 185 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals hotAddUpdateChunk parentHotUpdateCallback document XMLHttpRequest $require$ $hotChunkFilename$ $hotMainFilename$ */
	module.exports = function() {
		function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
			hotAddUpdateChunk(chunkId, moreModules);
			if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
		}
	
		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var head = document.getElementsByTagName("head")[0];
			var script = document.createElement("script");
			script.type = "text/javascript";
			script.charset = "utf-8";
			script.src = $require$.p + $hotChunkFilename$;
			head.appendChild(script);
		}
	
		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			if(typeof XMLHttpRequest === "undefined")
				return callback(new Error("No browser support"));
			try {
				var request = new XMLHttpRequest();
				var requestPath = $require$.p + $hotMainFilename$;
				request.open("GET", requestPath, true);
				request.timeout = 10000;
				request.send(null);
			} catch(err) {
				return callback(err);
			}
			request.onreadystatechange = function() {
				if(request.readyState !== 4) return;
				if(request.status === 0) {
					// timeout
					callback(new Error("Manifest request to " + requestPath + " timed out."));
				} else if(request.status === 404) {
					// no update available
					callback();
				} else if(request.status !== 200 && request.status !== 304) {
					// other failure
					callback(new Error("Manifest request to " + requestPath + " failed."));
				} else {
					// success
					try {
						var update = JSON.parse(request.responseText);
					} catch(e) {
						callback(e);
						return;
					}
					callback(null, update);
				}
			};
		}
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var Template = __webpack_require__(52);
	
	function JsonpChunkTemplatePlugin() {}
	module.exports = JsonpChunkTemplatePlugin;
	
	JsonpChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var jsonpFunction = this.outputOptions.jsonpFunction || Template.toIdentifier("webpackJsonp" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(jsonpFunction + "(" + JSON.stringify(chunk.ids) + ",");
			source.add(modules);
			source.add(")");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("JsonpChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.jsonpFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var Template = __webpack_require__(52);
	
	function JsonpHotUpdateChunkTemplatePlugin() {}
	module.exports = JsonpHotUpdateChunkTemplatePlugin;
	
	JsonpHotUpdateChunkTemplatePlugin.prototype.apply = function(hotUpdateChunkTemplate) {
		hotUpdateChunkTemplate.plugin("render", function(modulesSource, modules, hash, id) {
			var jsonpFunction = this.outputOptions.hotUpdateFunction || Template.toIdentifier("webpackHotUpdate" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(jsonpFunction + "(" + JSON.stringify(id) + ",");
			source.add(modulesSource);
			source.add(")");
			return source;
		});
		hotUpdateChunkTemplate.plugin("hash", function(hash) {
			hash.update("JsonpHotUpdateChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.hotUpdateFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleAliasPlugin = __webpack_require__(115);
	var ModuleParserHelpers = __webpack_require__(112);
	var nodeLibsBrowser = __webpack_require__(189);
	var path = __webpack_require__(4);
	
	function NodeSourcePlugin(options) {
		this.options = options;
	}
	module.exports = NodeSourcePlugin;
	NodeSourcePlugin.prototype.apply = function(compiler) {
		var parser = compiler.parser;
	
		function buildExpression(context, pathToModule) {
			var moduleJsPath = path.relative(context, pathToModule);
			if(!/^[A-Z]:/i.test(moduleJsPath)) {
				moduleJsPath = "./" + moduleJsPath.replace(/\\/g, "/");
			}
			return "require(" + JSON.stringify(moduleJsPath) + ")";
		}
	
		function addExpression(parser, name, module, type, suffix) {
			suffix = suffix || "";
			parser.plugin("expression " + name, function() {
				if(this.state.module && this.state.module.resource === getPathToModule(module, type)) return;
				return ModuleParserHelpers.addParsedVariable(this, name, buildExpression(this.state.module.context, getPathToModule(module, type)) + suffix);
			});
		}
	
		function getPathToModule(module, type) {
			if(type === true || (type === undefined && nodeLibsBrowser[module])) {
				if(!nodeLibsBrowser[module]) throw new Error("No browser version for node.js core module '" + module + "' available");
				return nodeLibsBrowser[module];
			} else if(type === "mock") {
				return /*require.resolve*/(__webpack_require__(190).resolve("./" + module));
			} else if(type === "empty") {
				return /*require.resolve*/(194);
			} else return module;
		}
	
		if(this.options.global) {
			compiler.parser.plugin("expression global", function() {
				this.state.module.addVariable("global", "(function() { return this; }())");
				return true;
			});
		}
		if(this.options.process) {
			var processType = this.options.process;
			addExpression(parser, "process", "process", processType);
		}
		if(this.options.console) {
			var consoleType = this.options.console;
			addExpression(parser, "console", "console", consoleType);
		}
		var bufferType = this.options.Buffer;
		if(typeof bufferType === "undefined") {
			bufferType = this.options.buffer;
			if(typeof bufferType === "undefined")
				bufferType = true;
		}
		if(bufferType) {
			addExpression(parser, "Buffer", "buffer", bufferType, ".Buffer");
		}
		if(this.options.setImmediate) {
			var setImmediateType = this.options.setImmediate;
			addExpression(parser, "setImmediate", "timers", setImmediateType, ".setImmediate");
			addExpression(parser, "clearImmediate", "timers", setImmediateType, ".clearImmediate");
		}
		var options = this.options;
		compiler.plugin("after-resolvers", function(compiler) {
			var alias = {};
			Object.keys(nodeLibsBrowser).forEach(function(lib) {
				if(options[lib] !== false)
					alias[lib + "$"] = getPathToModule(lib, options[lib]);
			});
			if(Object.keys(alias).length > 0) {
				compiler.resolvers.normal.apply(
					new ModuleAliasPlugin(alias)
				);
			}
		});
	};


/***/ },
/* 189 */
/***/ function(module, exports) {



/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./buffer": 191,
		"./buffer.js": 191,
		"./console": 192,
		"./console.js": 192,
		"./dns": 193,
		"./dns.js": 193,
		"./empty": 194,
		"./empty.js": 194,
		"./net": 195,
		"./net.js": 195,
		"./process": 196,
		"./process.js": 196,
		"./punycode": 197,
		"./punycode.js": 197,
		"./tls": 198,
		"./tls.js": 198,
		"./tty": 199,
		"./tty.js": 199
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 190;


/***/ },
/* 191 */
/***/ function(module, exports) {

	function Buffer() {
		throw new Error("Buffer is not included.");
	}
	Buffer.isBuffer = function() {
	  return false;
	};
	
	exports.INSPECT_MAX_BYTES = 50;
	exports.SlowBuffer = Buffer;
	exports.Buffer = Buffer;


/***/ },
/* 192 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {var console;
	if (typeof global !== "undefined" && global.console) {
	    console = global.console
	} else if (typeof window !== "undefined" && window.console) {
	    console = window.console
	} else {
	    console = window.console = {}
	}
	module.exports = console;
	for(var name in {log:1, info:1, error:1, warn:1, dir:1, trace:1, assert:1, time:1, timeEnd: 1})
		if(!console[name])
			console[name] = function() {};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 193 */
/***/ function(module, exports) {

	exports.lookup = exports.resolve4 =
	exports.resolve6 = exports.resolveCname =
	exports.resolveMx = exports.resolveNs =
	exports.resolveTxt = exports.resolveSrv =
	exports.resolveNaptr = exports.reverse =
	exports.resolve =
	function () {
	  if (!arguments.length) return;
	
	  var callback = arguments[arguments.length - 1];
	  if (callback && typeof callback === 'function') {
	    callback(null, '0.0.0.0')
	  }
	}
	


/***/ },
/* 194 */
/***/ function(module, exports) {



/***/ },
/* 195 */
/***/ function(module, exports) {

	exports.createServer =
	exports.createConnection =
	exports.connect =
	function () {};
	
	exports.isIP =
	exports.isIPv4 =
	exports.isIPv6 =
	function () { return true };
	


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	exports.nextTick = function nextTick(fn) {
		setTimeout(fn, 0);
	};
	
	exports.platform = exports.arch = 
	exports.execPath = exports.title = 'browser';
	exports.pid = 1;
	exports.browser = true;
	exports.env = {};
	exports.argv = [];
	
	exports.binding = function (name) {
		throw new Error('No such module. (Possibly not yet loaded)')
	};
	
	(function () {
	    var cwd = '/';
	    var path;
	    exports.cwd = function () { return cwd };
	    exports.chdir = function (dir) {
	        if (!path) path = __webpack_require__(4);
	        cwd = path.resolve(dir, cwd);
	    };
	})();
	
	exports.exit = exports.kill = 
	exports.umask = exports.dlopen = 
	exports.uptime = exports.memoryUsage = 
	exports.uvCounters = function() {};
	exports.features = {};


/***/ },
/* 197 */
/***/ function(module, exports) {

	exports.ucs2 = {};
	exports.encode = exports.decode =
	exports.ucs2.encode = exports.ucs2.decode =
	exports.toUnicode = exports.toASCII =
	function (s) { return s };
	exports.version = "0.0.0";

/***/ },
/* 198 */
/***/ function(module, exports) {

	// todo


/***/ },
/* 199 */
/***/ function(module, exports) {

	exports.isatty = function () {};
	exports.setRawMode = function () {};


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var WebWorkerMainTemplatePlugin = __webpack_require__(201);
	var WebWorkerChunkTemplatePlugin = __webpack_require__(202);
	
	function WebWorkerTemplatePlugin() {}
	module.exports = WebWorkerTemplatePlugin;
	WebWorkerTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new WebWorkerMainTemplatePlugin());
			compilation.chunkTemplate.apply(new WebWorkerChunkTemplatePlugin());
		});
	};


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	
	function WebWorkerMainTemplatePlugin() {}
	module.exports = WebWorkerMainTemplatePlugin;
	
	WebWorkerMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded chunks",
					"// \"1\" means \"already loaded\"",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":1";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			return this.asString([
				"// \"1\" is the signal for \"already loaded\"",
				"if(!installedChunks[chunkId]) {",
				this.indent([
					"importScripts(" +
					this.applyPluginsWaterfall("asset-path", JSON.stringify(chunkFilename), {
						hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
						hashWithLength: function(length) {
							return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
						}.bind(this),
						chunk: {
							id: "\" + chunkId + \""
						}
					}) + ");"
				]),
				"}",
				"callback.call(null, " + this.requireFn + ");"
			]);
		});
		mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
			if(chunk.chunks.length > 0) {
				var chunkCallbackName = this.outputOptions.chunkCallbackName || Template.toIdentifier("webpackChunk" + (this.outputOptions.library || ""));
				return this.asString([
					source,
					"this[" + JSON.stringify(chunkCallbackName) + "] = function webpackChunkCallback(chunkIds, moreModules) {",
					this.indent([
						"for(var moduleId in moreModules) {",
						this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
						"}",
						"while(chunkIds.length)",
						this.indent("installedChunks[chunkIds.pop()] = 1;")
					]),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("webworker");
			hash.update("3");
			hash.update(this.outputOptions.publicPath + "");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
			hash.update(this.outputOptions.chunkCallbackName + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var Template = __webpack_require__(52);
	
	function WebWorkerChunkTemplatePlugin() {}
	module.exports = WebWorkerChunkTemplatePlugin;
	
	WebWorkerChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var chunkCallbackName = this.outputOptions.chunkCallbackName || Template.toIdentifier("webpackChunk" + (this.outputOptions.library || ""));
			var source = new ConcatSource();
			source.add(chunkCallbackName + "(" + JSON.stringify(chunk.ids) + ",");
			source.add(modules);
			source.add(")");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("webworker");
			hash.update("3");
			hash.update(this.outputOptions.chunkCallbackName + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NodeMainTemplatePlugin = __webpack_require__(204);
	var NodeChunkTemplatePlugin = __webpack_require__(210);
	var NodeHotUpdateChunkTemplatePlugin = __webpack_require__(302);
	
	function NodeTemplatePlugin(options, asyncChunkLoading) {
		// TODO remove options parameter
		this.options = options;
		this.asyncChunkLoading = asyncChunkLoading;
	}
	module.exports = NodeTemplatePlugin;
	NodeTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			compilation.mainTemplate.apply(new NodeMainTemplatePlugin(this.asyncChunkLoading));
			compilation.chunkTemplate.apply(new NodeChunkTemplatePlugin());
			compilation.hotUpdateChunkTemplate.apply(new NodeHotUpdateChunkTemplatePlugin());
		}.bind(this));
	};


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	
	function NodeMainTemplatePlugin(asyncChunkLoading) {
		this.asyncChunkLoading = asyncChunkLoading;
	}
	module.exports = NodeMainTemplatePlugin;
	NodeMainTemplatePlugin.prototype.apply = function(mainTemplate) {
		var self = this;
		mainTemplate.plugin("local-vars", function(source, chunk) {
			if(chunk.chunks.length > 0) {
				return this.asString([
					source,
					"",
					"// object to store loaded chunks",
					"// \"1\" means \"already loaded\"",
					"var installedChunks = {",
					this.indent(
						chunk.ids.map(function(id) {
							return id + ":1";
						}).join(",\n")
					),
					"};"
				]);
			}
			return source;
		});
		mainTemplate.plugin("require-ensure", function(_, chunk, hash) {
			var filename = this.outputOptions.filename || "bundle.js";
			var chunkFilename = this.outputOptions.chunkFilename || "[id]." + filename;
			var chunkMaps = chunk.getChunkMaps();
			var insertMoreModules = [
				"var moreModules = chunk.modules, chunkIds = chunk.ids;",
				"for(var moduleId in moreModules) {",
				this.indent(this.renderAddModule(hash, chunk, "moduleId", "moreModules[moduleId]")),
				"}"
			];
			if(self.asyncChunkLoading) {
				return this.asString([
					"if(installedChunks[chunkId] === 1) callback.call(null, " + this.requireFn + ");",
					"else if(!installedChunks[chunkId]) {",
					this.indent([
						"installedChunks[chunkId] = [callback];",
						"var filename = __dirname + " + this.applyPluginsWaterfall("asset-path", JSON.stringify("/" + chunkFilename), {
							hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
							hashWithLength: function(length) {
								return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
							}.bind(this),
							chunk: {
								id: "\" + chunkId + \"",
								hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
								hashWithLength: function(length) {
									var shortChunkHashMap = {};
									Object.keys(chunkMaps.hash).forEach(function(chunkId) {
										if(typeof chunkMaps.hash[chunkId] === "string")
											shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
									});
									return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
								},
								name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
							}
						}) + ";",
						"require('fs').readFile(filename, 'utf-8',  function(err, content) {",
						this.indent([
							"if(err) { if(" + this.requireFn + ".onError) return " + this.requireFn + ".onError(err); else throw err; }",
							"var chunk = {};",
							"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\n})', filename)" +
							"(chunk, require, require('path').dirname(filename), filename);"
						].concat(insertMoreModules).concat([
							"var callbacks = [];",
							"for(var i = 0; i < chunkIds.length; i++) {",
							this.indent([
								"if(Array.isArray(installedChunks[chunkIds[i]]))",
								this.indent([
									"callbacks = callbacks.concat(installedChunks[chunkIds[i]]);"
								]),
								"installedChunks[chunkIds[i]] = 1;"
							]),
							"}",
							"for(i = 0; i < callbacks.length; i++)",
							this.indent("callbacks[i].call(null, " + this.requireFn + ");")
						])),
						"});"
					]),
					"} else installedChunks[chunkId].push(callback);"
				]);
			} else {
				var request = this.applyPluginsWaterfall("asset-path", JSON.stringify("./" + chunkFilename), {
					hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
					hashWithLength: function(length) {
						return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
					}.bind(this),
					chunk: {
						id: "\" + chunkId + \"",
						hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
						hashWithLength: function(length) {
							var shortChunkHashMap = {};
							Object.keys(chunkMaps.hash).forEach(function(chunkId) {
								if(typeof chunkMaps.hash[chunkId] === "string")
									shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
							});
							return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
						},
						name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
					}
				});
				return this.asString([
					"// \"1\" is the signal for \"already loaded\"",
					"if(!installedChunks[chunkId]) {",
					this.indent([
						"var chunk = require(" + request + ");"
					].concat(insertMoreModules).concat([
						"for(var i = 0; i < chunkIds.length; i++)",
						this.indent("installedChunks[chunkIds[i]] = 1;")
					])),
					"}",
					"callback.call(null, " + this.requireFn + ");"
				]);
			}
		});
		mainTemplate.plugin("hot-bootstrap", function(source, chunk, hash) {
			var hotUpdateChunkFilename = this.outputOptions.hotUpdateChunkFilename;
			var hotUpdateMainFilename = this.outputOptions.hotUpdateMainFilename;
			var chunkMaps = chunk.getChunkMaps();
			var currentHotUpdateChunkFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateChunkFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this),
				chunk: {
					id: "\" + chunkId + \"",
					hash: "\" + " + JSON.stringify(chunkMaps.hash) + "[chunkId] + \"",
					hashWithLength: function(length) {
						var shortChunkHashMap = {};
						Object.keys(chunkMaps.hash).forEach(function(chunkId) {
							if(typeof chunkMaps.hash[chunkId] === "string")
								shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);
						});
						return "\" + " + JSON.stringify(shortChunkHashMap) + "[chunkId] + \"";
					},
					name: "\" + (" + JSON.stringify(chunkMaps.name) + "[chunkId]||chunkId) + \""
				}
			});
			var currentHotUpdateMainFilename = this.applyPluginsWaterfall("asset-path", JSON.stringify(hotUpdateMainFilename), {
				hash: "\" + " + this.renderCurrentHashCode(hash) + " + \"",
				hashWithLength: function(length) {
					return "\" + " + this.renderCurrentHashCode(hash, length) + " + \"";
				}.bind(this)
			});
			return Template.getFunctionContent(self.asyncChunkLoading ? __webpack_require__(205) : __webpack_require__(208))
				.replace(/\$require\$/g, this.requireFn)
				.replace(/\$hotMainFilename\$/g, currentHotUpdateMainFilename)
				.replace(/\$hotChunkFilename\$/g, currentHotUpdateChunkFilename);
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("node");
			hash.update("3");
			hash.update(this.outputOptions.filename + "");
			hash.update(this.outputOptions.chunkFilename + "");
		});
	};


/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hotChunkFilename$ $require$ hotAddUpdateChunk $hotMainFilename$ */
	module.exports = function() {
		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var filename = __webpack_require__(4).join(__dirname, $hotChunkFilename$);
			__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFile(filename, "utf-8", function(err, content) {
				if(err) {
					if($require$.onError)
						return $require$.onError(err);
					else
						throw err;
				}
				var chunk = {};
				__webpack_require__(206).runInThisContext("(function(exports) {" + content + "\n})", filename)(chunk);
				hotAddUpdateChunk(chunk.id, chunk.modules);
			});
		}
	
		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			var filename = __webpack_require__(4).join(__dirname, $hotMainFilename$);
			__webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).readFile(filename, "utf-8", function(err, content) {
				if(err) return callback();
				try {
					var update = JSON.parse(content);
				} catch(e) {
					return callback(e);
				}
				callback(null, update);
			});
		}
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(207);
	
	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};
	
	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};
	
	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());
	
	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];
	
	function Context() {}
	Context.prototype = {};
	
	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};
	
	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;
	
	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);
	
	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });
	
	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};
	
	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};
	
	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);
	
	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });
	
	    return res;
	};
	
	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});
	
	exports.createScript = function (code) {
	    return exports.Script(code);
	};
	
	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ },
/* 207 */
/***/ function(module, exports) {

	
	var indexOf = [].indexOf;
	
	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hotChunkFilename$ hotAddUpdateChunk $hotMainFilename$ */
	module.exports = function() {
		function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
			var chunk = __webpack_require__(209)("./" + $hotChunkFilename$);
			hotAddUpdateChunk(chunk.id, chunk.modules);
		}
	
		function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
			try {
				var update = __webpack_require__(209)("./" + $hotMainFilename$);
			} catch(e) {
				return callback();
			}
			callback(null, update);
		}
	};


/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./NodeChunkTemplatePlugin": 210,
		"./NodeChunkTemplatePlugin.js": 210,
		"./NodeEnvironmentPlugin": 211,
		"./NodeEnvironmentPlugin.js": 211,
		"./NodeHotUpdateChunkTemplatePlugin": 302,
		"./NodeHotUpdateChunkTemplatePlugin.js": 302,
		"./NodeMainTemplate.runtime": 208,
		"./NodeMainTemplate.runtime.js": 208,
		"./NodeMainTemplateAsync.runtime": 205,
		"./NodeMainTemplateAsync.runtime.js": 205,
		"./NodeMainTemplatePlugin": 204,
		"./NodeMainTemplatePlugin.js": 204,
		"./NodeOutputFileSystem": 298,
		"./NodeOutputFileSystem.js": 298,
		"./NodeSourcePlugin": 188,
		"./NodeSourcePlugin.js": 188,
		"./NodeTargetPlugin": 303,
		"./NodeTargetPlugin.js": 303,
		"./NodeTemplatePlugin": 203,
		"./NodeTemplatePlugin.js": 203,
		"./NodeWatchFileSystem": 212,
		"./NodeWatchFileSystem.js": 212,
		"./OldNodeWatchFileSystem": 307,
		"./OldNodeWatchFileSystem.js": 307
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 209;


/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	
	function NodeChunkTemplatePlugin() {}
	module.exports = NodeChunkTemplatePlugin;
	
	NodeChunkTemplatePlugin.prototype.apply = function(chunkTemplate) {
		chunkTemplate.plugin("render", function(modules, chunk) {
			var source = new ConcatSource();
			source.add("exports.ids = " + JSON.stringify(chunk.ids) + ";\nexports.modules = ");
			source.add(modules);
			source.add(";");
			return source;
		});
		chunkTemplate.plugin("hash", function(hash) {
			hash.update("node");
			hash.update("3");
		});
	};


/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var NodeWatchFileSystem = __webpack_require__(212);
	var NodeOutputFileSystem = __webpack_require__(298);
	var NodeJsInputFileSystem = __webpack_require__(300);
	var CachedInputFileSystem = __webpack_require__(301);
	
	function NodeEnvironmentPlugin() {}
	module.exports = NodeEnvironmentPlugin;
	NodeEnvironmentPlugin.prototype.apply = function(compiler) {
		compiler.inputFileSystem = new NodeJsInputFileSystem();
		var inputFileSystem = compiler.inputFileSystem = new CachedInputFileSystem(compiler.inputFileSystem, 60000);
		compiler.resolvers.normal.fileSystem = compiler.inputFileSystem;
		compiler.resolvers.context.fileSystem = compiler.inputFileSystem;
		compiler.resolvers.loader.fileSystem = compiler.inputFileSystem;
		compiler.outputFileSystem = new NodeOutputFileSystem();
		compiler.watchFileSystem = new NodeWatchFileSystem(compiler.inputFileSystem);
		compiler.plugin("run", function(compiler, callback) {
			if(compiler.inputFileSystem === inputFileSystem)
				inputFileSystem.purge();
			callback();
		});
	};


/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Watchpack = __webpack_require__(213);
	
	function NodeWatchFileSystem(inputFileSystem) {
		this.inputFileSystem = inputFileSystem;
		this.watcherOptions = {
			aggregateTimeout: 0
		};
		this.watcher = new Watchpack(this.watcherOptions);
	}
	
	module.exports = NodeWatchFileSystem;
	
	NodeWatchFileSystem.prototype.watch = function watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {
		if(!Array.isArray(files))
			throw new Error("Invalid arguments: 'files'");
		if(!Array.isArray(dirs))
			throw new Error("Invalid arguments: 'dirs'");
		if(!Array.isArray(missing))
			throw new Error("Invalid arguments: 'missing'");
		if(typeof callback !== "function")
			throw new Error("Invalid arguments: 'callback'");
		if(typeof startTime !== "number" && startTime)
			throw new Error("Invalid arguments: 'startTime'");
		if(typeof options !== "object")
			throw new Error("Invalid arguments: 'options'");
		if(typeof callbackUndelayed !== "function" && callbackUndelayed)
			throw new Error("Invalid arguments: 'callbackUndelayed'");
		var oldWatcher = this.watcher;
		this.watcher = new Watchpack(options);
	
		if(callbackUndelayed)
			this.watcher.once("change", callbackUndelayed);
	
		this.watcher.once("aggregated", function(changes) {
			if(this.inputFileSystem && this.inputFileSystem.purge) {
				this.inputFileSystem.purge(changes);
			}
			var times = this.watcher.getTimes();
			callback(null, changes.filter(function(file) {
				return files.indexOf(file) >= 0;
			}).sort(), changes.filter(function(file) {
				return dirs.indexOf(file) >= 0;
			}).sort(), changes.filter(function(file) {
				return missing.indexOf(file) >= 0;
			}).sort(), times, times);
		}.bind(this));
	
		this.watcher.watch(files.concat(missing), dirs, startTime);
	
		if(oldWatcher) {
			oldWatcher.close();
		}
		return {
			close: function() {
				this.watcher.close();
			}.bind(this),
			pause: function() {
				this.watcher.pause();
			}.bind(this)
		};
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var watcherManager = __webpack_require__(214);
	var EventEmitter = __webpack_require__(216).EventEmitter;
	
	function Watchpack(options) {
		EventEmitter.call(this);
		if(!options) options = {};
		if(!options.aggregateTimeout) options.aggregateTimeout = 200;
		this.options = options;
		this.watcherOptions = {
			poll: options.poll
		};
		this.fileWatchers = [];
		this.dirWatchers = [];
		this.mtimes = {};
		this.paused = false;
		this.aggregatedChanges = [];
		this.aggregateTimeout = 0;
		this._onTimeout = this._onTimeout.bind(this);
	}
	
	module.exports = Watchpack;
	
	Watchpack.prototype = Object.create(EventEmitter.prototype);
	
	Watchpack.prototype.watch = function watch(files, directories, startTime) {
		this.paused = false;
		var oldFileWatchers = this.fileWatchers;
		var oldDirWatchers = this.dirWatchers;
		this.fileWatchers = files.map(function(file) {
			return this._fileWatcher(file, watcherManager.watchFile(file, this.watcherOptions, startTime));
		}, this);
		this.dirWatchers = directories.map(function(dir) {
			return this._dirWatcher(dir, watcherManager.watchDirectory(dir, this.watcherOptions, startTime));
		}, this);
		oldFileWatchers.forEach(function(w) {
			w.close();
		}, this);
		oldDirWatchers.forEach(function(w) {
			w.close();
		}, this);
	};
	
	Watchpack.prototype.close = function resume() {
		this.paused = true;
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
		this.fileWatchers.forEach(function(w) {
			w.close();
		}, this);
		this.dirWatchers.forEach(function(w) {
			w.close();
		}, this);
		this.fileWatchers.length = 0;
		this.dirWatchers.length = 0;
	};
	
	Watchpack.prototype.pause = function pause() {
		this.paused = true;
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
	};
	
	function addWatchersToArray(watchers, array) {
		watchers.forEach(function(w) {
			if(array.indexOf(w.directoryWatcher) < 0) {
				array.push(w.directoryWatcher);
				addWatchersToArray(Object.keys(w.directoryWatcher.directories).reduce(function(a, dir) {
					if(w.directoryWatcher.directories[dir] !== true)
						a.push(w.directoryWatcher.directories[dir]);
					return a;
				}, []), array);
			}
		});
	}
	
	Watchpack.prototype.getTimes = function() {
		var directoryWatchers = [];
		addWatchersToArray(this.fileWatchers.concat(this.dirWatchers), directoryWatchers);
		var obj = {};
		directoryWatchers.forEach(function(w) {
			var times = w.getTimes();
			Object.keys(times).forEach(function(file) {
				obj[file] = times[file];
			});
		});
		return obj;
	};
	
	Watchpack.prototype._fileWatcher = function _fileWatcher(file, watcher) {
		watcher.on("change", this._onChange.bind(this, file));
		return watcher;
	};
	
	Watchpack.prototype._dirWatcher = function _dirWatcher(item, watcher) {
		watcher.on("change", function(file, mtime) {
			this._onChange(item, mtime, file);
		}.bind(this));
		return watcher;
	};
	
	Watchpack.prototype._onChange = function _onChange(item, mtime, file) {
		file = file || item;
		this.mtimes[file] = mtime;
		if(this.paused) return;
		this.emit("change", file, mtime);
		if(this.aggregateTimeout)
			clearTimeout(this.aggregateTimeout);
		if(this.aggregatedChanges.indexOf(item) < 0)
			this.aggregatedChanges.push(item);
		this.aggregateTimeout = setTimeout(this._onTimeout, this.options.aggregateTimeout);
	};
	
	Watchpack.prototype._onTimeout = function _onTimeout() {
		this.aggregateTimeout = 0;
		var changes = this.aggregatedChanges;
		this.aggregatedChanges = [];
		this.emit("aggregated", changes);
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var path = __webpack_require__(4);
	
	function WatcherManager() {
		this.directoryWatchers = {};
	}
	
	WatcherManager.prototype.getDirectoryWatcher = function(directory, options) {
		var DirectoryWatcher = __webpack_require__(215);
		options = options || {};
		var key = directory + " " + JSON.stringify(options);
		if(!this.directoryWatchers[key]) {
			this.directoryWatchers[key] = new DirectoryWatcher(directory, options);
			this.directoryWatchers[key].on("closed", function() {
				delete this.directoryWatchers[key];
			}.bind(this));
		}
		return this.directoryWatchers[key];
	};
	
	WatcherManager.prototype.watchFile = function watchFile(p, options, startTime) {
		var directory = path.dirname(p);
		return this.getDirectoryWatcher(directory, options).watch(p, startTime);
	};
	
	WatcherManager.prototype.watchDirectory = function watchDirectory(directory, options, startTime) {
		return this.getDirectoryWatcher(directory, options).watch(directory, startTime);
	};
	
	module.exports = new WatcherManager();


/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var EventEmitter = __webpack_require__(216).EventEmitter;
	var async = __webpack_require__(217);
	var chokidar = __webpack_require__(218);
	var fs = __webpack_require__(264);
	var path = __webpack_require__(4);
	
	var watcherManager = __webpack_require__(214);
	
	var FS_ACCURENCY = 10000;
	
	
	function withoutCase(str) {
		return str.toLowerCase();
	}
	
	
	function Watcher(directoryWatcher, filePath, startTime) {
		EventEmitter.call(this);
		this.directoryWatcher = directoryWatcher;
		this.path = filePath;
		this.startTime = startTime && +startTime;
		this.data = 0;
	}
	
	Watcher.prototype = Object.create(EventEmitter.prototype);
	Watcher.prototype.constructor = Watcher;
	
	Watcher.prototype.checkStartTime = function checkStartTime(mtime, initial) {
		if(typeof this.startTime !== "number") return !initial;
		var startTime = this.startTime && Math.floor(this.startTime / FS_ACCURENCY) * FS_ACCURENCY;
		return startTime <= mtime;
	};
	
	Watcher.prototype.close = function close() {
		this.emit("closed");
	};
	
	
	function DirectoryWatcher(directoryPath, options) {
		EventEmitter.call(this);
		this.path = directoryPath;
		this.files = {};
		this.directories = {};
		this.watcher = chokidar.watch(directoryPath, {
			ignoreInitial: true,
			persistent: true,
			followSymlinks: false,
			depth: 0,
			atomic: false,
			alwaysStat: true,
			ignorePermissionErrors: true,
			usePolling: options.poll ? true : undefined,
			interval: typeof options.poll === "number" ? options.poll : undefined
		});
		this.watcher.on("add", this.onFileAdded.bind(this));
		this.watcher.on("addDir", this.onDirectoryAdded.bind(this));
		this.watcher.on("change", this.onChange.bind(this));
		this.watcher.on("unlink", this.onFileUnlinked.bind(this));
		this.watcher.on("unlinkDir", this.onDirectoryUnlinked.bind(this));
		this.watcher.on("error", this.onWatcherError.bind(this));
		this.initialScan = true;
		this.nestedWatching = false;
		this.initialScanRemoved = [];
		this.doInitialScan();
		this.watchers = {};
		this.refs = 0;
	}
	module.exports = DirectoryWatcher;
	
	DirectoryWatcher.prototype = Object.create(EventEmitter.prototype);
	DirectoryWatcher.prototype.constructor = DirectoryWatcher;
	
	DirectoryWatcher.prototype.setFileTime = function setFileTime(filePath, mtime, initial, type) {
		var now = Date.now();
		var old = this.files[filePath];
		this.files[filePath] = [initial ? Math.min(now, mtime) : now, mtime];
		if(!old) {
			if(mtime) {
				if(this.watchers[withoutCase(filePath)]) {
					this.watchers[withoutCase(filePath)].forEach(function(w) {
						if(!initial || w.checkStartTime(mtime, initial)) {
							w.emit("change", mtime);
						}
					});
				}
			}
		} else if(!initial && mtime && type !== "add") {
			if(this.watchers[withoutCase(filePath)]) {
				this.watchers[withoutCase(filePath)].forEach(function(w) {
					w.emit("change", mtime);
				});
			}
		} else if(!initial && !mtime) {
			if(this.watchers[withoutCase(filePath)]) {
				this.watchers[withoutCase(filePath)].forEach(function(w) {
					w.emit("remove");
				});
			}
		}
		if(this.watchers[withoutCase(this.path)]) {
			this.watchers[withoutCase(this.path)].forEach(function(w) {
				if(!initial || w.checkStartTime(mtime, initial)) {
					w.emit("change", filePath, mtime);
				}
			});
		}
	};
	
	DirectoryWatcher.prototype.setDirectory = function setDirectory(directoryPath, exist, initial) {
		var old = this.directories[directoryPath];
		if(!old) {
			if(exist) {
				if(this.nestedWatching) {
					this.createNestedWatcher(directoryPath);
				} else {
					this.directories[directoryPath] = true;
				}
			}
		} else {
			if(!exist) {
				if(this.nestedWatching)
					this.directories[directoryPath].close();
				delete this.directories[directoryPath];
				if(!initial && this.watchers[withoutCase(this.path)]) {
					this.watchers[withoutCase(this.path)].forEach(function(w) {
						w.emit("change", directoryPath, w.data);
					});
				}
			}
		}
	};
	
	DirectoryWatcher.prototype.createNestedWatcher = function(directoryPath) {
		this.directories[directoryPath] = watcherManager.watchDirectory(directoryPath, this.options, 1);
		this.directories[directoryPath].on("change", function(filePath, mtime) {
			if(this.watchers[withoutCase(this.path)]) {
				this.watchers[withoutCase(this.path)].forEach(function(w) {
					if(w.checkStartTime(mtime, false)) {
						w.emit("change", filePath, mtime);
					}
				});
			}
		}.bind(this));
	};
	
	DirectoryWatcher.prototype.setNestedWatching = function(flag) {
		if(this.nestedWatching !== !!flag) {
			this.nestedWatching = !!flag;
			if(this.nestedWatching) {
				Object.keys(this.directories).forEach(function(directory) {
					this.createNestedWatcher(directory);
				}, this);
			} else {
				Object.keys(this.directories).forEach(function(directory) {
					this.directories[directory].close();
					this.directories[directory] = true;
				}, this);
			}
		}
	};
	
	DirectoryWatcher.prototype.watch = function watch(filePath, startTime) {
		this.watchers[withoutCase(filePath)] = this.watchers[withoutCase(filePath)] || [];
		this.refs++;
		var watcher = new Watcher(this, filePath, startTime);
		watcher.on("closed", function() {
			var idx = this.watchers[withoutCase(filePath)].indexOf(watcher);
			this.watchers[withoutCase(filePath)].splice(idx, 1);
			if(this.watchers[withoutCase(filePath)].length === 0) {
				delete this.watchers[withoutCase(filePath)];
				if(this.path === filePath)
					this.setNestedWatching(false);
			}
			if(--this.refs <= 0)
				this.close();
		}.bind(this));
		this.watchers[withoutCase(filePath)].push(watcher);
		var data;
		if(filePath === this.path) {
			this.setNestedWatching(true);
			data = false;
			Object.keys(this.files).forEach(function(file) {
				var d = this.files[file];
				if(!data)
					data = d;
				else
					data = [Math.max(data[0], d[0]), Math.max(data[1], d[1])];
			}, this);
		} else {
			data = this.files[filePath];
		}
		process.nextTick(function() {
			if(data) {
				if(data[0] > startTime)
					watcher.emit("change", data[1]);
			} else if(this.initialScan && this.initialScanRemoved.indexOf(filePath) >= 0) {
				watcher.emit("remove");
			}
		}.bind(this));
		return watcher;
	};
	
	DirectoryWatcher.prototype.onFileAdded = function onFileAdded(filePath, stat) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;
	
		this.setFileTime(filePath, +stat.mtime, false, "add");
	};
	
	DirectoryWatcher.prototype.onDirectoryAdded = function onDirectoryAdded(directoryPath /*, stat */) {
		if(directoryPath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;
		this.setDirectory(directoryPath, true, false);
	};
	
	DirectoryWatcher.prototype.onChange = function onChange(filePath, stat) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;
		var mtime = +stat.mtime;
		if(FS_ACCURENCY > 1 && mtime % 1 !== 0)
			FS_ACCURENCY = 1;
		else if(FS_ACCURENCY > 10 && mtime % 10 !== 0)
			FS_ACCURENCY = 10;
		else if(FS_ACCURENCY > 100 && mtime % 100 !== 0)
			FS_ACCURENCY = 100;
		else if(FS_ACCURENCY > 1000 && mtime % 1000 !== 0)
			FS_ACCURENCY = 1000;
		else if(FS_ACCURENCY > 2000 && mtime % 2000 !== 0)
			FS_ACCURENCY = 2000;
		this.setFileTime(filePath, mtime, false, "change");
	};
	
	DirectoryWatcher.prototype.onFileUnlinked = function onFileUnlinked(filePath) {
		if(filePath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(filePath.substr(this.path.length + 1))) return;
		this.setFileTime(filePath, null, false, "unlink");
		if(this.initialScan) {
			this.initialScanRemoved.push(filePath);
		}
	};
	
	DirectoryWatcher.prototype.onDirectoryUnlinked = function onDirectoryUnlinked(directoryPath) {
		if(directoryPath.indexOf(this.path) !== 0) return;
		if(/[\\\/]/.test(directoryPath.substr(this.path.length + 1))) return;
		this.setDirectory(directoryPath, false, false);
		if(this.initialScan) {
			this.initialScanRemoved.push(directoryPath);
		}
	};
	
	DirectoryWatcher.prototype.onWatcherError = function onWatcherError(/* err */) {
	};
	
	DirectoryWatcher.prototype.doInitialScan = function doInitialScan() {
		fs.readdir(this.path, function(err, items) {
			if(err) {
				this.initialScan = false;
				return;
			}
			async.forEach(items, function(item, callback) {
				var itemPath = path.join(this.path, item);
				fs.stat(itemPath, function(err2, stat) {
					if(!this.initialScan) return;
					if(err2) {
						callback();
						return;
					}
					if(stat.isFile()) {
						if(!this.files[itemPath])
							this.setFileTime(itemPath, +stat.mtime, true);
					} else if(stat.isDirectory()) {
						if(!this.directories[itemPath])
							this.setDirectory(itemPath, true, true);
					}
					callback();
				}.bind(this));
			}.bind(this), function() {
				this.initialScan = false;
				this.initialScanRemoved = null;
			}.bind(this));
		}.bind(this));
	};
	
	DirectoryWatcher.prototype.getTimes = function() {
		var obj = {};
		var selfTime = 0;
		Object.keys(this.files).forEach(function(file) {
			var data = this.files[file];
			if(data[1]) {
				var time = Math.max(data[0], data[1]);
				obj[file] = time;
				if(time > selfTime)
					selfTime = time;
			}
		}, this);
		if(this.nestedWatching) {
			Object.keys(this.directories).forEach(function(dir) {
				var w = this.directories[dir];
				var times = w.directoryWatcher.getTimes();
				Object.keys(times).forEach(function(file) {
					var time = times[file];
					obj[file] = time;
					if(time > selfTime)
						selfTime = time;
				});
			}, this);
			obj[this.path] = selfTime;
		}
		return obj;
	};
	
	DirectoryWatcher.prototype.close = function() {
		this.initialScan = false;
		this.watcher.close();
		if(this.nestedWatching) {
			Object.keys(this.directories).forEach(function(dir) {
				this.directories[dir].close();
			}, this);
		}
		this.emit("closed");
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 216 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*!
	 * async
	 * https://github.com/caolan/async
	 *
	 * Copyright 2010-2014 Caolan McMahon
	 * Released under the MIT license
	 */
	/*jshint onevar: false, indent:4 */
	/*global setImmediate: false, setTimeout: false, console: false */
	(function () {
	
	    var async = {};
	
	    // global on the server, window in the browser
	    var root, previous_async;
	
	    root = this;
	    if (root != null) {
	      previous_async = root.async;
	    }
	
	    async.noConflict = function () {
	        root.async = previous_async;
	        return async;
	    };
	
	    function only_once(fn) {
	        var called = false;
	        return function() {
	            if (called) throw new Error("Callback was already called.");
	            called = true;
	            fn.apply(root, arguments);
	        }
	    }
	
	    //// cross-browser compatiblity functions ////
	
	    var _toString = Object.prototype.toString;
	
	    var _isArray = Array.isArray || function (obj) {
	        return _toString.call(obj) === '[object Array]';
	    };
	
	    var _each = function (arr, iterator) {
	        for (var i = 0; i < arr.length; i += 1) {
	            iterator(arr[i], i, arr);
	        }
	    };
	
	    var _map = function (arr, iterator) {
	        if (arr.map) {
	            return arr.map(iterator);
	        }
	        var results = [];
	        _each(arr, function (x, i, a) {
	            results.push(iterator(x, i, a));
	        });
	        return results;
	    };
	
	    var _reduce = function (arr, iterator, memo) {
	        if (arr.reduce) {
	            return arr.reduce(iterator, memo);
	        }
	        _each(arr, function (x, i, a) {
	            memo = iterator(memo, x, i, a);
	        });
	        return memo;
	    };
	
	    var _keys = function (obj) {
	        if (Object.keys) {
	            return Object.keys(obj);
	        }
	        var keys = [];
	        for (var k in obj) {
	            if (obj.hasOwnProperty(k)) {
	                keys.push(k);
	            }
	        }
	        return keys;
	    };
	
	    //// exported async module functions ////
	
	    //// nextTick implementation with browser-compatible fallback ////
	    if (typeof process === 'undefined' || !(process.nextTick)) {
	        if (typeof setImmediate === 'function') {
	            async.nextTick = function (fn) {
	                // not a direct alias for IE10 compatibility
	                setImmediate(fn);
	            };
	            async.setImmediate = async.nextTick;
	        }
	        else {
	            async.nextTick = function (fn) {
	                setTimeout(fn, 0);
	            };
	            async.setImmediate = async.nextTick;
	        }
	    }
	    else {
	        async.nextTick = process.nextTick;
	        if (typeof setImmediate !== 'undefined') {
	            async.setImmediate = function (fn) {
	              // not a direct alias for IE10 compatibility
	              setImmediate(fn);
	            };
	        }
	        else {
	            async.setImmediate = async.nextTick;
	        }
	    }
	
	    async.each = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        _each(arr, function (x) {
	            iterator(x, only_once(done) );
	        });
	        function done(err) {
	          if (err) {
	              callback(err);
	              callback = function () {};
	          }
	          else {
	              completed += 1;
	              if (completed >= arr.length) {
	                  callback();
	              }
	          }
	        }
	    };
	    async.forEach = async.each;
	
	    async.eachSeries = function (arr, iterator, callback) {
	        callback = callback || function () {};
	        if (!arr.length) {
	            return callback();
	        }
	        var completed = 0;
	        var iterate = function () {
	            iterator(arr[completed], function (err) {
	                if (err) {
	                    callback(err);
	                    callback = function () {};
	                }
	                else {
	                    completed += 1;
	                    if (completed >= arr.length) {
	                        callback();
	                    }
	                    else {
	                        iterate();
	                    }
	                }
	            });
	        };
	        iterate();
	    };
	    async.forEachSeries = async.eachSeries;
	
	    async.eachLimit = function (arr, limit, iterator, callback) {
	        var fn = _eachLimit(limit);
	        fn.apply(null, [arr, iterator, callback]);
	    };
	    async.forEachLimit = async.eachLimit;
	
	    var _eachLimit = function (limit) {
	
	        return function (arr, iterator, callback) {
	            callback = callback || function () {};
	            if (!arr.length || limit <= 0) {
	                return callback();
	            }
	            var completed = 0;
	            var started = 0;
	            var running = 0;
	
	            (function replenish () {
	                if (completed >= arr.length) {
	                    return callback();
	                }
	
	                while (running < limit && started < arr.length) {
	                    started += 1;
	                    running += 1;
	                    iterator(arr[started - 1], function (err) {
	                        if (err) {
	                            callback(err);
	                            callback = function () {};
	                        }
	                        else {
	                            completed += 1;
	                            running -= 1;
	                            if (completed >= arr.length) {
	                                callback();
	                            }
	                            else {
	                                replenish();
	                            }
	                        }
	                    });
	                }
	            })();
	        };
	    };
	
	
	    var doParallel = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.each].concat(args));
	        };
	    };
	    var doParallelLimit = function(limit, fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [_eachLimit(limit)].concat(args));
	        };
	    };
	    var doSeries = function (fn) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            return fn.apply(null, [async.eachSeries].concat(args));
	        };
	    };
	
	
	    var _asyncMap = function (eachfn, arr, iterator, callback) {
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        if (!callback) {
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err) {
	                    callback(err);
	                });
	            });
	        } else {
	            var results = [];
	            eachfn(arr, function (x, callback) {
	                iterator(x.value, function (err, v) {
	                    results[x.index] = v;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	    async.map = doParallel(_asyncMap);
	    async.mapSeries = doSeries(_asyncMap);
	    async.mapLimit = function (arr, limit, iterator, callback) {
	        return _mapLimit(limit)(arr, iterator, callback);
	    };
	
	    var _mapLimit = function(limit) {
	        return doParallelLimit(limit, _asyncMap);
	    };
	
	    // reduce only has a series version, as doing reduce in parallel won't
	    // work in many situations.
	    async.reduce = function (arr, memo, iterator, callback) {
	        async.eachSeries(arr, function (x, callback) {
	            iterator(memo, x, function (err, v) {
	                memo = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, memo);
	        });
	    };
	    // inject alias
	    async.inject = async.reduce;
	    // foldl alias
	    async.foldl = async.reduce;
	
	    async.reduceRight = function (arr, memo, iterator, callback) {
	        var reversed = _map(arr, function (x) {
	            return x;
	        }).reverse();
	        async.reduce(reversed, memo, iterator, callback);
	    };
	    // foldr alias
	    async.foldr = async.reduceRight;
	
	    var _filter = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.filter = doParallel(_filter);
	    async.filterSeries = doSeries(_filter);
	    // select alias
	    async.select = async.filter;
	    async.selectSeries = async.filterSeries;
	
	    var _reject = function (eachfn, arr, iterator, callback) {
	        var results = [];
	        arr = _map(arr, function (x, i) {
	            return {index: i, value: x};
	        });
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (v) {
	                if (!v) {
	                    results.push(x);
	                }
	                callback();
	            });
	        }, function (err) {
	            callback(_map(results.sort(function (a, b) {
	                return a.index - b.index;
	            }), function (x) {
	                return x.value;
	            }));
	        });
	    };
	    async.reject = doParallel(_reject);
	    async.rejectSeries = doSeries(_reject);
	
	    var _detect = function (eachfn, arr, iterator, main_callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x, function (result) {
	                if (result) {
	                    main_callback(x);
	                    main_callback = function () {};
	                }
	                else {
	                    callback();
	                }
	            });
	        }, function (err) {
	            main_callback();
	        });
	    };
	    async.detect = doParallel(_detect);
	    async.detectSeries = doSeries(_detect);
	
	    async.some = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (v) {
	                    main_callback(true);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(false);
	        });
	    };
	    // any alias
	    async.any = async.some;
	
	    async.every = function (arr, iterator, main_callback) {
	        async.each(arr, function (x, callback) {
	            iterator(x, function (v) {
	                if (!v) {
	                    main_callback(false);
	                    main_callback = function () {};
	                }
	                callback();
	            });
	        }, function (err) {
	            main_callback(true);
	        });
	    };
	    // all alias
	    async.all = async.every;
	
	    async.sortBy = function (arr, iterator, callback) {
	        async.map(arr, function (x, callback) {
	            iterator(x, function (err, criteria) {
	                if (err) {
	                    callback(err);
	                }
	                else {
	                    callback(null, {value: x, criteria: criteria});
	                }
	            });
	        }, function (err, results) {
	            if (err) {
	                return callback(err);
	            }
	            else {
	                var fn = function (left, right) {
	                    var a = left.criteria, b = right.criteria;
	                    return a < b ? -1 : a > b ? 1 : 0;
	                };
	                callback(null, _map(results.sort(fn), function (x) {
	                    return x.value;
	                }));
	            }
	        });
	    };
	
	    async.auto = function (tasks, callback) {
	        callback = callback || function () {};
	        var keys = _keys(tasks);
	        var remainingTasks = keys.length
	        if (!remainingTasks) {
	            return callback();
	        }
	
	        var results = {};
	
	        var listeners = [];
	        var addListener = function (fn) {
	            listeners.unshift(fn);
	        };
	        var removeListener = function (fn) {
	            for (var i = 0; i < listeners.length; i += 1) {
	                if (listeners[i] === fn) {
	                    listeners.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        var taskComplete = function () {
	            remainingTasks--
	            _each(listeners.slice(0), function (fn) {
	                fn();
	            });
	        };
	
	        addListener(function () {
	            if (!remainingTasks) {
	                var theCallback = callback;
	                // prevent final callback from calling itself if it errors
	                callback = function () {};
	
	                theCallback(null, results);
	            }
	        });
	
	        _each(keys, function (k) {
	            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];
	            var taskCallback = function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                if (err) {
	                    var safeResults = {};
	                    _each(_keys(results), function(rkey) {
	                        safeResults[rkey] = results[rkey];
	                    });
	                    safeResults[k] = args;
	                    callback(err, safeResults);
	                    // stop subsequent errors hitting callback multiple times
	                    callback = function () {};
	                }
	                else {
	                    results[k] = args;
	                    async.setImmediate(taskComplete);
	                }
	            };
	            var requires = task.slice(0, Math.abs(task.length - 1)) || [];
	            var ready = function () {
	                return _reduce(requires, function (a, x) {
	                    return (a && results.hasOwnProperty(x));
	                }, true) && !results.hasOwnProperty(k);
	            };
	            if (ready()) {
	                task[task.length - 1](taskCallback, results);
	            }
	            else {
	                var listener = function () {
	                    if (ready()) {
	                        removeListener(listener);
	                        task[task.length - 1](taskCallback, results);
	                    }
	                };
	                addListener(listener);
	            }
	        });
	    };
	
	    async.retry = function(times, task, callback) {
	        var DEFAULT_TIMES = 5;
	        var attempts = [];
	        // Use defaults if times not passed
	        if (typeof times === 'function') {
	            callback = task;
	            task = times;
	            times = DEFAULT_TIMES;
	        }
	        // Make sure times is a number
	        times = parseInt(times, 10) || DEFAULT_TIMES;
	        var wrappedTask = function(wrappedCallback, wrappedResults) {
	            var retryAttempt = function(task, finalAttempt) {
	                return function(seriesCallback) {
	                    task(function(err, result){
	                        seriesCallback(!err || finalAttempt, {err: err, result: result});
	                    }, wrappedResults);
	                };
	            };
	            while (times) {
	                attempts.push(retryAttempt(task, !(times-=1)));
	            }
	            async.series(attempts, function(done, data){
	                data = data[data.length - 1];
	                (wrappedCallback || callback)(data.err, data.result);
	            });
	        }
	        // If a callback is passed, run this as a controll flow
	        return callback ? wrappedTask() : wrappedTask
	    };
	
	    async.waterfall = function (tasks, callback) {
	        callback = callback || function () {};
	        if (!_isArray(tasks)) {
	          var err = new Error('First argument to waterfall must be an array of functions');
	          return callback(err);
	        }
	        if (!tasks.length) {
	            return callback();
	        }
	        var wrapIterator = function (iterator) {
	            return function (err) {
	                if (err) {
	                    callback.apply(null, arguments);
	                    callback = function () {};
	                }
	                else {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    var next = iterator.next();
	                    if (next) {
	                        args.push(wrapIterator(next));
	                    }
	                    else {
	                        args.push(callback);
	                    }
	                    async.setImmediate(function () {
	                        iterator.apply(null, args);
	                    });
	                }
	            };
	        };
	        wrapIterator(async.iterator(tasks))();
	    };
	
	    var _parallel = function(eachfn, tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            eachfn.map(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            eachfn.each(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.parallel = function (tasks, callback) {
	        _parallel({ map: async.map, each: async.each }, tasks, callback);
	    };
	
	    async.parallelLimit = function(tasks, limit, callback) {
	        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);
	    };
	
	    async.series = function (tasks, callback) {
	        callback = callback || function () {};
	        if (_isArray(tasks)) {
	            async.mapSeries(tasks, function (fn, callback) {
	                if (fn) {
	                    fn(function (err) {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        if (args.length <= 1) {
	                            args = args[0];
	                        }
	                        callback.call(null, err, args);
	                    });
	                }
	            }, callback);
	        }
	        else {
	            var results = {};
	            async.eachSeries(_keys(tasks), function (k, callback) {
	                tasks[k](function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    results[k] = args;
	                    callback(err);
	                });
	            }, function (err) {
	                callback(err, results);
	            });
	        }
	    };
	
	    async.iterator = function (tasks) {
	        var makeCallback = function (index) {
	            var fn = function () {
	                if (tasks.length) {
	                    tasks[index].apply(null, arguments);
	                }
	                return fn.next();
	            };
	            fn.next = function () {
	                return (index < tasks.length - 1) ? makeCallback(index + 1): null;
	            };
	            return fn;
	        };
	        return makeCallback(0);
	    };
	
	    async.apply = function (fn) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return function () {
	            return fn.apply(
	                null, args.concat(Array.prototype.slice.call(arguments))
	            );
	        };
	    };
	
	    var _concat = function (eachfn, arr, fn, callback) {
	        var r = [];
	        eachfn(arr, function (x, cb) {
	            fn(x, function (err, y) {
	                r = r.concat(y || []);
	                cb(err);
	            });
	        }, function (err) {
	            callback(err, r);
	        });
	    };
	    async.concat = doParallel(_concat);
	    async.concatSeries = doSeries(_concat);
	
	    async.whilst = function (test, iterator, callback) {
	        if (test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.whilst(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doWhilst = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (test.apply(null, args)) {
	                async.doWhilst(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.until = function (test, iterator, callback) {
	        if (!test()) {
	            iterator(function (err) {
	                if (err) {
	                    return callback(err);
	                }
	                async.until(test, iterator, callback);
	            });
	        }
	        else {
	            callback();
	        }
	    };
	
	    async.doUntil = function (iterator, test, callback) {
	        iterator(function (err) {
	            if (err) {
	                return callback(err);
	            }
	            var args = Array.prototype.slice.call(arguments, 1);
	            if (!test.apply(null, args)) {
	                async.doUntil(iterator, test, callback);
	            }
	            else {
	                callback();
	            }
	        });
	    };
	
	    async.queue = function (worker, concurrency) {
	        if (concurrency === undefined) {
	            concurrency = 1;
	        }
	        function _insert(q, data, pos, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	
	              if (pos) {
	                q.tasks.unshift(item);
	              } else {
	                q.tasks.push(item);
	              }
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	
	        var workers = 0;
	        var q = {
	            tasks: [],
	            concurrency: concurrency,
	            saturated: null,
	            empty: null,
	            drain: null,
	            started: false,
	            paused: false,
	            push: function (data, callback) {
	              _insert(q, data, false, callback);
	            },
	            kill: function () {
	              q.drain = null;
	              q.tasks = [];
	            },
	            unshift: function (data, callback) {
	              _insert(q, data, true, callback);
	            },
	            process: function () {
	                if (!q.paused && workers < q.concurrency && q.tasks.length) {
	                    var task = q.tasks.shift();
	                    if (q.empty && q.tasks.length === 0) {
	                        q.empty();
	                    }
	                    workers += 1;
	                    var next = function () {
	                        workers -= 1;
	                        if (task.callback) {
	                            task.callback.apply(task, arguments);
	                        }
	                        if (q.drain && q.tasks.length + workers === 0) {
	                            q.drain();
	                        }
	                        q.process();
	                    };
	                    var cb = only_once(next);
	                    worker(task.data, cb);
	                }
	            },
	            length: function () {
	                return q.tasks.length;
	            },
	            running: function () {
	                return workers;
	            },
	            idle: function() {
	                return q.tasks.length + workers === 0;
	            },
	            pause: function () {
	                if (q.paused === true) { return; }
	                q.paused = true;
	            },
	            resume: function () {
	                if (q.paused === false) { return; }
	                q.paused = false;
	                // Need to call q.process once per concurrent
	                // worker to preserve full concurrency after pause
	                for (var w = 1; w <= q.concurrency; w++) {
	                    async.setImmediate(q.process);
	                }
	            }
	        };
	        return q;
	    };
	
	    async.priorityQueue = function (worker, concurrency) {
	
	        function _compareTasks(a, b){
	          return a.priority - b.priority;
	        };
	
	        function _binarySearch(sequence, item, compare) {
	          var beg = -1,
	              end = sequence.length - 1;
	          while (beg < end) {
	            var mid = beg + ((end - beg + 1) >>> 1);
	            if (compare(item, sequence[mid]) >= 0) {
	              beg = mid;
	            } else {
	              end = mid - 1;
	            }
	          }
	          return beg;
	        }
	
	        function _insert(q, data, priority, callback) {
	          if (!q.started){
	            q.started = true;
	          }
	          if (!_isArray(data)) {
	              data = [data];
	          }
	          if(data.length == 0) {
	             // call drain immediately if there are no tasks
	             return async.setImmediate(function() {
	                 if (q.drain) {
	                     q.drain();
	                 }
	             });
	          }
	          _each(data, function(task) {
	              var item = {
	                  data: task,
	                  priority: priority,
	                  callback: typeof callback === 'function' ? callback : null
	              };
	
	              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);
	
	              if (q.saturated && q.tasks.length === q.concurrency) {
	                  q.saturated();
	              }
	              async.setImmediate(q.process);
	          });
	        }
	
	        // Start with a normal queue
	        var q = async.queue(worker, concurrency);
	
	        // Override push to accept second parameter representing priority
	        q.push = function (data, priority, callback) {
	          _insert(q, data, priority, callback);
	        };
	
	        // Remove unshift function
	        delete q.unshift;
	
	        return q;
	    };
	
	    async.cargo = function (worker, payload) {
	        var working     = false,
	            tasks       = [];
	
	        var cargo = {
	            tasks: tasks,
	            payload: payload,
	            saturated: null,
	            empty: null,
	            drain: null,
	            drained: true,
	            push: function (data, callback) {
	                if (!_isArray(data)) {
	                    data = [data];
	                }
	                _each(data, function(task) {
	                    tasks.push({
	                        data: task,
	                        callback: typeof callback === 'function' ? callback : null
	                    });
	                    cargo.drained = false;
	                    if (cargo.saturated && tasks.length === payload) {
	                        cargo.saturated();
	                    }
	                });
	                async.setImmediate(cargo.process);
	            },
	            process: function process() {
	                if (working) return;
	                if (tasks.length === 0) {
	                    if(cargo.drain && !cargo.drained) cargo.drain();
	                    cargo.drained = true;
	                    return;
	                }
	
	                var ts = typeof payload === 'number'
	                            ? tasks.splice(0, payload)
	                            : tasks.splice(0, tasks.length);
	
	                var ds = _map(ts, function (task) {
	                    return task.data;
	                });
	
	                if(cargo.empty) cargo.empty();
	                working = true;
	                worker(ds, function () {
	                    working = false;
	
	                    var args = arguments;
	                    _each(ts, function (data) {
	                        if (data.callback) {
	                            data.callback.apply(null, args);
	                        }
	                    });
	
	                    process();
	                });
	            },
	            length: function () {
	                return tasks.length;
	            },
	            running: function () {
	                return working;
	            }
	        };
	        return cargo;
	    };
	
	    var _console_fn = function (name) {
	        return function (fn) {
	            var args = Array.prototype.slice.call(arguments, 1);
	            fn.apply(null, args.concat([function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (typeof console !== 'undefined') {
	                    if (err) {
	                        if (console.error) {
	                            console.error(err);
	                        }
	                    }
	                    else if (console[name]) {
	                        _each(args, function (x) {
	                            console[name](x);
	                        });
	                    }
	                }
	            }]));
	        };
	    };
	    async.log = _console_fn('log');
	    async.dir = _console_fn('dir');
	    /*async.info = _console_fn('info');
	    async.warn = _console_fn('warn');
	    async.error = _console_fn('error');*/
	
	    async.memoize = function (fn, hasher) {
	        var memo = {};
	        var queues = {};
	        hasher = hasher || function (x) {
	            return x;
	        };
	        var memoized = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            var key = hasher.apply(null, args);
	            if (key in memo) {
	                async.nextTick(function () {
	                    callback.apply(null, memo[key]);
	                });
	            }
	            else if (key in queues) {
	                queues[key].push(callback);
	            }
	            else {
	                queues[key] = [callback];
	                fn.apply(null, args.concat([function () {
	                    memo[key] = arguments;
	                    var q = queues[key];
	                    delete queues[key];
	                    for (var i = 0, l = q.length; i < l; i++) {
	                      q[i].apply(null, arguments);
	                    }
	                }]));
	            }
	        };
	        memoized.memo = memo;
	        memoized.unmemoized = fn;
	        return memoized;
	    };
	
	    async.unmemoize = function (fn) {
	      return function () {
	        return (fn.unmemoized || fn).apply(null, arguments);
	      };
	    };
	
	    async.times = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.map(counter, iterator, callback);
	    };
	
	    async.timesSeries = function (count, iterator, callback) {
	        var counter = [];
	        for (var i = 0; i < count; i++) {
	            counter.push(i);
	        }
	        return async.mapSeries(counter, iterator, callback);
	    };
	
	    async.seq = function (/* functions... */) {
	        var fns = arguments;
	        return function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            async.reduce(fns, args, function (newargs, fn, cb) {
	                fn.apply(that, newargs.concat([function () {
	                    var err = arguments[0];
	                    var nextargs = Array.prototype.slice.call(arguments, 1);
	                    cb(err, nextargs);
	                }]))
	            },
	            function (err, results) {
	                callback.apply(that, [err].concat(results));
	            });
	        };
	    };
	
	    async.compose = function (/* functions... */) {
	      return async.seq.apply(null, Array.prototype.reverse.call(arguments));
	    };
	
	    var _applyEach = function (eachfn, fns /*args...*/) {
	        var go = function () {
	            var that = this;
	            var args = Array.prototype.slice.call(arguments);
	            var callback = args.pop();
	            return eachfn(fns, function (fn, cb) {
	                fn.apply(that, args.concat([cb]));
	            },
	            callback);
	        };
	        if (arguments.length > 2) {
	            var args = Array.prototype.slice.call(arguments, 2);
	            return go.apply(this, args);
	        }
	        else {
	            return go;
	        }
	    };
	    async.applyEach = doParallel(_applyEach);
	    async.applyEachSeries = doSeries(_applyEach);
	
	    async.forever = function (fn, callback) {
	        function next(err) {
	            if (err) {
	                if (callback) {
	                    return callback(err);
	                }
	                throw err;
	            }
	            fn(next);
	        }
	        next();
	    };
	
	    // Node.js
	    if (typeof module !== 'undefined' && module.exports) {
	        module.exports = async;
	    }
	    // AMD / RequireJS
	    else if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return async;
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    }
	    // included directly via <script> tag
	    else {
	        root.async = async;
	    }
	
	}());
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(11).setImmediate))

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var EventEmitter = __webpack_require__(216).EventEmitter;
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(4);
	var asyncEach = __webpack_require__(219);
	var anymatch = __webpack_require__(220);
	var globParent = __webpack_require__(253);
	var isGlob = __webpack_require__(245);
	var isAbsolute = __webpack_require__(260);
	var inherits = __webpack_require__(261);
	
	var NodeFsHandler = __webpack_require__(262);
	var FsEventsHandler = __webpack_require__(297);
	
	var arrify = function(value) {
	  if (value == null) return [];
	  return Array.isArray(value) ? value : [value];
	};
	
	var flatten = function(list, result) {
	  if (result == null) result = [];
	  list.forEach(function(item) {
	    if (Array.isArray(item)) {
	      flatten(item, result);
	    } else {
	      result.push(item);
	    }
	  });
	  return result;
	};
	
	// Little isString util for use in Array#every.
	var isString = function(thing) {
	  return typeof thing === 'string';
	};
	
	// Public: Main class.
	// Watches files & directories for changes.
	//
	// * _opts - object, chokidar options hash
	//
	// Emitted events:
	// `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
	//
	// Examples
	//
	//  var watcher = new FSWatcher()
	//    .add(directories)
	//    .on('add', path => console.log('File', path, 'was added'))
	//    .on('change', path => console.log('File', path, 'was changed'))
	//    .on('unlink', path => console.log('File', path, 'was removed'))
	//    .on('all', (event, path) => console.log(path, ' emitted ', event))
	//
	function FSWatcher(_opts) {
	  EventEmitter.call(this);
	  var opts = {};
	  // in case _opts that is passed in is a frozen object
	  if (_opts) for (var opt in _opts) opts[opt] = _opts[opt];
	  this._watched = Object.create(null);
	  this._closers = Object.create(null);
	  this._ignoredPaths = Object.create(null);
	  Object.defineProperty(this, '_globIgnored', {
	    get: function() { return Object.keys(this._ignoredPaths); }
	  });
	  this.closed = false;
	  this._throttled = Object.create(null);
	  this._symlinkPaths = Object.create(null);
	
	  function undef(key) {
	    return opts[key] === undefined;
	  }
	
	  // Set up default options.
	  if (undef('persistent')) opts.persistent = true;
	  if (undef('ignoreInitial')) opts.ignoreInitial = false;
	  if (undef('ignorePermissionErrors')) opts.ignorePermissionErrors = false;
	  if (undef('interval')) opts.interval = 100;
	  if (undef('binaryInterval')) opts.binaryInterval = 300;
	  this.enableBinaryInterval = opts.binaryInterval !== opts.interval;
	
	  // Enable fsevents on OS X when polling isn't explicitly enabled.
	  if (undef('useFsEvents')) opts.useFsEvents = !opts.usePolling;
	
	  // If we can't use fsevents, ensure the options reflect it's disabled.
	  if (!FsEventsHandler.canUse()) opts.useFsEvents = false;
	
	  // Use polling on Mac if not using fsevents.
	  // Other platforms use non-polling fs.watch.
	  if (undef('usePolling') && !opts.useFsEvents) {
	    opts.usePolling = process.platform === 'darwin';
	  }
	
	  // Global override (useful for end-developers that need to force polling for all
	  // instances of chokidar, regardless of usage/dependency depth)
	  var envPoll = process.env.CHOKIDAR_USEPOLLING;
	  if (envPoll !== undefined) {
	    var envLower = envPoll.toLowerCase();
	
	    if (envLower === 'false' || envLower === '0') {
	      opts.usePolling = false;
	    } else if (envLower === 'true' || envLower === '1') {
	      opts.usePolling = true;
	    } else {
	      opts.usePolling = !!envLower
	    }
	  }
	
	  // Editor atomic write normalization enabled by default with fs.watch
	  if (undef('atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;
	  if (opts.atomic) this._pendingUnlinks = Object.create(null);
	
	  if (undef('followSymlinks')) opts.followSymlinks = true;
	
	  if (undef('awaitWriteFinish')) opts.awaitWriteFinish = false;
	  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};
	  var awf = opts.awaitWriteFinish;
	  if (awf) {
	    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;
	    if (!awf.pollInterval) awf.pollInterval = 100;
	
	    this._pendingWrites = Object.create(null);
	  }
	  if (opts.ignored) opts.ignored = arrify(opts.ignored);
	
	  this._isntIgnored = function(path, stat) {
	    return !this._isIgnored(path, stat);
	  }.bind(this);
	
	  var readyCalls = 0;
	  this._emitReady = function() {
	    if (++readyCalls >= this._readyCount) {
	      this._emitReady = Function.prototype;
	      this._readyEmitted = true;
	      // use process.nextTick to allow time for listener to be bound
	      process.nextTick(this.emit.bind(this, 'ready'));
	    }
	  }.bind(this);
	
	  this.options = opts;
	
	  // You’re frozen when your heart’s not open.
	  Object.freeze(opts);
	}
	
	inherits(FSWatcher, EventEmitter);
	
	// Common helpers
	// --------------
	
	// Private method: Normalize and emit events
	//
	// * event     - string, type of event
	// * path      - string, file or directory path
	// * val[1..3] - arguments to be passed with event
	//
	// Returns the error if defined, otherwise the value of the
	// FSWatcher instance's `closed` flag
	FSWatcher.prototype._emit = function(event, path, val1, val2, val3) {
	  if (this.options.cwd) path = sysPath.relative(this.options.cwd, path);
	  var args = [event, path];
	  if (val3 !== undefined) args.push(val1, val2, val3);
	  else if (val2 !== undefined) args.push(val1, val2);
	  else if (val1 !== undefined) args.push(val1);
	
	  var awf = this.options.awaitWriteFinish;
	  if (awf && this._pendingWrites[path]) {
	    this._pendingWrites[path].lastChange = new Date();
	    return this;
	  }
	
	  if (this.options.atomic) {
	    if (event === 'unlink') {
	      this._pendingUnlinks[path] = args;
	      setTimeout(function() {
	        Object.keys(this._pendingUnlinks).forEach(function(path) {
	          this.emit.apply(this, this._pendingUnlinks[path]);
	          this.emit.apply(this, ['all'].concat(this._pendingUnlinks[path]));
	          delete this._pendingUnlinks[path];
	        }.bind(this));
	      }.bind(this), typeof this.options.atomic === "number"
	        ? this.options.atomic
	        : 100);
	      return this;
	    } else if (event === 'add' && this._pendingUnlinks[path]) {
	      event = args[0] = 'change';
	      delete this._pendingUnlinks[path];
	    }
	  }
	
	  var emitEvent = function() {
	    this.emit.apply(this, args);
	    if (event !== 'error') this.emit.apply(this, ['all'].concat(args));
	  }.bind(this);
	
	  if (awf && (event === 'add' || event === 'change') && this._readyEmitted) {
	    var awfEmit = function(err, stats) {
	      if (err) {
	        event = args[0] = 'error';
	        args[1] = err;
	        emitEvent();
	      } else if (stats) {
	        // if stats doesn't exist the file must have been deleted
	        if (args.length > 2) {
	          args[2] = stats;
	        } else {
	          args.push(stats);
	        }
	        emitEvent();
	      }
	    };
	
	    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);
	    return this;
	  }
	
	  if (event === 'change') {
	    if (!this._throttle('change', path, 50)) return this;
	  }
	
	  if (
	    this.options.alwaysStat && val1 === undefined &&
	    (event === 'add' || event === 'addDir' || event === 'change')
	  ) {
	    var fullPath = this.options.cwd ? sysPath.join(this.options.cwd, path) : path;
	    fs.stat(fullPath, function(error, stats) {
	      // Suppress event when fs.stat fails, to avoid sending undefined 'stat'
	      if (error || !stats) return;
	
	      args.push(stats);
	      emitEvent();
	    });
	  } else {
	    emitEvent();
	  }
	
	  return this;
	};
	
	// Private method: Common handler for errors
	//
	// * error  - object, Error instance
	//
	// Returns the error if defined, otherwise the value of the
	// FSWatcher instance's `closed` flag
	FSWatcher.prototype._handleError = function(error) {
	  var code = error && error.code;
	  var ipe = this.options.ignorePermissionErrors;
	  if (error &&
	    code !== 'ENOENT' &&
	    code !== 'ENOTDIR' &&
	    (!ipe || (code !== 'EPERM' && code !== 'EACCES'))
	  ) this.emit('error', error);
	  return error || this.closed;
	};
	
	// Private method: Helper utility for throttling
	//
	// * action  - string, type of action being throttled
	// * path    - string, path being acted upon
	// * timeout - int, duration of time to suppress duplicate actions
	//
	// Returns throttle tracking object or false if action should be suppressed
	FSWatcher.prototype._throttle = function(action, path, timeout) {
	  if (!(action in this._throttled)) {
	    this._throttled[action] = Object.create(null);
	  }
	  var throttled = this._throttled[action];
	  if (path in throttled) return false;
	  function clear() {
	    delete throttled[path];
	    clearTimeout(timeoutObject);
	  }
	  var timeoutObject = setTimeout(clear, timeout);
	  throttled[path] = {timeoutObject: timeoutObject, clear: clear};
	  return throttled[path];
	};
	
	// Private method: Awaits write operation to finish
	//
	// * path    - string, path being acted upon
	// * threshold - int, time in milliseconds a file size must be fixed before
	//                    acknowledgeing write operation is finished
	// * awfEmit - function, to be called when ready for event to be emitted
	// Polls a newly created file for size variations. When files size does not
	// change for 'threshold' milliseconds calls callback.
	FSWatcher.prototype._awaitWriteFinish = function(path, threshold, event, awfEmit) {
	  var timeoutHandler;
	
	  var fullPath = path;
	  if (this.options.cwd && !isAbsolute(path)) {
	    fullPath = sysPath.join(this.options.cwd, path);
	  }
	
	  var now = new Date();
	
	  var awaitWriteFinish = (function (prevStat) {
	    fs.stat(fullPath, function(err, curStat) {
	      if (err) {
	        if (err.code !== 'ENOENT') awfEmit(err);
	        return;
	      }
	
	      var now = new Date();
	
	      if (prevStat && curStat.size != prevStat.size) {
	        this._pendingWrites[path].lastChange = now;
	      }
	
	      if (now - this._pendingWrites[path].lastChange >= threshold) {
	        delete this._pendingWrites[path];
	        awfEmit(null, curStat);
	      } else {
	        timeoutHandler = setTimeout(
	          awaitWriteFinish.bind(this, curStat),
	          this.options.awaitWriteFinish.pollInterval
	        );
	      }
	    }.bind(this));
	  }.bind(this));
	
	  if (!(path in this._pendingWrites)) {
	    this._pendingWrites[path] = {
	      lastChange: now,
	      cancelWait: function() {
	        delete this._pendingWrites[path];
	        clearTimeout(timeoutHandler);
	        return event;
	      }.bind(this)
	    };
	    timeoutHandler = setTimeout(
	      awaitWriteFinish.bind(this),
	      this.options.awaitWriteFinish.pollInterval
	    );
	  }
	};
	
	// Private method: Determines whether user has asked to ignore this path
	//
	// * path  - string, path to file or directory
	// * stats - object, result of fs.stat
	//
	// Returns boolean
	var dotRe = /\..*\.(sw[px])$|\~$|\.subl.*\.tmp/;
	FSWatcher.prototype._isIgnored = function(path, stats) {
	  if (this.options.atomic && dotRe.test(path)) return true;
	
	  if (!this._userIgnored) {
	    var cwd = this.options.cwd;
	    var ignored = this.options.ignored;
	    if (cwd && ignored) {
	      ignored = ignored.map(function (path) {
	        if (typeof path !== 'string') return path;
	        return isAbsolute(path) ? path : sysPath.join(cwd, path);
	      });
	    }
	    var paths = arrify(ignored)
	      .filter(function(path) {
	        return typeof path === 'string' && !isGlob(path);
	      }).map(function(path) {
	        return path + '/**';
	      });
	    this._userIgnored = anymatch(
	      this._globIgnored.concat(ignored).concat(paths)
	    );
	  }
	
	  return this._userIgnored([path, stats]);
	};
	
	// Private method: Provides a set of common helpers and properties relating to
	// symlink and glob handling
	//
	// * path - string, file, directory, or glob pattern being watched
	// * depth - int, at any depth > 0, this isn't a glob
	//
	// Returns object containing helpers for this path
	var replacerRe = /^\.[\/\\]/;
	FSWatcher.prototype._getWatchHelpers = function(path, depth) {
	  path = path.replace(replacerRe, '');
	  var watchPath = depth || !isGlob(path) ? path : globParent(path);
	  var fullWatchPath = sysPath.resolve(watchPath);
	  var hasGlob = watchPath !== path;
	  var globFilter = hasGlob ? anymatch(path) : false;
	  var follow = this.options.followSymlinks;
	  var globSymlink = hasGlob && follow ? null : false;
	
	  var checkGlobSymlink = function(entry) {
	    // only need to resolve once
	    // first entry should always have entry.parentDir === ''
	    if (globSymlink == null) {
	      globSymlink = entry.fullParentDir === fullWatchPath ? false : {
	        realPath: entry.fullParentDir,
	        linkPath: fullWatchPath
	      };
	    }
	
	    if (globSymlink) {
	      return entry.fullPath.replace(globSymlink.realPath, globSymlink.linkPath);
	    }
	
	    return entry.fullPath;
	  };
	
	  var entryPath = function(entry) {
	    return sysPath.join(watchPath,
	      sysPath.relative(watchPath, checkGlobSymlink(entry))
	    );
	  };
	
	  var filterPath = function(entry) {
	    if (entry.stat && entry.stat.isSymbolicLink()) return filterDir(entry);
	    var resolvedPath = entryPath(entry);
	    return (!hasGlob || globFilter(resolvedPath)) &&
	      this._isntIgnored(resolvedPath, entry.stat) &&
	      (this.options.ignorePermissionErrors ||
	        this._hasReadPermissions(entry.stat));
	  }.bind(this);
	
	  var getDirParts = function(path) {
	    if (!hasGlob) return false;
	    var parts = sysPath.relative(watchPath, path).split(/[\/\\]/);
	    return parts;
	  };
	
	  var dirParts = getDirParts(path);
	  if (dirParts && dirParts.length > 1) dirParts.pop();
	  var unmatchedGlob;
	
	  var filterDir = function(entry) {
	    if (hasGlob) {
	      var entryParts = getDirParts(checkGlobSymlink(entry));
	      var globstar = false;
	      unmatchedGlob = !dirParts.every(function(part, i) {
	        if (part === '**') globstar = true;
	        return globstar || !entryParts[i] || anymatch(part, entryParts[i]);
	      });
	    }
	    return !unmatchedGlob && this._isntIgnored(entryPath(entry), entry.stat);
	  }.bind(this);
	
	  return {
	    followSymlinks: follow,
	    statMethod: follow ? 'stat' : 'lstat',
	    path: path,
	    watchPath: watchPath,
	    entryPath: entryPath,
	    hasGlob: hasGlob,
	    globFilter: globFilter,
	    filterPath: filterPath,
	    filterDir: filterDir
	  };
	};
	
	// Directory helpers
	// -----------------
	
	// Private method: Provides directory tracking objects
	//
	// * directory - string, path of the directory
	//
	// Returns the directory's tracking object
	FSWatcher.prototype._getWatchedDir = function(directory) {
	  var dir = sysPath.resolve(directory);
	  var watcherRemove = this._remove.bind(this);
	  if (!(dir in this._watched)) this._watched[dir] = {
	    _items: Object.create(null),
	    add: function(item) {
	      if (item !== '.') this._items[item] = true;
	    },
	    remove: function(item) {
	      delete this._items[item];
	      if (!this.children().length) {
	        fs.readdir(dir, function(err) {
	          if (err) watcherRemove(sysPath.dirname(dir), sysPath.basename(dir));
	        });
	      }
	    },
	    has: function(item) {return item in this._items;},
	    children: function() {return Object.keys(this._items);}
	  };
	  return this._watched[dir];
	};
	
	// File helpers
	// ------------
	
	// Private method: Check for read permissions
	// Based on this answer on SO: http://stackoverflow.com/a/11781404/1358405
	//
	// * stats - object, result of fs.stat
	//
	// Returns boolean
	FSWatcher.prototype._hasReadPermissions = function(stats) {
	  return Boolean(4 & parseInt(((stats && stats.mode) & 0x1ff).toString(8)[0], 10));
	};
	
	// Private method: Handles emitting unlink events for
	// files and directories, and via recursion, for
	// files and directories within directories that are unlinked
	//
	// * directory - string, directory within which the following item is located
	// * item      - string, base path of item/directory
	//
	// Returns nothing
	FSWatcher.prototype._remove = function(directory, item) {
	  // if what is being deleted is a directory, get that directory's paths
	  // for recursive deleting and cleaning of watched object
	  // if it is not a directory, nestedDirectoryChildren will be empty array
	  var path = sysPath.join(directory, item);
	  var fullPath = sysPath.resolve(path);
	  var isDirectory = this._watched[path] || this._watched[fullPath];
	
	  // prevent duplicate handling in case of arriving here nearly simultaneously
	  // via multiple paths (such as _handleFile and _handleDir)
	  if (!this._throttle('remove', path, 100)) return;
	
	  // if the only watched file is removed, watch for its return
	  var watchedDirs = Object.keys(this._watched);
	  if (!isDirectory && !this.options.useFsEvents && watchedDirs.length === 1) {
	    this.add(directory, item, true);
	  }
	
	  // This will create a new entry in the watched object in either case
	  // so we got to do the directory check beforehand
	  var nestedDirectoryChildren = this._getWatchedDir(path).children();
	
	  // Recursively remove children directories / files.
	  nestedDirectoryChildren.forEach(function(nestedItem) {
	    this._remove(path, nestedItem);
	  }, this);
	
	  // Check if item was on the watched list and remove it
	  var parent = this._getWatchedDir(directory);
	  var wasTracked = parent.has(item);
	  parent.remove(item);
	
	  // If we wait for this file to be fully written, cancel the wait.
	  var relPath = path;
	  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);
	  if (this.options.awaitWriteFinish && this._pendingWrites[relPath]) {
	    var event = this._pendingWrites[relPath].cancelWait();
	    if (event === 'add') return;
	  }
	
	  // The Entry will either be a directory that just got removed
	  // or a bogus entry to a file, in either case we have to remove it
	  delete this._watched[path];
	  delete this._watched[fullPath];
	  var eventName = isDirectory ? 'unlinkDir' : 'unlink';
	  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);
	
	  // Avoid conflicts if we later create another file with the same name
	  if (!this.options.useFsEvents) {
	    this._closePath(path);
	  }
	};
	
	FSWatcher.prototype._closePath = function(path) {
	  if (!this._closers[path]) return;
	  this._closers[path]();
	  delete this._closers[path];
	  this._getWatchedDir(sysPath.dirname(path)).remove(sysPath.basename(path));
	}
	
	// Public method: Adds paths to be watched on an existing FSWatcher instance
	
	// * paths     - string or array of strings, file/directory paths and/or globs
	// * _origAdd  - private boolean, for handling non-existent paths to be watched
	// * _internal - private boolean, indicates a non-user add
	
	// Returns an instance of FSWatcher for chaining.
	FSWatcher.prototype.add = function(paths, _origAdd, _internal) {
	  var cwd = this.options.cwd;
	  this.closed = false;
	  paths = flatten(arrify(paths));
	
	  if (!paths.every(isString)) {
	    throw new TypeError('Non-string provided as watch path: ' + paths);
	  }
	
	  if (cwd) paths = paths.map(function(path) {
	    if (isAbsolute(path)) {
	      return path;
	    } else if (path[0] === '!') {
	      return '!' + sysPath.join(cwd, path.substring(1));
	    } else {
	      return sysPath.join(cwd, path);
	    }
	  });
	
	  // set aside negated glob strings
	  paths = paths.filter(function(path) {
	    if (path[0] === '!') {
	      this._ignoredPaths[path.substring(1)] = true;
	    } else {
	      // if a path is being added that was previously ignored, stop ignoring it
	      delete this._ignoredPaths[path];
	      delete this._ignoredPaths[path + '/**'];
	
	      // reset the cached userIgnored anymatch fn
	      // to make ignoredPaths changes effective
	      this._userIgnored = null;
	
	      return true;
	    }
	  }, this);
	
	  if (this.options.useFsEvents && FsEventsHandler.canUse()) {
	    if (!this._readyCount) this._readyCount = paths.length;
	    if (this.options.persistent) this._readyCount *= 2;
	    paths.forEach(this._addToFsEvents, this);
	  } else {
	    if (!this._readyCount) this._readyCount = 0;
	    this._readyCount += paths.length;
	    asyncEach(paths, function(path, next) {
	      this._addToNodeFs(path, !_internal, 0, 0, _origAdd, function(err, res) {
	        if (res) this._emitReady();
	        next(err, res);
	      }.bind(this));
	    }.bind(this), function(error, results) {
	      results.forEach(function(item) {
	        if (!item) return;
	        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));
	      }, this);
	    }.bind(this));
	  }
	
	  return this;
	};
	
	// Public method: Close watchers or start ignoring events from specified paths.
	
	// * paths     - string or array of strings, file/directory paths and/or globs
	
	// Returns instance of FSWatcher for chaining.
	FSWatcher.prototype.unwatch = function(paths) {
	  if (this.closed) return this;
	  paths = flatten(arrify(paths));
	
	  paths.forEach(function(path) {
	    // convert to absolute path unless relative path already matches
	    if (!isAbsolute(path) && !this._closers[path]) {
	      if (this.options.cwd) path = sysPath.join(this.options.cwd, path);
	      path = sysPath.resolve(path);
	    }
	
	    this._closePath(path);
	
	    this._ignoredPaths[path] = true;
	    if (path in this._watched) {
	      this._ignoredPaths[path + '/**'] = true;
	    }
	
	    // reset the cached userIgnored anymatch fn
	    // to make ignoredPaths changes effective
	    this._userIgnored = null;
	  }, this);
	
	  return this;
	};
	
	// Public method: Close watchers and remove all listeners from watched paths.
	
	// Returns instance of FSWatcher for chaining.
	FSWatcher.prototype.close = function() {
	  if (this.closed) return this;
	
	  this.closed = true;
	  Object.keys(this._closers).forEach(function(watchPath) {
	    this._closers[watchPath]();
	    delete this._closers[watchPath];
	  }, this);
	  this._watched = Object.create(null);
	
	  this.removeAllListeners();
	  return this;
	};
	
	// Public method: Expose list of watched paths
	
	// Returns object w/ dir paths as keys and arrays of contained paths as values.
	FSWatcher.prototype.getWatched = function() {
	  var watchList = {};
	  Object.keys(this._watched).forEach(function(dir) {
	    var key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;
	    watchList[key || '.'] = Object.keys(this._watched[dir]._items).sort();
	  }.bind(this));
	  return watchList;
	};
	
	// Attach watch handler prototype methods
	function importHandler(handler) {
	  Object.keys(handler.prototype).forEach(function(method) {
	    FSWatcher.prototype[method] = handler.prototype[method];
	  });
	}
	importHandler(NodeFsHandler);
	if (FsEventsHandler.canUse()) importHandler(FsEventsHandler);
	
	// Export FSWatcher class
	exports.FSWatcher = FSWatcher;
	
	// Public function: Instantiates watcher with paths to be tracked.
	
	// * paths     - string or array of strings, file/directory paths and/or globs
	// * options   - object, chokidar options
	
	// Returns an instance of FSWatcher for chaining.
	exports.watch = function(paths, options) {
	  return new FSWatcher(options).add(paths);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// async-each MIT license (by Paul Miller from http://paulmillr.com).
	(function(globals) {
	  'use strict';
	  var each = function(items, next, callback) {
	    if (!Array.isArray(items)) throw new TypeError('each() expects array as first argument');
	    if (typeof next !== 'function') throw new TypeError('each() expects function as second argument');
	    if (typeof callback !== 'function') callback = Function.prototype; // no-op
	
	    if (items.length === 0) return callback(undefined, items);
	
	    var transformed = new Array(items.length);
	    var count = 0;
	    var returned = false;
	
	    items.forEach(function(item, index) {
	      next(item, function(error, transformedItem) {
	        if (returned) return;
	        if (error) {
	          returned = true;
	          return callback(error);
	        }
	        transformed[index] = transformedItem;
	        count += 1;
	        if (count === items.length) return callback(undefined, transformed);
	      });
	    });
	  };
	
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return each;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // RequireJS
	  } else if (typeof module !== 'undefined' && module.exports) {
	    module.exports = each; // CommonJS
	  } else {
	    globals.asyncEach = each; // <script>
	  }
	})(this);


/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var arrify = __webpack_require__(221);
	var micromatch = __webpack_require__(222);
	var path = __webpack_require__(4);
	
	var anymatch = function(criteria, value, returnIndex, startIndex, endIndex) {
	  criteria = arrify(criteria);
	  value = arrify(value);
	  if (arguments.length === 1) {
	    return anymatch.bind(null, criteria.map(function(criterion) {
	      return typeof criterion === 'string' && criterion[0] !== '!' ?
	        micromatch.matcher(criterion) : criterion;
	    }));
	  }
	  startIndex = startIndex || 0;
	  var string = value[0];
	  var altString;
	  var matched = false;
	  var matchIndex = -1;
	  function testCriteria (criterion, index) {
	    var result;
	    switch (toString.call(criterion)) {
	    case '[object String]':
	      result = string === criterion || altString && altString === criterion;
	      result = result || micromatch.isMatch(string, criterion);
	      break;
	    case '[object RegExp]':
	      result = criterion.test(string) || altString && criterion.test(altString);
	      break;
	    case '[object Function]':
	      result = criterion.apply(null, value);
	      break;
	    default:
	      result = false;
	    }
	    if (result) {
	      matchIndex = index + startIndex;
	    }
	    return result;
	  }
	  var crit = criteria;
	  var negGlobs = crit.reduce(function(arr, criterion, index) {
	    if (typeof criterion === 'string' && criterion[0] === '!') {
	      if (crit === criteria) {
	        // make a copy before modifying
	        crit = crit.slice();
	      }
	      crit[index] = null;
	      arr.push(criterion.substr(1));
	    }
	    return arr;
	  }, []);
	  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {
	    if (path.sep === '\\' && typeof string === 'string') {
	      altString = string.split('\\').join('/');
	      altString = altString === string ? null : altString;
	    }
	    matched = crit.slice(startIndex, endIndex).some(testCriteria);
	  }
	  return returnIndex === true ? matchIndex : matched;
	};
	
	module.exports = anymatch;


/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (val) {
		if (val === null || val === undefined) {
			return [];
		}
	
		return Array.isArray(val) ? val : [val];
	};


/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * micromatch <https://github.com/jonschlinkert/micromatch>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var expand = __webpack_require__(223);
	var utils = __webpack_require__(224);
	
	/**
	 * The main function. Pass an array of filepaths,
	 * and a string or array of glob patterns
	 *
	 * @param  {Array|String} `files`
	 * @param  {Array|String} `patterns`
	 * @param  {Object} `opts`
	 * @return {Array} Array of matches
	 */
	
	function micromatch(files, patterns, opts) {
	  if (!files || !patterns) return [];
	  opts = opts || {};
	
	  if (typeof opts.cache === 'undefined') {
	    opts.cache = true;
	  }
	
	  if (!Array.isArray(patterns)) {
	    return match(files, patterns, opts);
	  }
	
	  var len = patterns.length, i = 0;
	  var omit = [], keep = [];
	
	  while (len--) {
	    var glob = patterns[i++];
	    if (typeof glob === 'string' && glob.charCodeAt(0) === 33 /* ! */) {
	      omit.push.apply(omit, match(files, glob.slice(1), opts));
	    } else {
	      keep.push.apply(keep, match(files, glob, opts));
	    }
	  }
	  return utils.diff(keep, omit);
	}
	
	/**
	 * Return an array of files that match the given glob pattern.
	 *
	 * This function is called by the main `micromatch` function If you only
	 * need to pass a single pattern you might get very minor speed improvements
	 * using this function.
	 *
	 * @param  {Array} `files`
	 * @param  {String} `pattern`
	 * @param  {Object} `options`
	 * @return {Array}
	 */
	
	function match(files, pattern, opts) {
	  if (utils.typeOf(files) !== 'string' && !Array.isArray(files)) {
	    throw new Error(msg('match', 'files', 'a string or array'));
	  }
	
	  files = utils.arrayify(files);
	  opts = opts || {};
	
	  var negate = opts.negate || false;
	  var orig = pattern;
	
	  if (typeof pattern === 'string') {
	    negate = pattern.charAt(0) === '!';
	    if (negate) {
	      pattern = pattern.slice(1);
	    }
	
	    // we need to remove the character regardless,
	    // so the above logic is still needed
	    if (opts.nonegate === true) {
	      negate = false;
	    }
	  }
	
	  var _isMatch = matcher(pattern, opts);
	  var len = files.length, i = 0;
	  var res = [];
	
	  while (i < len) {
	    var file = files[i++];
	    var fp = utils.unixify(file, opts);
	
	    if (!_isMatch(fp)) { continue; }
	    res.push(fp);
	  }
	
	  if (res.length === 0) {
	    if (opts.failglob === true) {
	      throw new Error('micromatch.match() found no matches for: "' + orig + '".');
	    }
	
	    if (opts.nonull || opts.nullglob) {
	      res.push(utils.unescapeGlob(orig));
	    }
	  }
	
	  // if `negate` was defined, diff negated files
	  if (negate) { res = utils.diff(files, res); }
	
	  // if `ignore` was defined, diff ignored filed
	  if (opts.ignore && opts.ignore.length) {
	    pattern = opts.ignore;
	    opts = utils.omit(opts, ['ignore']);
	    res = utils.diff(res, micromatch(res, pattern, opts));
	  }
	
	  if (opts.nodupes) {
	    return utils.unique(res);
	  }
	  return res;
	}
	
	/**
	 * Returns a function that takes a glob pattern or array of glob patterns
	 * to be used with `Array#filter()`. (Internally this function generates
	 * the matching function using the [matcher] method).
	 *
	 * ```js
	 * var fn = mm.filter('[a-c]');
	 * ['a', 'b', 'c', 'd', 'e'].filter(fn);
	 * //=> ['a', 'b', 'c']
	 * ```
	 * @param  {String|Array} `patterns` Can be a glob or array of globs.
	 * @param  {Options} `opts` Options to pass to the [matcher] method.
	 * @return {Function} Filter function to be passed to `Array#filter()`.
	 */
	
	function filter(patterns, opts) {
	  if (!Array.isArray(patterns) && typeof patterns !== 'string') {
	    throw new TypeError(msg('filter', 'patterns', 'a string or array'));
	  }
	
	  patterns = utils.arrayify(patterns);
	  var len = patterns.length, i = 0;
	  var patternMatchers = Array(len);
	  while (i < len) {
	    patternMatchers[i] = matcher(patterns[i++], opts);
	  }
	
	  return function(fp) {
	    if (fp == null) return [];
	    var len = patternMatchers.length, i = 0;
	    var res = true;
	
	    fp = utils.unixify(fp, opts);
	    while (i < len) {
	      var fn = patternMatchers[i++];
	      if (!fn(fp)) {
	        res = false;
	        break;
	      }
	    }
	    return res;
	  };
	}
	
	/**
	 * Returns true if the filepath contains the given
	 * pattern. Can also return a function for matching.
	 *
	 * ```js
	 * isMatch('foo.md', '*.md', {});
	 * //=> true
	 *
	 * isMatch('*.md', {})('foo.md')
	 * //=> true
	 * ```
	 * @param  {String} `fp`
	 * @param  {String} `pattern`
	 * @param  {Object} `opts`
	 * @return {Boolean}
	 */
	
	function isMatch(fp, pattern, opts) {
	  if (typeof fp !== 'string') {
	    throw new TypeError(msg('isMatch', 'filepath', 'a string'));
	  }
	
	  fp = utils.unixify(fp, opts);
	  if (utils.typeOf(pattern) === 'object') {
	    return matcher(fp, pattern);
	  }
	  return matcher(pattern, opts)(fp);
	}
	
	/**
	 * Returns true if the filepath matches the
	 * given pattern.
	 */
	
	function contains(fp, pattern, opts) {
	  if (typeof fp !== 'string') {
	    throw new TypeError(msg('contains', 'pattern', 'a string'));
	  }
	
	  opts = opts || {};
	  opts.contains = (pattern !== '');
	  fp = utils.unixify(fp, opts);
	
	  if (opts.contains && !utils.isGlob(pattern)) {
	    return fp.indexOf(pattern) !== -1;
	  }
	  return matcher(pattern, opts)(fp);
	}
	
	/**
	 * Returns true if a file path matches any of the
	 * given patterns.
	 *
	 * @param  {String} `fp` The filepath to test.
	 * @param  {String|Array} `patterns` Glob patterns to use.
	 * @param  {Object} `opts` Options to pass to the `matcher()` function.
	 * @return {String}
	 */
	
	function any(fp, patterns, opts) {
	  if (!Array.isArray(patterns) && typeof patterns !== 'string') {
	    throw new TypeError(msg('any', 'patterns', 'a string or array'));
	  }
	
	  patterns = utils.arrayify(patterns);
	  var len = patterns.length;
	
	  fp = utils.unixify(fp, opts);
	  while (len--) {
	    var isMatch = matcher(patterns[len], opts);
	    if (isMatch(fp)) {
	      return true;
	    }
	  }
	  return false;
	}
	
	/**
	 * Filter the keys of an object with the given `glob` pattern
	 * and `options`
	 *
	 * @param  {Object} `object`
	 * @param  {Pattern} `object`
	 * @return {Array}
	 */
	
	function matchKeys(obj, glob, options) {
	  if (utils.typeOf(obj) !== 'object') {
	    throw new TypeError(msg('matchKeys', 'first argument', 'an object'));
	  }
	
	  var fn = matcher(glob, options);
	  var res = {};
	
	  for (var key in obj) {
	    if (obj.hasOwnProperty(key) && fn(key)) {
	      res[key] = obj[key];
	    }
	  }
	  return res;
	}
	
	/**
	 * Return a function for matching based on the
	 * given `pattern` and `options`.
	 *
	 * @param  {String} `pattern`
	 * @param  {Object} `options`
	 * @return {Function}
	 */
	
	function matcher(pattern, opts) {
	  // pattern is a function
	  if (typeof pattern === 'function') {
	    return pattern;
	  }
	  // pattern is a regex
	  if (pattern instanceof RegExp) {
	    return function(fp) {
	      return pattern.test(fp);
	    };
	  }
	
	  if (typeof pattern !== 'string') {
	    throw new TypeError(msg('matcher', 'pattern', 'a string, regex, or function'));
	  }
	
	  // strings, all the way down...
	  pattern = utils.unixify(pattern, opts);
	
	  // pattern is a non-glob string
	  if (!utils.isGlob(pattern)) {
	    return utils.matchPath(pattern, opts);
	  }
	  // pattern is a glob string
	  var re = makeRe(pattern, opts);
	
	  // `matchBase` is defined
	  if (opts && opts.matchBase) {
	    return utils.hasFilename(re, opts);
	  }
	  // `matchBase` is not defined
	  return function(fp) {
	    fp = utils.unixify(fp, opts);
	    return re.test(fp);
	  };
	}
	
	/**
	 * Create and cache a regular expression for matching
	 * file paths.
	 *
	 * If the leading character in the `glob` is `!`, a negation
	 * regex is returned.
	 *
	 * @param  {String} `glob`
	 * @param  {Object} `options`
	 * @return {RegExp}
	 */
	
	function toRegex(glob, options) {
	  // clone options to prevent  mutating the original object
	  var opts = Object.create(options || {});
	  var flags = opts.flags || '';
	  if (opts.nocase && flags.indexOf('i') === -1) {
	    flags += 'i';
	  }
	
	  var parsed = expand(glob, opts);
	
	  // pass in tokens to avoid parsing more than once
	  opts.negated = opts.negated || parsed.negated;
	  opts.negate = opts.negated;
	  glob = wrapGlob(parsed.pattern, opts);
	  var re;
	
	  try {
	    re = new RegExp(glob, flags);
	    return re;
	  } catch (err) {
	    err.reason = 'micromatch invalid regex: (' + re + ')';
	    if (opts.strict) throw new SyntaxError(err);
	  }
	
	  // we're only here if a bad pattern was used and the user
	  // passed `options.silent`, so match nothing
	  return /$^/;
	}
	
	/**
	 * Create the regex to do the matching. If the leading
	 * character in the `glob` is `!` a negation regex is returned.
	 *
	 * @param {String} `glob`
	 * @param {Boolean} `negate`
	 */
	
	function wrapGlob(glob, opts) {
	  var prefix = (opts && !opts.contains) ? '^' : '';
	  var after = (opts && !opts.contains) ? '$' : '';
	  glob = ('(?:' + glob + ')' + after);
	  if (opts && opts.negate) {
	    return prefix + ('(?!^' + glob + ').*$');
	  }
	  return prefix + glob;
	}
	
	/**
	 * Create and cache a regular expression for matching file paths.
	 * If the leading character in the `glob` is `!`, a negation
	 * regex is returned.
	 *
	 * @param  {String} `glob`
	 * @param  {Object} `options`
	 * @return {RegExp}
	 */
	
	function makeRe(glob, opts) {
	  if (utils.typeOf(glob) !== 'string') {
	    throw new Error(msg('makeRe', 'glob', 'a string'));
	  }
	  return utils.cache(toRegex, glob, opts);
	}
	
	/**
	 * Make error messages consistent. Follows this format:
	 *
	 * ```js
	 * msg(methodName, argNumber, nativeType);
	 * // example:
	 * msg('matchKeys', 'first', 'an object');
	 * ```
	 *
	 * @param  {String} `method`
	 * @param  {String} `num`
	 * @param  {String} `type`
	 * @return {String}
	 */
	
	function msg(method, what, type) {
	  return 'micromatch.' + method + '(): ' + what + ' should be ' + type + '.';
	}
	
	/**
	 * Public methods
	 */
	
	/* eslint no-multi-spaces: 0 */
	micromatch.any       = any;
	micromatch.braces    = micromatch.braceExpand = utils.braces;
	micromatch.contains  = contains;
	micromatch.expand    = expand;
	micromatch.filter    = filter;
	micromatch.isMatch   = isMatch;
	micromatch.makeRe    = makeRe;
	micromatch.match     = match;
	micromatch.matcher   = matcher;
	micromatch.matchKeys = matchKeys;
	
	/**
	 * Expose `micromatch`
	 */
	
	module.exports = micromatch;


/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * micromatch <https://github.com/jonschlinkert/micromatch>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var utils = __webpack_require__(224);
	var Glob = __webpack_require__(258);
	
	/**
	 * Expose `expand`
	 */
	
	module.exports = expand;
	
	/**
	 * Expand a glob pattern to resolve braces and
	 * similar patterns before converting to regex.
	 *
	 * @param  {String|Array} `pattern`
	 * @param  {Array} `files`
	 * @param  {Options} `opts`
	 * @return {Array}
	 */
	
	function expand(pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('micromatch.expand(): argument should be a string.');
	  }
	
	  var glob = new Glob(pattern, options || {});
	  var opts = glob.options;
	
	  if (!utils.isGlob(pattern)) {
	    glob.pattern = glob.pattern.replace(/([\/.])/g, '\\$1');
	    return glob;
	  }
	
	  glob.pattern = glob.pattern.replace(/(\+)(?!\()/g, '\\$1');
	  glob.pattern = glob.pattern.split('$').join('\\$');
	
	  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {
	    opts.braces = true;
	  }
	
	  if (glob.pattern === '.*') {
	    return {
	      pattern: '\\.' + star,
	      tokens: tok,
	      options: opts
	    };
	  }
	
	  if (glob.pattern === '*') {
	    return {
	      pattern: oneStar(opts.dot),
	      tokens: tok,
	      options: opts
	    };
	  }
	
	  // parse the glob pattern into tokens
	  glob.parse();
	  var tok = glob.tokens;
	  tok.is.negated = opts.negated;
	
	  // dotfile handling
	  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {
	    opts.dotfiles = true;
	    opts.dot = true;
	  }
	
	  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {
	    opts.dotdirs = true;
	    opts.dot = true;
	  }
	
	  // check for braces with a dotfile pattern
	  if (/[{,]\./.test(glob.pattern)) {
	    opts.makeRe = false;
	    opts.dot = true;
	  }
	
	  if (opts.nonegate !== true) {
	    opts.negated = glob.negated;
	  }
	
	  // if the leading character is a dot or a slash, escape it
	  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {
	    glob.pattern = '\\' + glob.pattern;
	  }
	
	  /**
	   * Extended globs
	   */
	
	  // expand braces, e.g `{1..5}`
	  glob.track('before braces');
	  if (tok.is.braces) {
	    glob.braces();
	  }
	  glob.track('after braces');
	
	  // expand extglobs, e.g `foo/!(a|b)`
	  glob.track('before extglob');
	  if (tok.is.extglob) {
	    glob.extglob();
	  }
	  glob.track('after extglob');
	
	  // expand brackets, e.g `[[:alpha:]]`
	  glob.track('before brackets');
	  if (tok.is.brackets) {
	    glob.brackets();
	  }
	  glob.track('after brackets');
	
	  // special patterns
	  glob._replace('[!', '[^');
	  glob._replace('(?', '(%~');
	  glob._replace(/\[\]/, '\\[\\]');
	  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);
	  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);
	  glob._replace('/.', '/(?=.)\\.', true);
	
	  // windows drives
	  glob._replace(/^(\w):([\\\/]+?)/gi, '(?=.)$1:$2', true);
	
	  // negate slashes in exclusion ranges
	  if (glob.pattern.indexOf('[^') !== -1) {
	    glob.pattern = negateSlash(glob.pattern);
	  }
	
	  if (opts.globstar !== false && glob.pattern === '**') {
	    glob.pattern = globstar(opts.dot);
	
	  } else {
	    glob.pattern = balance(glob.pattern, '[', ']');
	    glob.escape(glob.pattern);
	
	    // if the pattern has `**`
	    if (tok.is.globstar) {
	      glob.pattern = collapse(glob.pattern, '/**');
	      glob.pattern = collapse(glob.pattern, '**/');
	      glob._replace('/**/', '(?:/' + globstar(opts.dot) + '/|/)', true);
	      glob._replace(/\*{2,}/g, '**');
	
	      // 'foo/*'
	      glob._replace(/(\w+)\*(?!\/)/g, '$1[^/]*?', true);
	      glob._replace(/\*\*\/\*(\w)/g, globstar(opts.dot) + '\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);
	
	      if (opts.dot !== true) {
	        glob._replace(/\*\*\/(.)/g, '(?:**\\/|)$1');
	      }
	
	      // 'foo/**' or '{**,*}', but not 'foo**'
	      if (tok.path.dirname !== '' || /,\*\*|\*\*,/.test(glob.orig)) {
	        glob._replace('**', globstar(opts.dot), true);
	      }
	    }
	
	    // ends with /*
	    glob._replace(/\/\*$/, '\\/' + oneStar(opts.dot), true);
	    // ends with *, no slashes
	    glob._replace(/(?!\/)\*$/, star, true);
	    // has 'n*.' (partial wildcard w/ file extension)
	    glob._replace(/([^\/]+)\*/, '$1' + oneStar(true), true);
	    // has '*'
	    glob._replace('*', oneStar(opts.dot), true);
	    glob._replace('?.', '?\\.', true);
	    glob._replace('?:', '?:', true);
	
	    glob._replace(/\?+/g, function(match) {
	      var len = match.length;
	      if (len === 1) {
	        return qmark;
	      }
	      return qmark + '{' + len + '}';
	    });
	
	    // escape '.abc' => '\\.abc'
	    glob._replace(/\.([*\w]+)/g, '\\.$1');
	    // fix '[^\\\\/]'
	    glob._replace(/\[\^[\\\/]+\]/g, qmark);
	    // '///' => '\/'
	    glob._replace(/\/+/g, '\\/');
	    // '\\\\\\' => '\\'
	    glob._replace(/\\{2,}/g, '\\');
	  }
	
	  // unescape previously escaped patterns
	  glob.unescape(glob.pattern);
	  glob._replace('__UNESC_STAR__', '*');
	
	  // escape dots that follow qmarks
	  glob._replace('?.', '?\\.');
	
	  // remove unnecessary slashes in character classes
	  glob._replace('[^\\/]', qmark);
	
	  if (glob.pattern.length > 1) {
	    if (/^[\[?*]/.test(glob.pattern)) {
	      // only prepend the string if we don't want to match dotfiles
	      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;
	    }
	  }
	
	  return glob;
	}
	
	/**
	 * Collapse repeated character sequences.
	 *
	 * ```js
	 * collapse('a/../../../b', '../');
	 * //=> 'a/../b'
	 * ```
	 *
	 * @param  {String} `str`
	 * @param  {String} `ch` Character sequence to collapse
	 * @return {String}
	 */
	
	function collapse(str, ch) {
	  var res = str.split(ch);
	  var isFirst = res[0] === '';
	  var isLast = res[res.length - 1] === '';
	  res = res.filter(Boolean);
	  if (isFirst) res.unshift('');
	  if (isLast) res.push('');
	  return res.join(ch);
	}
	
	/**
	 * Negate slashes in exclusion ranges, per glob spec:
	 *
	 * ```js
	 * negateSlash('[^foo]');
	 * //=> '[^\\/foo]'
	 * ```
	 *
	 * @param  {String} `str` glob pattern
	 * @return {String}
	 */
	
	function negateSlash(str) {
	  return str.replace(/\[\^([^\]]*?)\]/g, function(match, inner) {
	    if (inner.indexOf('/') === -1) {
	      inner = '\\/' + inner;
	    }
	    return '[^' + inner + ']';
	  });
	}
	
	/**
	 * Escape imbalanced braces/bracket. This is a very
	 * basic, naive implementation that only does enough
	 * to serve the purpose.
	 */
	
	function balance(str, a, b) {
	  var aarr = str.split(a);
	  var alen = aarr.join('').length;
	  var blen = str.split(b).join('').length;
	
	  if (alen !== blen) {
	    str = aarr.join('\\' + a);
	    return str.split(b).join('\\' + b);
	  }
	  return str;
	}
	
	/**
	 * Special patterns to be converted to regex.
	 * Heuristics are used to simplify patterns
	 * and speed up processing.
	 */
	
	/* eslint no-multi-spaces: 0 */
	var qmark       = '[^/]';
	var star        = qmark + '*?';
	var nodot       = '(?!\\.)(?=.)';
	var dotfileGlob = '(?:\\/|^)\\.{1,2}($|\\/)';
	var dotfiles    = '(?!' + dotfileGlob + ')(?=.)';
	var twoStarDot  = '(?:(?!' + dotfileGlob + ').)*?';
	
	/**
	 * Create a regex for `*`.
	 *
	 * If `dot` is true, or the pattern does not begin with
	 * a leading star, then return the simpler regex.
	 */
	
	function oneStar(dotfile) {
	  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : (nodot + star);
	}
	
	function globstar(dotfile) {
	  if (dotfile) { return twoStarDot; }
	  return '(?:(?!(?:\\/|^)\\.).)*?';
	}


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var win32 = process && process.platform === 'win32';
	var path = __webpack_require__(4);
	var fileRe = __webpack_require__(225);
	var utils = module.exports;
	
	/**
	 * Module dependencies
	 */
	
	utils.diff = __webpack_require__(226);
	utils.unique = __webpack_require__(228);
	utils.braces = __webpack_require__(229);
	utils.brackets = __webpack_require__(241);
	utils.extglob = __webpack_require__(243);
	utils.isExtglob = __webpack_require__(244);
	utils.isGlob = __webpack_require__(245);
	utils.typeOf = __webpack_require__(235);
	utils.normalize = __webpack_require__(246);
	utils.omit = __webpack_require__(247);
	utils.parseGlob = __webpack_require__(251);
	utils.cache = __webpack_require__(255);
	
	/**
	 * Get the filename of a filepath
	 *
	 * @param {String} `string`
	 * @return {String}
	 */
	
	utils.filename = function filename(fp) {
	  var seg = fp.match(fileRe());
	  return seg && seg[0];
	};
	
	/**
	 * Returns a function that returns true if the given
	 * pattern is the same as a given `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */
	
	utils.isPath = function isPath(pattern, opts) {
	  opts = opts || {};
	  return function(fp) {
	    var unixified = utils.unixify(fp, opts);
	    if(opts.nocase){
	      return pattern.toLowerCase() === unixified.toLowerCase();
	    }
	    return pattern === unixified;
	  };
	};
	
	/**
	 * Returns a function that returns true if the given
	 * pattern contains a `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */
	
	utils.hasPath = function hasPath(pattern, opts) {
	  return function(fp) {
	    return utils.unixify(pattern, opts).indexOf(fp) !== -1;
	  };
	};
	
	/**
	 * Returns a function that returns true if the given
	 * pattern matches or contains a `filepath`
	 *
	 * @param {String} `pattern`
	 * @return {Function}
	 */
	
	utils.matchPath = function matchPath(pattern, opts) {
	  var fn = (opts && opts.contains)
	    ? utils.hasPath(pattern, opts)
	    : utils.isPath(pattern, opts);
	  return fn;
	};
	
	/**
	 * Returns a function that returns true if the given
	 * regex matches the `filename` of a file path.
	 *
	 * @param {RegExp} `re`
	 * @return {Boolean}
	 */
	
	utils.hasFilename = function hasFilename(re) {
	  return function(fp) {
	    var name = utils.filename(fp);
	    return name && re.test(name);
	  };
	};
	
	/**
	 * Coerce `val` to an array
	 *
	 * @param  {*} val
	 * @return {Array}
	 */
	
	utils.arrayify = function arrayify(val) {
	  return !Array.isArray(val)
	    ? [val]
	    : val;
	};
	
	/**
	 * Normalize all slashes in a file path or glob pattern to
	 * forward slashes.
	 */
	
	utils.unixify = function unixify(fp, opts) {
	  if (opts && opts.unixify === false) return fp;
	  if (opts && opts.unixify === true || win32 || path.sep === '\\') {
	    return utils.normalize(fp, false);
	  }
	  if (opts && opts.unescape === true) {
	    return fp ? fp.toString().replace(/\\(\w)/g, '$1') : '';
	  }
	  return fp;
	};
	
	/**
	 * Escape/unescape utils
	 */
	
	utils.escapePath = function escapePath(fp) {
	  return fp.replace(/[\\.]/g, '\\$&');
	};
	
	utils.unescapeGlob = function unescapeGlob(fp) {
	  return fp.replace(/[\\"']/g, '');
	};
	
	utils.escapeRe = function escapeRe(str) {
	  return str.replace(/[-[\\$*+?.#^\s{}(|)\]]/g, '\\$&');
	};
	
	/**
	 * Expose `utils`
	 */
	
	module.exports = utils;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 225 */
/***/ function(module, exports) {

	/*!
	 * filename-regex <https://github.com/regexps/filename-regex>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert
	 * Licensed under the MIT license.
	 */
	
	module.exports = function filenameRegex() {
	  return /([^\\\/]+)$/;
	};


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * arr-diff <https://github.com/jonschlinkert/arr-diff>
	 *
	 * Copyright (c) 2014 Jon Schlinkert, contributors.
	 * Licensed under the MIT License
	 */
	
	'use strict';
	
	var flatten = __webpack_require__(227);
	var slice = [].slice;
	
	/**
	 * Return the difference between the first array and
	 * additional arrays.
	 *
	 * ```js
	 * var diff = require('{%= name %}');
	 *
	 * var a = ['a', 'b', 'c', 'd'];
	 * var b = ['b', 'c'];
	 *
	 * console.log(diff(a, b))
	 * //=> ['a', 'd']
	 * ```
	 *
	 * @param  {Array} `a`
	 * @param  {Array} `b`
	 * @return {Array}
	 * @api public
	 */
	
	function diff(arr, arrays) {
	  var argsLen = arguments.length;
	  var len = arr.length, i = -1;
	  var res = [], arrays;
	
	  if (argsLen === 1) {
	    return arr;
	  }
	
	  if (argsLen > 2) {
	    arrays = flatten(slice.call(arguments, 1));
	  }
	
	  while (++i < len) {
	    if (!~arrays.indexOf(arr[i])) {
	      res.push(arr[i]);
	    }
	  }
	  return res;
	}
	
	/**
	 * Expose `diff`
	 */
	
	module.exports = diff;


/***/ },
/* 227 */
/***/ function(module, exports) {

	/*!
	 * arr-flatten <https://github.com/jonschlinkert/arr-flatten>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function flatten(arr) {
	  return flat(arr, []);
	};
	
	function flat(arr, res) {
	  var len = arr.length;
	  var i = -1;
	
	  while (len--) {
	    var cur = arr[++i];
	    if (Array.isArray(cur)) {
	      flat(cur, res);
	    } else {
	      res.push(cur);
	    }
	  }
	  return res;
	}

/***/ },
/* 228 */
/***/ function(module, exports) {

	/*!
	 * array-unique <https://github.com/jonschlinkert/array-unique>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function unique(arr) {
	  if (!Array.isArray(arr)) {
	    throw new TypeError('array-unique expects an array.');
	  }
	
	  var len = arr.length;
	  var i = -1;
	
	  while (i++ < len) {
	    var j = i + 1;
	
	    for (; j < arr.length; ++j) {
	      if (arr[i] === arr[j]) {
	        arr.splice(j--, 1);
	      }
	    }
	  }
	  return arr;
	};


/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * braces <https://github.com/jonschlinkert/braces>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	/**
	 * Module dependencies
	 */
	
	var expand = __webpack_require__(230);
	var repeat = __webpack_require__(239);
	var tokens = __webpack_require__(240);
	
	/**
	 * Expose `braces`
	 */
	
	module.exports = function(str, options) {
	  if (typeof str !== 'string') {
	    throw new Error('braces expects a string');
	  }
	  return braces(str, options);
	};
	
	/**
	 * Expand `{foo,bar}` or `{1..5}` braces in the
	 * given `string`.
	 *
	 * @param  {String} `str`
	 * @param  {Array} `arr`
	 * @param  {Object} `options`
	 * @return {Array}
	 */
	
	function braces(str, arr, options) {
	  if (str === '') {
	    return [];
	  }
	
	  if (!Array.isArray(arr)) {
	    options = arr;
	    arr = [];
	  }
	
	  var opts = options || {};
	  arr = arr || [];
	
	  if (typeof opts.nodupes === 'undefined') {
	    opts.nodupes = true;
	  }
	
	  var fn = opts.fn;
	  var es6;
	
	  if (typeof opts === 'function') {
	    fn = opts;
	    opts = {};
	  }
	
	  if (!(patternRe instanceof RegExp)) {
	    patternRe = patternRegex();
	  }
	
	  var matches = str.match(patternRe) || [];
	  var m = matches[0];
	
	  switch(m) {
	    case '\\,':
	      return escapeCommas(str, arr, opts);
	    case '\\.':
	      return escapeDots(str, arr, opts);
	    case '\/.':
	      return escapePaths(str, arr, opts);
	    case ' ':
	      return splitWhitespace(str);
	    case '{,}':
	      return exponential(str, opts, braces);
	    case '{}':
	      return emptyBraces(str, arr, opts);
	    case '\\{':
	    case '\\}':
	      return escapeBraces(str, arr, opts);
	    case '${':
	      if (!/\{[^{]+\{/.test(str)) {
	        return arr.concat(str);
	      } else {
	        es6 = true;
	        str = tokens.before(str, es6Regex());
	      }
	  }
	
	  if (!(braceRe instanceof RegExp)) {
	    braceRe = braceRegex();
	  }
	
	  var match = braceRe.exec(str);
	  if (match == null) {
	    return [str];
	  }
	
	  var outter = match[1];
	  var inner = match[2];
	  if (inner === '') { return [str]; }
	
	  var segs, segsLength;
	
	  if (inner.indexOf('..') !== -1) {
	    segs = expand(inner, opts, fn) || inner.split(',');
	    segsLength = segs.length;
	
	  } else if (inner[0] === '"' || inner[0] === '\'') {
	    return arr.concat(str.split(/['"]/).join(''));
	
	  } else {
	    segs = inner.split(',');
	    if (opts.makeRe) {
	      return braces(str.replace(outter, wrap(segs, '|')), opts);
	    }
	
	    segsLength = segs.length;
	    if (segsLength === 1 && opts.bash) {
	      segs[0] = wrap(segs[0], '\\');
	    }
	  }
	
	  var len = segs.length;
	  var i = 0, val;
	
	  while (len--) {
	    var path = segs[i++];
	
	    if (/(\.[^.\/])/.test(path)) {
	      if (segsLength > 1) {
	        return segs;
	      } else {
	        return [str];
	      }
	    }
	
	    val = splice(str, outter, path);
	
	    if (/\{[^{}]+?\}/.test(val)) {
	      arr = braces(val, arr, opts);
	    } else if (val !== '') {
	      if (opts.nodupes && arr.indexOf(val) !== -1) { continue; }
	      arr.push(es6 ? tokens.after(val) : val);
	    }
	  }
	
	  if (opts.strict) { return filter(arr, filterEmpty); }
	  return arr;
	}
	
	/**
	 * Expand exponential ranges
	 *
	 *   `a{,}{,}` => ['a', 'a', 'a', 'a']
	 */
	
	function exponential(str, options, fn) {
	  if (typeof options === 'function') {
	    fn = options;
	    options = null;
	  }
	
	  var opts = options || {};
	  var esc = '__ESC_EXP__';
	  var exp = 0;
	  var res;
	
	  var parts = str.split('{,}');
	  if (opts.nodupes) {
	    return fn(parts.join(''), opts);
	  }
	
	  exp = parts.length - 1;
	  res = fn(parts.join(esc), opts);
	  var len = res.length;
	  var arr = [];
	  var i = 0;
	
	  while (len--) {
	    var ele = res[i++];
	    var idx = ele.indexOf(esc);
	
	    if (idx === -1) {
	      arr.push(ele);
	
	    } else {
	      ele = ele.split('__ESC_EXP__').join('');
	      if (!!ele && opts.nodupes !== false) {
	        arr.push(ele);
	
	      } else {
	        var num = Math.pow(2, exp);
	        arr.push.apply(arr, repeat(ele, num));
	      }
	    }
	  }
	  return arr;
	}
	
	/**
	 * Wrap a value with parens, brackets or braces,
	 * based on the given character/separator.
	 *
	 * @param  {String|Array} `val`
	 * @param  {String} `ch`
	 * @return {String}
	 */
	
	function wrap(val, ch) {
	  if (ch === '|') {
	    return '(' + val.join(ch) + ')';
	  }
	  if (ch === ',') {
	    return '{' + val.join(ch) + '}';
	  }
	  if (ch === '-') {
	    return '[' + val.join(ch) + ']';
	  }
	  if (ch === '\\') {
	    return '\\{' + val + '\\}';
	  }
	}
	
	/**
	 * Handle empty braces: `{}`
	 */
	
	function emptyBraces(str, arr, opts) {
	  return braces(str.split('{}').join('\\{\\}'), arr, opts);
	}
	
	/**
	 * Filter out empty-ish values
	 */
	
	function filterEmpty(ele) {
	  return !!ele && ele !== '\\';
	}
	
	/**
	 * Handle patterns with whitespace
	 */
	
	function splitWhitespace(str) {
	  var segs = str.split(' ');
	  var len = segs.length;
	  var res = [];
	  var i = 0;
	
	  while (len--) {
	    res.push.apply(res, braces(segs[i++]));
	  }
	  return res;
	}
	
	/**
	 * Handle escaped braces: `\\{foo,bar}`
	 */
	
	function escapeBraces(str, arr, opts) {
	  if (!/\{[^{]+\{/.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\{').join('__LT_BRACE__');
	    str = str.split('\\}').join('__RT_BRACE__');
	    return map(braces(str, arr, opts), function(ele) {
	      ele = ele.split('__LT_BRACE__').join('{');
	      return ele.split('__RT_BRACE__').join('}');
	    });
	  }
	}
	
	/**
	 * Handle escaped dots: `{1\\.2}`
	 */
	
	function escapeDots(str, arr, opts) {
	  if (!/[^\\]\..+\\\./.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\.').join('__ESC_DOT__');
	    return map(braces(str, arr, opts), function(ele) {
	      return ele.split('__ESC_DOT__').join('.');
	    });
	  }
	}
	
	/**
	 * Handle escaped dots: `{1\\.2}`
	 */
	
	function escapePaths(str, arr, opts) {
	  str = str.split('\/.').join('__ESC_PATH__');
	  return map(braces(str, arr, opts), function(ele) {
	    return ele.split('__ESC_PATH__').join('\/.');
	  });
	}
	
	/**
	 * Handle escaped commas: `{a\\,b}`
	 */
	
	function escapeCommas(str, arr, opts) {
	  if (!/\w,/.test(str)) {
	    return arr.concat(str.split('\\').join(''));
	  } else {
	    str = str.split('\\,').join('__ESC_COMMA__');
	    return map(braces(str, arr, opts), function(ele) {
	      return ele.split('__ESC_COMMA__').join(',');
	    });
	  }
	}
	
	/**
	 * Regex for common patterns
	 */
	
	function patternRegex() {
	  return /\${|( (?=[{,}])|(?=[{,}]) )|{}|{,}|\\,(?=.*[{}])|\/\.(?=.*[{}])|\\\.(?={)|\\{|\\}/;
	}
	
	/**
	 * Braces regex.
	 */
	
	function braceRegex() {
	  return /.*(\\?\{([^}]+)\})/;
	}
	
	/**
	 * es6 delimiter regex.
	 */
	
	function es6Regex() {
	  return /\$\{([^}]+)\}/;
	}
	
	var braceRe;
	var patternRe;
	
	/**
	 * Faster alternative to `String.replace()` when the
	 * index of the token to be replaces can't be supplied
	 */
	
	function splice(str, token, replacement) {
	  var i = str.indexOf(token);
	  return str.substr(0, i) + replacement
	    + str.substr(i + token.length);
	}
	
	/**
	 * Fast array map
	 */
	
	function map(arr, fn) {
	  if (arr == null) {
	    return [];
	  }
	
	  var len = arr.length;
	  var res = new Array(len);
	  var i = -1;
	
	  while (++i < len) {
	    res[i] = fn(arr[i], i, arr);
	  }
	
	  return res;
	}
	
	/**
	 * Fast array filter
	 */
	
	function filter(arr, cb) {
	  if (arr == null) return [];
	  if (typeof cb !== 'function') {
	    throw new TypeError('braces: filter expects a callback function.');
	  }
	
	  var len = arr.length;
	  var res = arr.slice();
	  var i = 0;
	
	  while (len--) {
	    if (!cb(arr[len], i++)) {
	      res.splice(len, 1);
	    }
	  }
	  return res;
	}


/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * expand-range <https://github.com/jonschlinkert/expand-range>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	var fill = __webpack_require__(231);
	
	module.exports = function expandRange(str, options, fn) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expand-range expects a string.');
	  }
	
	  if (typeof options === 'function') {
	    fn = options;
	    options = {};
	  }
	
	  if (typeof options === 'boolean') {
	    options = {};
	    options.makeRe = true;
	  }
	
	  // create arguments to pass to fill-range
	  var opts = options || {};
	  var args = str.split('..');
	  var len = args.length;
	  if (len > 3) { return str; }
	
	  // if only one argument, it can't expand so return it
	  if (len === 1) { return args; }
	
	  // if `true`, tell fill-range to regexify the string
	  if (typeof fn === 'boolean' && fn === true) {
	    opts.makeRe = true;
	  }
	
	  args.push(opts);
	  return fill.apply(null, args.concat(fn));
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * fill-range <https://github.com/jonschlinkert/fill-range>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(232);
	var isNumber = __webpack_require__(234);
	var randomize = __webpack_require__(237);
	var repeatStr = __webpack_require__(238);
	var repeat = __webpack_require__(239);
	
	/**
	 * Expose `fillRange`
	 */
	
	module.exports = fillRange;
	
	/**
	 * Return a range of numbers or letters.
	 *
	 * @param  {String} `a` Start of the range
	 * @param  {String} `b` End of the range
	 * @param  {String} `step` Increment or decrement to use.
	 * @param  {Function} `fn` Custom function to modify each element in the range.
	 * @return {Array}
	 */
	
	function fillRange(a, b, step, options, fn) {
	  if (a == null || b == null) {
	    throw new Error('fill-range expects the first and second args to be strings.');
	  }
	
	  if (typeof step === 'function') {
	    fn = step; options = {}; step = null;
	  }
	
	  if (typeof options === 'function') {
	    fn = options; options = {};
	  }
	
	  if (isObject(step)) {
	    options = step; step = '';
	  }
	
	  var expand, regex = false, sep = '';
	  var opts = options || {};
	
	  if (typeof opts.silent === 'undefined') {
	    opts.silent = true;
	  }
	
	  step = step || opts.step;
	
	  // store a ref to unmodified arg
	  var origA = a, origB = b;
	
	  b = (b.toString() === '-0') ? 0 : b;
	
	  if (opts.optimize || opts.makeRe) {
	    step = step ? (step += '~') : step;
	    expand = true;
	    regex = true;
	    sep = '~';
	  }
	
	  // handle special step characters
	  if (typeof step === 'string') {
	    var match = stepRe().exec(step);
	
	    if (match) {
	      var i = match.index;
	      var m = match[0];
	
	      // repeat string
	      if (m === '+') {
	        return repeat(a, b);
	
	      // randomize a, `b` times
	      } else if (m === '?') {
	        return [randomize(a, b)];
	
	      // expand right, no regex reduction
	      } else if (m === '>') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;
	
	      // expand to an array, or if valid create a reduced
	      // string for a regex logic `or`
	      } else if (m === '|') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;
	        regex = true;
	        sep = m;
	
	      // expand to an array, or if valid create a reduced
	      // string for a regex range
	      } else if (m === '~') {
	        step = step.substr(0, i) + step.substr(i + 1);
	        expand = true;
	        regex = true;
	        sep = m;
	      }
	    } else if (!isNumber(step)) {
	      if (!opts.silent) {
	        throw new TypeError('fill-range: invalid step.');
	      }
	      return null;
	    }
	  }
	
	  if (/[.&*()[\]^%$#@!]/.test(a) || /[.&*()[\]^%$#@!]/.test(b)) {
	    if (!opts.silent) {
	      throw new RangeError('fill-range: invalid range arguments.');
	    }
	    return null;
	  }
	
	  // has neither a letter nor number, or has both letters and numbers
	  // this needs to be after the step logic
	  if (!noAlphaNum(a) || !noAlphaNum(b) || hasBoth(a) || hasBoth(b)) {
	    if (!opts.silent) {
	      throw new RangeError('fill-range: invalid range arguments.');
	    }
	    return null;
	  }
	
	  // validate arguments
	  var isNumA = isNumber(zeros(a));
	  var isNumB = isNumber(zeros(b));
	
	  if ((!isNumA && isNumB) || (isNumA && !isNumB)) {
	    if (!opts.silent) {
	      throw new TypeError('fill-range: first range argument is incompatible with second.');
	    }
	    return null;
	  }
	
	  // by this point both are the same, so we
	  // can use A to check going forward.
	  var isNum = isNumA;
	  var num = formatStep(step);
	
	  // is the range alphabetical? or numeric?
	  if (isNum) {
	    // if numeric, coerce to an integer
	    a = +a; b = +b;
	  } else {
	    // otherwise, get the charCode to expand alpha ranges
	    a = a.charCodeAt(0);
	    b = b.charCodeAt(0);
	  }
	
	  // is the pattern descending?
	  var isDescending = a > b;
	
	  // don't create a character class if the args are < 0
	  if (a < 0 || b < 0) {
	    expand = false;
	    regex = false;
	  }
	
	  // detect padding
	  var padding = isPadded(origA, origB);
	  var res, pad, arr = [];
	  var ii = 0;
	
	  // character classes, ranges and logical `or`
	  if (regex) {
	    if (shouldExpand(a, b, num, isNum, padding, opts)) {
	      // make sure the correct separator is used
	      if (sep === '|' || sep === '~') {
	        sep = detectSeparator(a, b, num, isNum, isDescending);
	      }
	      return wrap([origA, origB], sep, opts);
	    }
	  }
	
	  while (isDescending ? (a >= b) : (a <= b)) {
	    if (padding && isNum) {
	      pad = padding(a);
	    }
	
	    // custom function
	    if (typeof fn === 'function') {
	      res = fn(a, isNum, pad, ii++);
	
	    // letters
	    } else if (!isNum) {
	      if (regex && isInvalidChar(a)) {
	        res = null;
	      } else {
	        res = String.fromCharCode(a);
	      }
	
	    // numbers
	    } else {
	      res = formatPadding(a, pad);
	    }
	
	    // add result to the array, filtering any nulled values
	    if (res !== null) arr.push(res);
	
	    // increment or decrement
	    if (isDescending) {
	      a -= num;
	    } else {
	      a += num;
	    }
	  }
	
	  // now that the array is expanded, we need to handle regex
	  // character classes, ranges or logical `or` that wasn't
	  // already handled before the loop
	  if ((regex || expand) && !opts.noexpand) {
	    // make sure the correct separator is used
	    if (sep === '|' || sep === '~') {
	      sep = detectSeparator(a, b, num, isNum, isDescending);
	    }
	    if (arr.length === 1 || a < 0 || b < 0) { return arr; }
	    return wrap(arr, sep, opts);
	  }
	
	  return arr;
	}
	
	/**
	 * Wrap the string with the correct regex
	 * syntax.
	 */
	
	function wrap(arr, sep, opts) {
	  if (sep === '~') { sep = '-'; }
	  var str = arr.join(sep);
	  var pre = opts && opts.regexPrefix;
	
	  // regex logical `or`
	  if (sep === '|') {
	    str = pre ? pre + str : str;
	    str = '(' + str + ')';
	  }
	
	  // regex character class
	  if (sep === '-') {
	    str = (pre && pre === '^')
	      ? pre + str
	      : str;
	    str = '[' + str + ']';
	  }
	  return [str];
	}
	
	/**
	 * Check for invalid characters
	 */
	
	function isCharClass(a, b, step, isNum, isDescending) {
	  if (isDescending) { return false; }
	  if (isNum) { return a <= 9 && b <= 9; }
	  if (a < b) { return step === 1; }
	  return false;
	}
	
	/**
	 * Detect the correct separator to use
	 */
	
	function shouldExpand(a, b, num, isNum, padding, opts) {
	  if (isNum && (a > 9 || b > 9)) { return false; }
	  return !padding && num === 1 && a < b;
	}
	
	/**
	 * Detect the correct separator to use
	 */
	
	function detectSeparator(a, b, step, isNum, isDescending) {
	  var isChar = isCharClass(a, b, step, isNum, isDescending);
	  if (!isChar) {
	    return '|';
	  }
	  return '~';
	}
	
	/**
	 * Correctly format the step based on type
	 */
	
	function formatStep(step) {
	  return Math.abs(step >> 0) || 1;
	}
	
	/**
	 * Format padding, taking leading `-` into account
	 */
	
	function formatPadding(ch, pad) {
	  var res = pad ? pad + ch : ch;
	  if (pad && ch.toString().charAt(0) === '-') {
	    res = '-' + pad + ch.toString().substr(1);
	  }
	  return res.toString();
	}
	
	/**
	 * Check for invalid characters
	 */
	
	function isInvalidChar(str) {
	  var ch = toStr(str);
	  return ch === '\\'
	    || ch === '['
	    || ch === ']'
	    || ch === '^'
	    || ch === '('
	    || ch === ')'
	    || ch === '`';
	}
	
	/**
	 * Convert to a string from a charCode
	 */
	
	function toStr(ch) {
	  return String.fromCharCode(ch);
	}
	
	
	/**
	 * Step regex
	 */
	
	function stepRe() {
	  return /\?|>|\||\+|\~/g;
	}
	
	/**
	 * Return true if `val` has either a letter
	 * or a number
	 */
	
	function noAlphaNum(val) {
	  return /[a-z0-9]/i.test(val);
	}
	
	/**
	 * Return true if `val` has both a letter and
	 * a number (invalid)
	 */
	
	function hasBoth(val) {
	  return /[a-z][0-9]|[0-9][a-z]/i.test(val);
	}
	
	/**
	 * Normalize zeros for checks
	 */
	
	function zeros(val) {
	  if (/^-*0+$/.test(val.toString())) {
	    return '0';
	  }
	  return val;
	}
	
	/**
	 * Return true if `val` has leading zeros,
	 * or a similar valid pattern.
	 */
	
	function hasZeros(val) {
	  return /[^.]\.|^-*0+[0-9]/.test(val);
	}
	
	/**
	 * If the string is padded, returns a curried function with
	 * the a cached padding string, or `false` if no padding.
	 *
	 * @param  {*} `origA` String or number.
	 * @return {String|Boolean}
	 */
	
	function isPadded(origA, origB) {
	  if (hasZeros(origA) || hasZeros(origB)) {
	    var alen = length(origA);
	    var blen = length(origB);
	
	    var len = alen >= blen
	      ? alen
	      : blen;
	
	    return function (a) {
	      return repeatStr('0', len - length(a));
	    };
	  }
	  return false;
	}
	
	/**
	 * Get the string length of `val`
	 */
	
	function length(val) {
	  return val.toString().length;
	}


/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * isobject <https://github.com/jonschlinkert/isobject>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isArray = __webpack_require__(233);
	
	module.exports = function isObject(val) {
	  return val != null && typeof val === 'object' && isArray(val) === false;
	};


/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(146);

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-number <https://github.com/jonschlinkert/is-number>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var typeOf = __webpack_require__(235);
	
	module.exports = function isNumber(num) {
	  var type = typeOf(num);
	  if (type !== 'number' && type !== 'string') {
	    return false;
	  }
	  var n = +num;
	  return (n - n + 1) >= 0 && num !== '';
	};


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var isBuffer = __webpack_require__(236);
	var toString = Object.prototype.toString;
	
	/**
	 * Get the native `typeof` a value.
	 *
	 * @param  {*} `val`
	 * @return {*} Native javascript type
	 */
	
	module.exports = function kindOf(val) {
	  // primitivies
	  if (typeof val === 'undefined') {
	    return 'undefined';
	  }
	  if (val === null) {
	    return 'null';
	  }
	  if (val === true || val === false || val instanceof Boolean) {
	    return 'boolean';
	  }
	  if (typeof val === 'string' || val instanceof String) {
	    return 'string';
	  }
	  if (typeof val === 'number' || val instanceof Number) {
	    return 'number';
	  }
	
	  // functions
	  if (typeof val === 'function' || val instanceof Function) {
	    return 'function';
	  }
	
	  // array
	  if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
	    return 'array';
	  }
	
	  // check for instances of RegExp and Date before calling `toString`
	  if (val instanceof RegExp) {
	    return 'regexp';
	  }
	  if (val instanceof Date) {
	    return 'date';
	  }
	
	  // other objects
	  var type = toString.call(val);
	
	  if (type === '[object RegExp]') {
	    return 'regexp';
	  }
	  if (type === '[object Date]') {
	    return 'date';
	  }
	  if (type === '[object Arguments]') {
	    return 'arguments';
	  }
	  if (type === '[object Error]') {
	    return 'error';
	  }
	
	  // buffer
	  if (typeof Buffer !== 'undefined' && isBuffer(val)) {
	    return 'buffer';
	  }
	
	  // es6: Map, WeakMap, Set, WeakSet
	  if (type === '[object Set]') {
	    return 'set';
	  }
	  if (type === '[object WeakSet]') {
	    return 'weakset';
	  }
	  if (type === '[object Map]') {
	    return 'map';
	  }
	  if (type === '[object WeakMap]') {
	    return 'weakmap';
	  }
	  if (type === '[object Symbol]') {
	    return 'symbol';
	  }
	
	  // typed arrays
	  if (type === '[object Int8Array]') {
	    return 'int8array';
	  }
	  if (type === '[object Uint8Array]') {
	    return 'uint8array';
	  }
	  if (type === '[object Uint8ClampedArray]') {
	    return 'uint8clampedarray';
	  }
	  if (type === '[object Int16Array]') {
	    return 'int16array';
	  }
	  if (type === '[object Uint16Array]') {
	    return 'uint16array';
	  }
	  if (type === '[object Int32Array]') {
	    return 'int32array';
	  }
	  if (type === '[object Uint32Array]') {
	    return 'uint32array';
	  }
	  if (type === '[object Float32Array]') {
	    return 'float32array';
	  }
	  if (type === '[object Float64Array]') {
	    return 'float64array';
	  }
	
	  // must be a plain object
	  return 'object';
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 236 */
/***/ function(module, exports) {

	/*!
	 * Determine if an object is a Buffer
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	// The _isBuffer check is for Safari 5-7 support, because it's missing
	// Object.prototype.constructor. Remove this eventually
	module.exports = function (obj) {
	  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
	}
	
	function isBuffer (obj) {
	  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
	}
	
	// For Node v0.10 support. Remove this eventually.
	function isSlowBuffer (obj) {
	  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
	}


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * randomatic <https://github.com/jonschlinkert/randomatic>
	 *
	 * This was originally inspired by <http://stackoverflow.com/a/10727155/1267639>
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License (MIT)
	 */
	
	'use strict';
	
	var isNumber = __webpack_require__(234);
	var typeOf = __webpack_require__(235);
	
	/**
	 * Expose `randomatic`
	 */
	
	module.exports = randomatic;
	
	/**
	 * Available mask characters
	 */
	
	var type = {
	  lower: 'abcdefghijklmnopqrstuvwxyz',
	  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
	  number: '0123456789',
	  special: '~!@#$%^&()_+-={}[];\',.'
	};
	
	type.all = type.lower + type.upper + type.number;
	
	/**
	 * Generate random character sequences of a specified `length`,
	 * based on the given `pattern`.
	 *
	 * @param {String} `pattern` The pattern to use for generating the random string.
	 * @param {String} `length` The length of the string to generate.
	 * @param {String} `options`
	 * @return {String}
	 * @api public
	 */
	
	function randomatic(pattern, length, options) {
	  if (typeof pattern === 'undefined') {
	    throw new Error('randomatic expects a string or number.');
	  }
	
	  var custom = false;
	  if (arguments.length === 1) {
	    if (typeof pattern === 'string') {
	      length = pattern.length;
	
	    } else if (isNumber(pattern)) {
	      options = {}; length = pattern; pattern = '*';
	    }
	  }
	
	  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {
	    options = length;
	    pattern = options.chars;
	    length = pattern.length;
	    custom = true;
	  }
	
	  var opts = options || {};
	  var mask = '';
	  var res = '';
	
	  // Characters to be used
	  if (pattern.indexOf('?') !== -1) mask += opts.chars;
	  if (pattern.indexOf('a') !== -1) mask += type.lower;
	  if (pattern.indexOf('A') !== -1) mask += type.upper;
	  if (pattern.indexOf('0') !== -1) mask += type.number;
	  if (pattern.indexOf('!') !== -1) mask += type.special;
	  if (pattern.indexOf('*') !== -1) mask += type.all;
	  if (custom) mask += pattern;
	
	  while (length--) {
	    res += mask.charAt(parseInt(Math.random() * mask.length, 10));
	  }
	  return res;
	};


/***/ },
/* 238 */
/***/ function(module, exports) {

	/*!
	 * repeat-string <https://github.com/jonschlinkert/repeat-string>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	/**
	 * Results cache
	 */
	
	var res = '';
	var cache;
	
	/**
	 * Expose `repeat`
	 */
	
	module.exports = repeat;
	
	/**
	 * Repeat the given `string` the specified `number`
	 * of times.
	 *
	 * **Example:**
	 *
	 * ```js
	 * var repeat = require('repeat-string');
	 * repeat('A', 5);
	 * //=> AAAAA
	 * ```
	 *
	 * @param {String} `string` The string to repeat
	 * @param {Number} `number` The number of times to repeat the string
	 * @return {String} Repeated string
	 * @api public
	 */
	
	function repeat(str, num) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expected a string');
	  }
	
	  // cover common, quick use cases
	  if (num === 1) return str;
	  if (num === 2) return str + str;
	
	  var max = str.length * num;
	  if (cache !== str || typeof cache === 'undefined') {
	    cache = str;
	    res = '';
	  } else if (res.length >= max) {
	    return res.substr(0, max);
	  }
	
	  while (max > res.length && num > 1) {
	    if (num & 1) {
	      res += str;
	    }
	
	    num >>= 1;
	    str += str;
	  }
	
	  res += str;
	  res = res.substr(0, max);
	  return res;
	}


/***/ },
/* 239 */
/***/ function(module, exports) {

	/*!
	 * repeat-element <https://github.com/jonschlinkert/repeat-element>
	 *
	 * Copyright (c) 2015 Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	module.exports = function repeat(ele, num) {
	  var arr = new Array(num);
	
	  for (var i = 0; i < num; i++) {
	    arr[i] = ele;
	  }
	
	  return arr;
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	/*!
	 * preserve <https://github.com/jonschlinkert/preserve>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	/**
	 * Replace tokens in `str` with a temporary, heuristic placeholder.
	 *
	 * ```js
	 * tokens.before('{a\\,b}');
	 * //=> '{__ID1__}'
	 * ```
	 *
	 * @param  {String} `str`
	 * @return {String} String with placeholders.
	 * @api public
	 */
	
	exports.before = function before(str, re) {
	  return str.replace(re, function (match) {
	    var id = randomize();
	    cache[id] = match;
	    return '__ID' + id + '__';
	  });
	};
	
	/**
	 * Replace placeholders in `str` with original tokens.
	 *
	 * ```js
	 * tokens.after('{__ID1__}');
	 * //=> '{a\\,b}'
	 * ```
	 *
	 * @param  {String} `str` String with placeholders
	 * @return {String} `str` String with original tokens.
	 * @api public
	 */
	
	exports.after = function after(str) {
	  return str.replace(/__ID(.{5})__/g, function (_, id) {
	    return cache[id];
	  });
	};
	
	function randomize() {
	  return Math.random().toString().slice(2, 7);
	}
	
	var cache = {};

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * expand-brackets <https://github.com/jonschlinkert/expand-brackets>
	 *
	 * Copyright (c) 2015 Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	var isPosixBracket = __webpack_require__(242);
	
	/**
	 * POSIX character classes
	 */
	
	var POSIX = {
	  alnum: 'a-zA-Z0-9',
	  alpha: 'a-zA-Z',
	  blank: ' \\t',
	  cntrl: '\\x00-\\x1F\\x7F',
	  digit: '0-9',
	  graph: '\\x21-\\x7E',
	  lower: 'a-z',
	  print: '\\x20-\\x7E',
	  punct: '-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
	  space: ' \\t\\r\\n\\v\\f',
	  upper: 'A-Z',
	  word:  'A-Za-z0-9_',
	  xdigit: 'A-Fa-f0-9',
	};
	
	/**
	 * Expose `brackets`
	 */
	
	module.exports = brackets;
	
	function brackets(str) {
	  if (!isPosixBracket(str)) {
	    return str;
	  }
	
	  var negated = false;
	  if (str.indexOf('[^') !== -1) {
	    negated = true;
	    str = str.split('[^').join('[');
	  }
	  if (str.indexOf('[!') !== -1) {
	    negated = true;
	    str = str.split('[!').join('[');
	  }
	
	  var a = str.split('[');
	  var b = str.split(']');
	  var imbalanced = a.length !== b.length;
	
	  var parts = str.split(/(?::\]\[:|\[?\[:|:\]\]?)/);
	  var len = parts.length, i = 0;
	  var end = '', beg = '';
	  var res = [];
	
	  // start at the end (innermost) first
	  while (len--) {
	    var inner = parts[i++];
	    if (inner === '^[!' || inner === '[!') {
	      inner = '';
	      negated = true;
	    }
	
	    var prefix = negated ? '^' : '';
	    var ch = POSIX[inner];
	
	    if (ch) {
	      res.push('[' + prefix + ch + ']');
	    } else if (inner) {
	      if (/^\[?\w-\w\]?$/.test(inner)) {
	        if (i === parts.length) {
	          res.push('[' + prefix + inner);
	        } else if (i === 1) {
	          res.push(prefix + inner + ']');
	        } else {
	          res.push(prefix + inner);
	        }
	      } else {
	        if (i === 1) {
	          beg += inner;
	        } else if (i === parts.length) {
	          end += inner;
	        } else {
	          res.push('[' + prefix + inner + ']');
	        }
	      }
	    }
	  }
	
	  var result = res.join('|');
	  var rlen = res.length || 1;
	  if (rlen > 1) {
	    result = '(?:' + result + ')';
	    rlen = 1;
	  }
	  if (beg) {
	    rlen++;
	    if (beg.charAt(0) === '[') {
	      if (imbalanced) {
	        beg = '\\[' + beg.slice(1);
	      } else {
	        beg += ']';
	      }
	    }
	    result = beg + result;
	  }
	  if (end) {
	    rlen++;
	    if (end.slice(-1) === ']') {
	      if (imbalanced) {
	        end = end.slice(0, end.length - 1) + '\\]';
	      } else {
	        end = '[' + end;
	      }
	    }
	    result += end;
	  }
	
	  if (rlen > 1) {
	    result = result.split('][').join(']|[');
	    if (result.indexOf('|') !== -1 && !/\(\?/.test(result)) {
	      result = '(?:' + result + ')';
	    }
	  }
	
	  result = result.replace(/\[+=|=\]+/g, '\\b');
	  return result;
	}
	
	brackets.makeRe = function(pattern) {
	  try {
	    return new RegExp(brackets(pattern));
	  } catch (err) {}
	};
	
	brackets.isMatch = function(str, pattern) {
	  try {
	    return brackets.makeRe(pattern).test(str);
	  } catch (err) {
	    return false;
	  }
	};
	
	brackets.match = function(arr, pattern) {
	  var len = arr.length, i = 0;
	  var res = arr.slice();
	
	  var re = brackets.makeRe(pattern);
	  while (i < len) {
	    var ele = arr[i++];
	    if (!re.test(ele)) {
	      continue;
	    }
	    res.splice(i, 1);
	  }
	  return res;
	};


/***/ },
/* 242 */
/***/ function(module, exports) {

	/*!
	 * is-posix-bracket <https://github.com/jonschlinkert/is-posix-bracket>
	 *
	 * Copyright (c) 2015-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	module.exports = function isPosixBracket(str) {
	  return typeof str === 'string' && /\[([:.=+])(?:[^\[\]]|)+\1\]/.test(str);
	};


/***/ },
/* 243 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * extglob <https://github.com/jonschlinkert/extglob>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	/**
	 * Module dependencies
	 */
	
	var isExtglob = __webpack_require__(244);
	var re, cache = {};
	
	/**
	 * Expose `extglob`
	 */
	
	module.exports = extglob;
	
	/**
	 * Convert the given extglob `string` to a regex-compatible
	 * string.
	 *
	 * ```js
	 * var extglob = require('extglob');
	 * extglob('!(a?(b))');
	 * //=> '(?!a(?:b)?)[^/]*?'
	 * ```
	 *
	 * @param {String} `str` The string to convert.
	 * @param {Object} `options`
	 *   @option {Boolean} [options] `esc` If `false` special characters will not be escaped. Defaults to `true`.
	 *   @option {Boolean} [options] `regex` If `true` a regular expression is returned instead of a string.
	 * @return {String}
	 * @api public
	 */
	
	
	function extglob(str, opts) {
	  opts = opts || {};
	  var o = {}, i = 0;
	
	  // fix common character reversals
	  // '*!(.js)' => '*.!(js)'
	  str = str.replace(/!\(([^\w*()])/g, '$1!(');
	
	  // support file extension negation
	  str = str.replace(/([*\/])\.!\([*]\)/g, function (m, ch) {
	    if (ch === '/') {
	      return escape('\\/[^.]+');
	    }
	    return escape('[^.]+');
	  });
	
	  // create a unique key for caching by
	  // combining the string and options
	  var key = str
	    + String(!!opts.regex)
	    + String(!!opts.contains)
	    + String(!!opts.escape);
	
	  if (cache.hasOwnProperty(key)) {
	    return cache[key];
	  }
	
	  if (!(re instanceof RegExp)) {
	    re = regex();
	  }
	
	  opts.negate = false;
	  var m;
	
	  while (m = re.exec(str)) {
	    var prefix = m[1];
	    var inner = m[3];
	    if (prefix === '!') {
	      opts.negate = true;
	    }
	
	    var id = '__EXTGLOB_' + (i++) + '__';
	    // use the prefix of the _last_ (outtermost) pattern
	    o[id] = wrap(inner, prefix, opts.escape);
	    str = str.split(m[0]).join(id);
	  }
	
	  var keys = Object.keys(o);
	  var len = keys.length;
	
	  // we have to loop again to allow us to convert
	  // patterns in reverse order (starting with the
	  // innermost/last pattern first)
	  while (len--) {
	    var prop = keys[len];
	    str = str.split(prop).join(o[prop]);
	  }
	
	  var result = opts.regex
	    ? toRegex(str, opts.contains, opts.negate)
	    : str;
	
	  result = result.split('.').join('\\.');
	
	  // cache the result and return it
	  return (cache[key] = result);
	}
	
	/**
	 * Convert `string` to a regex string.
	 *
	 * @param  {String} `str`
	 * @param  {String} `prefix` Character that determines how to wrap the string.
	 * @param  {Boolean} `esc` If `false` special characters will not be escaped. Defaults to `true`.
	 * @return {String}
	 */
	
	function wrap(inner, prefix, esc) {
	  if (esc) inner = escape(inner);
	
	  switch (prefix) {
	    case '!':
	      return '(?!' + inner + ')[^/]' + (esc ? '%%%~' : '*?');
	    case '@':
	      return '(?:' + inner + ')';
	    case '+':
	      return '(?:' + inner + ')+';
	    case '*':
	      return '(?:' + inner + ')' + (esc ? '%%' : '*')
	    case '?':
	      return '(?:' + inner + '|)';
	    default:
	      return inner;
	  }
	}
	
	function escape(str) {
	  str = str.split('*').join('[^/]%%%~');
	  str = str.split('.').join('\\.');
	  return str;
	}
	
	/**
	 * extglob regex.
	 */
	
	function regex() {
	  return /(\\?[@?!+*$]\\?)(\(([^()]*?)\))/;
	}
	
	/**
	 * Negation regex
	 */
	
	function negate(str) {
	  return '(?!^' + str + ').*$';
	}
	
	/**
	 * Create the regex to do the matching. If
	 * the leading character in the `pattern` is `!`
	 * a negation regex is returned.
	 *
	 * @param {String} `pattern`
	 * @param {Boolean} `contains` Allow loose matching.
	 * @param {Boolean} `isNegated` True if the pattern is a negation pattern.
	 */
	
	function toRegex(pattern, contains, isNegated) {
	  var prefix = contains ? '^' : '';
	  var after = contains ? '$' : '';
	  pattern = ('(?:' + pattern + ')' + after);
	  if (isNegated) {
	    pattern = prefix + negate(pattern);
	  }
	  return new RegExp(prefix + pattern);
	}


/***/ },
/* 244 */
/***/ function(module, exports) {

	/*!
	 * is-extglob <https://github.com/jonschlinkert/is-extglob>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	module.exports = function isExtglob(str) {
	  return typeof str === 'string'
	    && /[@?!+*]\(/.test(str);
	};


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-glob <https://github.com/jonschlinkert/is-glob>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	var isExtglob = __webpack_require__(244);
	
	module.exports = function isGlob(str) {
	  return typeof str === 'string'
	    && (/[*!?{}(|)[\]]/.test(str)
	     || isExtglob(str));
	};

/***/ },
/* 246 */
/***/ function(module, exports) {

	/*!
	 * normalize-path <https://github.com/jonschlinkert/normalize-path>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License
	 */
	
	module.exports = function normalizePath(str, stripTrailing) {
	  if (typeof str !== 'string') {
	    throw new TypeError('expected a string');
	  }
	  str = str.replace(/[\\\/]+/g, '/');
	  if (stripTrailing !== false) {
	    str = str.replace(/\/$/, '');
	  }
	  return str;
	};


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * object.omit <https://github.com/jonschlinkert/object.omit>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isObject = __webpack_require__(248);
	var forOwn = __webpack_require__(249);
	
	module.exports = function omit(obj, keys) {
	  if (!isObject(obj)) return {};
	
	  keys = [].concat.apply([], [].slice.call(arguments, 1));
	  var last = keys[keys.length - 1];
	  var res = {}, fn;
	
	  if (typeof last === 'function') {
	    fn = keys.pop();
	  }
	
	  var isFunction = typeof fn === 'function';
	  if (!keys.length && !isFunction) {
	    return obj;
	  }
	
	  forOwn(obj, function(value, key) {
	    if (keys.indexOf(key) === -1) {
	
	      if (!isFunction) {
	        res[key] = value;
	      } else if (fn(value, key, obj)) {
	        res[key] = value;
	      }
	    }
	  });
	  return res;
	};


/***/ },
/* 248 */
/***/ function(module, exports) {

	/*!
	 * is-extendable <https://github.com/jonschlinkert/is-extendable>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function isExtendable(val) {
	  return typeof val !== 'undefined' && val !== null
	    && (typeof val === 'object' || typeof val === 'function');
	};


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * for-own <https://github.com/jonschlinkert/for-own>
	 *
	 * Copyright (c) 2014-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var forIn = __webpack_require__(250);
	var hasOwn = Object.prototype.hasOwnProperty;
	
	module.exports = function forOwn(o, fn, thisArg) {
	  forIn(o, function(val, key) {
	    if (hasOwn.call(o, key)) {
	      return fn.call(thisArg, o[key], key, o);
	    }
	  });
	};


/***/ },
/* 250 */
/***/ function(module, exports) {

	/*!
	 * for-in <https://github.com/jonschlinkert/for-in>
	 *
	 * Copyright (c) 2014-2016, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	module.exports = function forIn(o, fn, thisArg) {
	  for (var key in o) {
	    if (fn.call(thisArg, o[key], key, o) === false) {
	      break;
	    }
	  }
	};


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * parse-glob <https://github.com/jonschlinkert/parse-glob>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isGlob = __webpack_require__(245);
	var findBase = __webpack_require__(252);
	var extglob = __webpack_require__(244);
	var dotfile = __webpack_require__(254);
	
	/**
	 * Expose `cache`
	 */
	
	var cache = module.exports.cache = {};
	
	/**
	 * Parse a glob pattern into tokens.
	 *
	 * When no paths or '**' are in the glob, we use a
	 * different strategy for parsing the filename, since
	 * file names can contain braces and other difficult
	 * patterns. such as:
	 *
	 *  - `*.{a,b}`
	 *  - `(**|*.js)`
	 */
	
	module.exports = function parseGlob(glob) {
	  if (cache.hasOwnProperty(glob)) {
	    return cache[glob];
	  }
	
	  var tok = {};
	  tok.orig = glob;
	  tok.is = {};
	
	  // unescape dots and slashes in braces/brackets
	  glob = escape(glob);
	
	  var parsed = findBase(glob);
	  tok.is.glob = parsed.isGlob;
	
	  tok.glob = parsed.glob;
	  tok.base = parsed.base;
	  var segs = /([^\/]*)$/.exec(glob);
	
	  tok.path = {};
	  tok.path.dirname = '';
	  tok.path.basename = segs[1] || '';
	  tok.path.dirname = glob.split(tok.path.basename).join('') || '';
	  var basename = (tok.path.basename || '').split('.') || '';
	  tok.path.filename = basename[0] || '';
	  tok.path.extname = basename.slice(1).join('.') || '';
	  tok.path.ext = '';
	
	  if (isGlob(tok.path.dirname) && !tok.path.basename) {
	    if (!/\/$/.test(tok.glob)) {
	      tok.path.basename = tok.glob;
	    }
	    tok.path.dirname = tok.base;
	  }
	
	  if (glob.indexOf('/') === -1 && !tok.is.globstar) {
	    tok.path.dirname = '';
	    tok.path.basename = tok.orig;
	  }
	
	  var dot = tok.path.basename.indexOf('.');
	  if (dot !== -1) {
	    tok.path.filename = tok.path.basename.slice(0, dot);
	    tok.path.extname = tok.path.basename.slice(dot);
	  }
	
	  if (tok.path.extname.charAt(0) === '.') {
	    var exts = tok.path.extname.split('.');
	    tok.path.ext = exts[exts.length - 1];
	  }
	
	  // unescape dots and slashes in braces/brackets
	  tok.glob = unescape(tok.glob);
	  tok.path.dirname = unescape(tok.path.dirname);
	  tok.path.basename = unescape(tok.path.basename);
	  tok.path.filename = unescape(tok.path.filename);
	  tok.path.extname = unescape(tok.path.extname);
	
	  // Booleans
	  var is = (glob && tok.is.glob);
	  tok.is.negated  = glob && glob.charAt(0) === '!';
	  tok.is.extglob  = glob && extglob(glob);
	  tok.is.braces   = has(is, glob, '{');
	  tok.is.brackets = has(is, glob, '[:');
	  tok.is.globstar = has(is, glob, '**');
	  tok.is.dotfile  = dotfile(tok.path.basename) || dotfile(tok.path.filename);
	  tok.is.dotdir   = dotdir(tok.path.dirname);
	  return (cache[glob] = tok);
	}
	
	/**
	 * Returns true if the glob matches dot-directories.
	 *
	 * @param  {Object} `tok` The tokens object
	 * @param  {Object} `path` The path object
	 * @return {Object}
	 */
	
	function dotdir(base) {
	  if (base.indexOf('/.') !== -1) {
	    return true;
	  }
	  if (base.charAt(0) === '.' && base.charAt(1) !== '/') {
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Returns true if the pattern has the given `ch`aracter(s)
	 *
	 * @param  {Object} `glob` The glob pattern.
	 * @param  {Object} `ch` The character to test for
	 * @return {Object}
	 */
	
	function has(is, glob, ch) {
	  return is && glob.indexOf(ch) !== -1;
	}
	
	/**
	 * Escape/unescape utils
	 */
	
	function escape(str) {
	  var re = /\{([^{}]*?)}|\(([^()]*?)\)|\[([^\[\]]*?)\]/g;
	  return str.replace(re, function (outter, braces, parens, brackets) {
	    var inner = braces || parens || brackets;
	    if (!inner) { return outter; }
	    return outter.split(inner).join(esc(inner));
	  });
	}
	
	function esc(str) {
	  str = str.split('/').join('__SLASH__');
	  str = str.split('.').join('__DOT__');
	  return str;
	}
	
	function unescape(str) {
	  str = str.split('__SLASH__').join('/');
	  str = str.split('__DOT__').join('.');
	  return str;
	}


/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * glob-base <https://github.com/jonschlinkert/glob-base>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var path = __webpack_require__(4);
	var parent = __webpack_require__(253);
	var isGlob = __webpack_require__(245);
	
	module.exports = function globBase(pattern) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob-base expects a string.');
	  }
	
	  var res = {};
	  res.base = parent(pattern);
	  res.isGlob = isGlob(pattern);
	
	  if (res.base !== '.') {
	    res.glob = pattern.substr(res.base.length);
	    if (res.glob.charAt(0) === '/') {
	      res.glob = res.glob.substr(1);
	    }
	  } else {
	    res.glob = pattern;
	  }
	
	  if (!res.isGlob) {
	    res.base = dirname(pattern);
	    res.glob = res.base !== '.'
	      ? pattern.substr(res.base.length)
	      : pattern;
	  }
	
	  if (res.glob.substr(0, 2) === './') {
	    res.glob = res.glob.substr(2);
	  }
	  if (res.glob.charAt(0) === '/') {
	    res.glob = res.glob.substr(1);
	  }
	  return res;
	};
	
	function dirname(glob) {
	  if (glob.slice(-1) === '/') return glob;
	  return path.dirname(glob);
	}


/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var path = __webpack_require__(4);
	var isglob = __webpack_require__(245);
	
	module.exports = function globParent(str) {
		str += 'a'; // preserves full path in case of trailing path separator
		do {str = path.dirname(str)} while (isglob(str));
		return str;
	};


/***/ },
/* 254 */
/***/ function(module, exports) {

	/*!
	 * is-dotfile <https://github.com/regexps/is-dotfile>
	 *
	 * Copyright (c) 2015 Jon Schlinkert, contributors.
	 * Licensed under the MIT license.
	 */
	
	module.exports = function(str) {
	  if (str.charCodeAt(0) === 46 /* . */ && str.indexOf('/', 1) === -1) {
	    return true;
	  }
	
	  var last = str.lastIndexOf('/');
	  return last !== -1 ? str.charCodeAt(last + 1) === 46  /* . */ : false;
	};


/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * regex-cache <https://github.com/jonschlinkert/regex-cache>
	 *
	 * Copyright (c) 2015 Jon Schlinkert.
	 * Licensed under the MIT license.
	 */
	
	'use strict';
	
	var isPrimitive = __webpack_require__(256);
	var equal = __webpack_require__(257);
	var basic = {};
	var cache = {};
	
	/**
	 * Expose `regexCache`
	 */
	
	module.exports = regexCache;
	
	/**
	 * Memoize the results of a call to the new RegExp constructor.
	 *
	 * @param  {Function} fn [description]
	 * @param  {String} str [description]
	 * @param  {Options} options [description]
	 * @param  {Boolean} nocompare [description]
	 * @return {RegExp}
	 */
	
	function regexCache(fn, str, opts) {
	  var key = '_default_', regex, cached;
	
	  if (!str && !opts) {
	    if (typeof fn !== 'function') {
	      return fn;
	    }
	    return basic[key] || (basic[key] = fn(str));
	  }
	
	  var isString = typeof str === 'string';
	  if (isString) {
	    if (!opts) {
	      return basic[str] || (basic[str] = fn(str));
	    }
	    key = str;
	  } else {
	    opts = str;
	  }
	
	  cached = cache[key];
	  if (cached && equal(cached.opts, opts)) {
	    return cached.regex;
	  }
	
	  memo(key, opts, (regex = fn(str, opts)));
	  return regex;
	}
	
	function memo(key, opts, regex) {
	  cache[key] = {regex: regex, opts: opts};
	}
	
	/**
	 * Expose `cache`
	 */
	
	module.exports.cache = cache;
	module.exports.basic = basic;


/***/ },
/* 256 */
/***/ function(module, exports) {

	/*!
	 * is-primitive <https://github.com/jonschlinkert/is-primitive>
	 *
	 * Copyright (c) 2014-2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	// see http://jsperf.com/testing-value-is-primitive/7
	module.exports = function isPrimitive(value) {
	  return value == null || (typeof value !== 'function' && typeof value !== 'object');
	};


/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * is-equal-shallow <https://github.com/jonschlinkert/is-equal-shallow>
	 *
	 * Copyright (c) 2015, Jon Schlinkert.
	 * Licensed under the MIT License.
	 */
	
	'use strict';
	
	var isPrimitive = __webpack_require__(256);
	
	module.exports = function isEqual(a, b) {
	  if (!a && !b) { return true; }
	  if (!a && b || a && !b) { return false; }
	
	  var numKeysA = 0, numKeysB = 0, key;
	  for (key in b) {
	    numKeysB++;
	    if (!isPrimitive(b[key]) || !a.hasOwnProperty(key) || (a[key] !== b[key])) {
	      return false;
	    }
	  }
	  for (key in a) {
	    numKeysA++;
	  }
	  return numKeysA === numKeysB;
	};


/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var chars = __webpack_require__(259);
	var utils = __webpack_require__(224);
	
	/**
	 * Expose `Glob`
	 */
	
	var Glob = module.exports = function Glob(pattern, options) {
	  if (!(this instanceof Glob)) {
	    return new Glob(pattern, options);
	  }
	  this.options = options || {};
	  this.pattern = pattern;
	  this.history = [];
	  this.tokens = {};
	  this.init(pattern);
	};
	
	/**
	 * Initialize defaults
	 */
	
	Glob.prototype.init = function(pattern) {
	  this.orig = pattern;
	  this.negated = this.isNegated();
	  this.options.track = this.options.track || false;
	  this.options.makeRe = true;
	};
	
	/**
	 * Push a change into `glob.history`. Useful
	 * for debugging.
	 */
	
	Glob.prototype.track = function(msg) {
	  if (this.options.track) {
	    this.history.push({msg: msg, pattern: this.pattern});
	  }
	};
	
	/**
	 * Return true if `glob.pattern` was negated
	 * with `!`, also remove the `!` from the pattern.
	 *
	 * @return {Boolean}
	 */
	
	Glob.prototype.isNegated = function() {
	  if (this.pattern.charCodeAt(0) === 33 /* '!' */) {
	    this.pattern = this.pattern.slice(1);
	    return true;
	  }
	  return false;
	};
	
	/**
	 * Expand braces in the given glob pattern.
	 *
	 * We only need to use the [braces] lib when
	 * patterns are nested.
	 */
	
	Glob.prototype.braces = function() {
	  if (this.options.nobraces !== true && this.options.nobrace !== true) {
	    // naive/fast check for imbalanced characters
	    var a = this.pattern.match(/[\{\(\[]/g);
	    var b = this.pattern.match(/[\}\)\]]/g);
	
	    // if imbalanced, don't optimize the pattern
	    if (a && b && (a.length !== b.length)) {
	      this.options.makeRe = false;
	    }
	
	    // expand brace patterns and join the resulting array
	    var expanded = utils.braces(this.pattern, this.options);
	    this.pattern = expanded.join('|');
	  }
	};
	
	/**
	 * Expand bracket expressions in `glob.pattern`
	 */
	
	Glob.prototype.brackets = function() {
	  if (this.options.nobrackets !== true) {
	    this.pattern = utils.brackets(this.pattern);
	  }
	};
	
	/**
	 * Expand bracket expressions in `glob.pattern`
	 */
	
	Glob.prototype.extglob = function() {
	  if (this.options.noextglob === true) return;
	
	  if (utils.isExtglob(this.pattern)) {
	    this.pattern = utils.extglob(this.pattern, {escape: true});
	  }
	};
	
	/**
	 * Parse the given pattern
	 */
	
	Glob.prototype.parse = function(pattern) {
	  this.tokens = utils.parseGlob(pattern || this.pattern, true);
	  return this.tokens;
	};
	
	/**
	 * Replace `a` with `b`. Also tracks the change before and
	 * after each replacement. This is disabled by default, but
	 * can be enabled by setting `options.track` to true.
	 *
	 * Also, when the pattern is a string, `.split()` is used,
	 * because it's much faster than replace.
	 *
	 * @param  {RegExp|String} `a`
	 * @param  {String} `b`
	 * @param  {Boolean} `escape` When `true`, escapes `*` and `?` in the replacement.
	 * @return {String}
	 */
	
	Glob.prototype._replace = function(a, b, escape) {
	  this.track('before (find): "' + a + '" (replace with): "' + b + '"');
	  if (escape) b = esc(b);
	  if (a && b && typeof a === 'string') {
	    this.pattern = this.pattern.split(a).join(b);
	  } else {
	    this.pattern = this.pattern.replace(a, b);
	  }
	  this.track('after');
	};
	
	/**
	 * Escape special characters in the given string.
	 *
	 * @param  {String} `str` Glob pattern
	 * @return {String}
	 */
	
	Glob.prototype.escape = function(str) {
	  this.track('before escape: ');
	  var re = /["\\](['"]?[^"'\\]['"]?)/g;
	
	  this.pattern = str.replace(re, function($0, $1) {
	    var o = chars.ESC;
	    var ch = o && o[$1];
	    if (ch) {
	      return ch;
	    }
	    if (/[a-z]/i.test($0)) {
	      return $0.split('\\').join('');
	    }
	    return $0;
	  });
	
	  this.track('after escape: ');
	};
	
	/**
	 * Unescape special characters in the given string.
	 *
	 * @param  {String} `str`
	 * @return {String}
	 */
	
	Glob.prototype.unescape = function(str) {
	  var re = /__([A-Z]+)_([A-Z]+)__/g;
	  this.pattern = str.replace(re, function($0, $1) {
	    return chars[$1][$0];
	  });
	  this.pattern = unesc(this.pattern);
	};
	
	/**
	 * Escape/unescape utils
	 */
	
	function esc(str) {
	  str = str.split('?').join('%~');
	  str = str.split('*').join('%%');
	  return str;
	}
	
	function unesc(str) {
	  str = str.split('%~').join('?');
	  str = str.split('%%').join('*');
	  return str;
	}


/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';
	
	var chars = {}, unesc, temp;
	
	function reverse(object, prepender) {
	  return Object.keys(object).reduce(function(reversed, key) {
	    var newKey = prepender ? prepender + key : key; // Optionally prepend a string to key.
	    reversed[object[key]] = newKey; // Swap key and value.
	    return reversed; // Return the result.
	  }, {});
	}
	
	/**
	 * Regex for common characters
	 */
	
	chars.escapeRegex = {
	  '?': /\?/g,
	  '@': /\@/g,
	  '!': /\!/g,
	  '+': /\+/g,
	  '*': /\*/g,
	  '(': /\(/g,
	  ')': /\)/g,
	  '[': /\[/g,
	  ']': /\]/g
	};
	
	/**
	 * Escape characters
	 */
	
	chars.ESC = {
	  '?': '__UNESC_QMRK__',
	  '@': '__UNESC_AMPE__',
	  '!': '__UNESC_EXCL__',
	  '+': '__UNESC_PLUS__',
	  '*': '__UNESC_STAR__',
	  ',': '__UNESC_COMMA__',
	  '(': '__UNESC_LTPAREN__',
	  ')': '__UNESC_RTPAREN__',
	  '[': '__UNESC_LTBRACK__',
	  ']': '__UNESC_RTBRACK__'
	};
	
	/**
	 * Unescape characters
	 */
	
	chars.UNESC = unesc || (unesc = reverse(chars.ESC, '\\'));
	
	chars.ESC_TEMP = {
	  '?': '__TEMP_QMRK__',
	  '@': '__TEMP_AMPE__',
	  '!': '__TEMP_EXCL__',
	  '*': '__TEMP_STAR__',
	  '+': '__TEMP_PLUS__',
	  ',': '__TEMP_COMMA__',
	  '(': '__TEMP_LTPAREN__',
	  ')': '__TEMP_RTPAREN__',
	  '[': '__TEMP_LTBRACK__',
	  ']': '__TEMP_RTBRACK__'
	};
	
	chars.TEMP = temp || (temp = reverse(chars.ESC_TEMP));
	
	module.exports = chars;


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	function posix(path) {
		return path.charAt(0) === '/';
	}
	
	function win32(path) {
		// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = Boolean(device && device.charAt(1) !== ':');
	
		// UNC paths are always absolute
		return Boolean(result[2] || isUnc);
	}
	
	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 261 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(4);
	var readdirp = __webpack_require__(263);
	var isBinaryPath = __webpack_require__(295);
	
	// fs.watch helpers
	
	// object to hold per-process fs.watch instances
	// (may be shared across chokidar FSWatcher instances)
	var FsWatchInstances = Object.create(null);
	
	// Private function: Instantiates the fs.watch interface
	
	// * path       - string, path to be watched
	// * options    - object, options to be passed to fs.watch
	// * listener   - function, main event handler
	// * errHandler - function, handler which emits info about errors
	// * emitRaw    - function, handler which emits raw event data
	
	// Returns new fsevents instance
	function createFsWatchInstance(path, options, listener, errHandler, emitRaw) {
	  var handleEvent = function(rawEvent, evPath) {
	    listener(path);
	    emitRaw(rawEvent, evPath, {watchedPath: path});
	
	    // emit based on events occuring for files from a directory's watcher in
	    // case the file's watcher misses it (and rely on throttling to de-dupe)
	    if (evPath && path !== evPath) {
	      fsWatchBroadcast(
	        sysPath.resolve(path, evPath), 'listeners', sysPath.join(path, evPath)
	      );
	    }
	  };
	  try {
	    return fs.watch(path, options, handleEvent);
	  } catch (error) {
	    errHandler(error);
	  }
	}
	
	// Private function: Helper for passing fs.watch event data to a
	// collection of listeners
	
	// * fullPath   - string, absolute path bound to the fs.watch instance
	// * type       - string, listener type
	// * val[1..3]  - arguments to be passed to listeners
	
	// Returns nothing
	function fsWatchBroadcast(fullPath, type, val1, val2, val3) {
	  if (!FsWatchInstances[fullPath]) return;
	  FsWatchInstances[fullPath][type].forEach(function(listener) {
	    listener(val1, val2, val3);
	  });
	}
	
	// Private function: Instantiates the fs.watch interface or binds listeners
	// to an existing one covering the same file system entry
	
	// * path       - string, path to be watched
	// * fullPath   - string, absolute path
	// * options    - object, options to be passed to fs.watch
	// * handlers   - object, container for event listener functions
	
	// Returns close function
	function setFsWatchListener(path, fullPath, options, handlers) {
	  var listener = handlers.listener;
	  var errHandler = handlers.errHandler;
	  var rawEmitter = handlers.rawEmitter;
	  var container = FsWatchInstances[fullPath];
	  var watcher;
	  if (!options.persistent) {
	    watcher = createFsWatchInstance(
	      path, options, listener, errHandler, rawEmitter
	    );
	    return watcher.close.bind(watcher);
	  }
	  if (!container) {
	    watcher = createFsWatchInstance(
	      path,
	      options,
	      fsWatchBroadcast.bind(null, fullPath, 'listeners'),
	      errHandler, // no need to use broadcast here
	      fsWatchBroadcast.bind(null, fullPath, 'rawEmitters')
	    );
	    if (!watcher) return;
	    var broadcastErr = fsWatchBroadcast.bind(null, fullPath, 'errHandlers');
	    watcher.on('error', function(error) {
	      // Workaround for https://github.com/joyent/node/issues/4337
	      if (process.platform === 'win32' && error.code === 'EPERM') {
	        fs.open(path, 'r', function(err, fd) {
	          if (fd) fs.close(fd);
	          if (!err) broadcastErr(error);
	        });
	      } else {
	        broadcastErr(error);
	      }
	    });
	    container = FsWatchInstances[fullPath] = {
	      listeners: [listener],
	      errHandlers: [errHandler],
	      rawEmitters: [rawEmitter],
	      watcher: watcher
	    };
	  } else {
	    container.listeners.push(listener);
	    container.errHandlers.push(errHandler);
	    container.rawEmitters.push(rawEmitter);
	  }
	  var listenerIndex = container.listeners.length - 1;
	
	  // removes this instance's listeners and closes the underlying fs.watch
	  // instance if there are no more listeners left
	  return function close() {
	    delete container.listeners[listenerIndex];
	    delete container.errHandlers[listenerIndex];
	    delete container.rawEmitters[listenerIndex];
	    if (!Object.keys(container.listeners).length) {
	      container.watcher.close();
	      delete FsWatchInstances[fullPath];
	    }
	  };
	}
	
	// fs.watchFile helpers
	
	// object to hold per-process fs.watchFile instances
	// (may be shared across chokidar FSWatcher instances)
	var FsWatchFileInstances = Object.create(null);
	
	// Private function: Instantiates the fs.watchFile interface or binds listeners
	// to an existing one covering the same file system entry
	
	// * path       - string, path to be watched
	// * fullPath   - string, absolute path
	// * options    - object, options to be passed to fs.watchFile
	// * handlers   - object, container for event listener functions
	
	// Returns close function
	function setFsWatchFileListener(path, fullPath, options, handlers) {
	  var listener = handlers.listener;
	  var rawEmitter = handlers.rawEmitter;
	  var container = FsWatchFileInstances[fullPath];
	  var listeners = [];
	  var rawEmitters = [];
	  if (
	    container && (
	      container.options.persistent < options.persistent ||
	      container.options.interval > options.interval
	    )
	  ) {
	    // "Upgrade" the watcher to persistence or a quicker interval.
	    // This creates some unlikely edge case issues if the user mixes
	    // settings in a very weird way, but solving for those cases
	    // doesn't seem worthwhile for the added complexity.
	    listeners = container.listeners;
	    rawEmitters = container.rawEmitters;
	    fs.unwatchFile(fullPath);
	    container = false;
	  }
	  if (!container) {
	    listeners.push(listener);
	    rawEmitters.push(rawEmitter);
	    container = FsWatchFileInstances[fullPath] = {
	      listeners: listeners,
	      rawEmitters: rawEmitters,
	      options: options,
	      watcher: fs.watchFile(fullPath, options, function(curr, prev) {
	        container.rawEmitters.forEach(function(rawEmitter) {
	          rawEmitter('change', fullPath, {curr: curr, prev: prev});
	        });
	        var currmtime = curr.mtime.getTime();
	        if (curr.size !== prev.size || currmtime > prev.mtime.getTime() || currmtime === 0) {
	          container.listeners.forEach(function(listener) {
	            listener(path, curr);
	          });
	        }
	      })
	    };
	  } else {
	    container.listeners.push(listener);
	    container.rawEmitters.push(rawEmitter);
	  }
	  var listenerIndex = container.listeners.length - 1;
	
	  // removes this instance's listeners and closes the underlying fs.watchFile
	  // instance if there are no more listeners left
	  return function close() {
	    delete container.listeners[listenerIndex];
	    delete container.rawEmitters[listenerIndex];
	    if (!Object.keys(container.listeners).length) {
	      fs.unwatchFile(fullPath);
	      delete FsWatchFileInstances[fullPath];
	    }
	  };
	}
	
	// fake constructor for attaching nodefs-specific prototype methods that
	// will be copied to FSWatcher's prototype
	function NodeFsHandler() {}
	
	// Private method: Watch file for changes with fs.watchFile or fs.watch.
	
	// * path     - string, path to file or directory.
	// * listener - function, to be executed on fs change.
	
	// Returns close function for the watcher instance
	NodeFsHandler.prototype._watchWithNodeFs =
	function(path, listener) {
	  var directory = sysPath.dirname(path);
	  var basename = sysPath.basename(path);
	  var parent = this._getWatchedDir(directory);
	  parent.add(basename);
	  var absolutePath = sysPath.resolve(path);
	  var options = {persistent: this.options.persistent};
	  if (!listener) listener = Function.prototype; // empty function
	
	  var closer;
	  if (this.options.usePolling) {
	    options.interval = this.enableBinaryInterval && isBinaryPath(basename) ?
	      this.options.binaryInterval : this.options.interval;
	    closer = setFsWatchFileListener(path, absolutePath, options, {
	      listener: listener,
	      rawEmitter: this.emit.bind(this, 'raw')
	    });
	  } else {
	    closer = setFsWatchListener(path, absolutePath, options, {
	      listener: listener,
	      errHandler: this._handleError.bind(this),
	      rawEmitter: this.emit.bind(this, 'raw')
	    });
	  }
	  return closer;
	};
	
	// Private method: Watch a file and emit add event if warranted
	
	// * file       - string, the file's path
	// * stats      - object, result of fs.stat
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * callback   - function, called when done processing as a newly seen file
	
	// Returns close function for the watcher instance
	NodeFsHandler.prototype._handleFile =
	function(file, stats, initialAdd, callback) {
	  var dirname = sysPath.dirname(file);
	  var basename = sysPath.basename(file);
	  var parent = this._getWatchedDir(dirname);
	
	  // if the file is already being watched, do nothing
	  if (parent.has(basename)) return callback();
	
	  // kick off the watcher
	  var closer = this._watchWithNodeFs(file, function(path, newStats) {
	    if (!this._throttle('watch', file, 5)) return;
	    if (!newStats || newStats && newStats.mtime.getTime() === 0) {
	      fs.stat(file, function(error, newStats) {
	        // Fix issues where mtime is null but file is still present
	        if (error) {
	          this._remove(dirname, basename);
	        } else {
	          this._emit('change', file, newStats);
	        }
	      }.bind(this));
	    // add is about to be emitted if file not already tracked in parent
	    } else if (parent.has(basename)) {
	      this._emit('change', file, newStats);
	    }
	  }.bind(this));
	
	  // emit an add event if we're supposed to
	  if (!(initialAdd && this.options.ignoreInitial)) {
	    if (!this._throttle('add', file, 0)) return;
	    this._emit('add', file, stats);
	  }
	
	  if (callback) callback();
	  return closer;
	};
	
	// Private method: Handle symlinks encountered while reading a dir
	
	// * entry      - object, entry object returned by readdirp
	// * directory  - string, path of the directory being read
	// * path       - string, path of this item
	// * item       - string, basename of this item
	
	// Returns true if no more processing is needed for this entry.
	NodeFsHandler.prototype._handleSymlink =
	function(entry, directory, path, item) {
	  var full = entry.fullPath;
	  var dir = this._getWatchedDir(directory);
	
	  if (!this.options.followSymlinks) {
	    // watch symlink directly (don't follow) and detect changes
	    this._readyCount++;
	    fs.realpath(path, function(error, linkPath) {
	      if (dir.has(item)) {
	        if (this._symlinkPaths[full] !== linkPath) {
	          this._symlinkPaths[full] = linkPath;
	          this._emit('change', path, entry.stat);
	        }
	      } else {
	        dir.add(item);
	        this._symlinkPaths[full] = linkPath;
	        this._emit('add', path, entry.stat);
	      }
	      this._emitReady();
	    }.bind(this));
	    return true;
	  }
	
	  // don't follow the same symlink more than once
	  if (this._symlinkPaths[full]) return true;
	  else this._symlinkPaths[full] = true;
	};
	
	// Private method: Read directory to add / remove files from `@watched` list
	// and re-read it on change.
	
	// * dir        - string, fs path.
	// * stats      - object, result of fs.stat
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * depth      - int, depth relative to user-supplied path
	// * target     - string, child path actually targeted for watch
	// * wh         - object, common watch helpers for this path
	// * callback   - function, called when dir scan is complete
	
	// Returns close function for the watcher instance
	NodeFsHandler.prototype._handleDir =
	function(dir, stats, initialAdd, depth, target, wh, callback) {
	  var parentDir = this._getWatchedDir(sysPath.dirname(dir));
	  var tracked = parentDir.has(sysPath.basename(dir));
	  if (!(initialAdd && this.options.ignoreInitial) && !target && !tracked) {
	    if (!wh.hasGlob || wh.globFilter(dir)) this._emit('addDir', dir, stats);
	  }
	
	  // ensure dir is tracked (harmless if redundant)
	  parentDir.add(sysPath.basename(dir));
	  this._getWatchedDir(dir);
	
	  var read = function(directory, initialAdd, done) {
	    // Normalize the directory name on Windows
	    directory = sysPath.join(directory, '');
	
	    if (!wh.hasGlob) {
	      var throttler = this._throttle('readdir', directory, 1000);
	      if (!throttler) return;
	    }
	
	    var previous = this._getWatchedDir(wh.path);
	    var current = [];
	
	    readdirp({
	      root: directory,
	      entryType: 'all',
	      fileFilter: wh.filterPath,
	      directoryFilter: wh.filterDir,
	      depth: 0,
	      lstat: true
	    }).on('data', function(entry) {
	      var item = entry.path;
	      var path = sysPath.join(directory, item);
	      current.push(item);
	
	      if (entry.stat.isSymbolicLink() &&
	        this._handleSymlink(entry, directory, path, item)) return;
	
	      // Files that present in current directory snapshot
	      // but absent in previous are added to watch list and
	      // emit `add` event.
	      if (item === target || !target && !previous.has(item)) {
	        this._readyCount++;
	
	        // ensure relativeness of path is preserved in case of watcher reuse
	        path = sysPath.join(dir, sysPath.relative(dir, path));
	
	        this._addToNodeFs(path, initialAdd, wh, depth + 1);
	      }
	    }.bind(this)).on('end', function() {
	      if (throttler) throttler.clear();
	      if (done) done();
	
	      // Files that absent in current directory snapshot
	      // but present in previous emit `remove` event
	      // and are removed from @watched[directory].
	      previous.children().filter(function(item) {
	        return item !== directory &&
	          current.indexOf(item) === -1 &&
	          // in case of intersecting globs;
	          // a path may have been filtered out of this readdir, but
	          // shouldn't be removed because it matches a different glob
	          (!wh.hasGlob || wh.filterPath({
	            fullPath: sysPath.resolve(directory, item)
	          }));
	      }).forEach(function(item) {
	        this._remove(directory, item);
	      }, this);
	    }.bind(this)).on('error', this._handleError.bind(this));
	  }.bind(this);
	
	  var closer;
	
	  if (this.options.depth == null || depth <= this.options.depth) {
	    if (!target) read(dir, initialAdd, callback);
	    closer = this._watchWithNodeFs(dir, function(dirPath, stats) {
	      // if current directory is removed, do nothing
	      if (stats && stats.mtime.getTime() === 0) return;
	
	      read(dirPath, false);
	    });
	  } else {
	    callback();
	  }
	  return closer;
	};
	
	// Private method: Handle added file, directory, or glob pattern.
	// Delegates call to _handleFile / _handleDir after checks.
	
	// * path       - string, path to file or directory.
	// * initialAdd - boolean, was the file added at watch instantiation?
	// * depth      - int, depth relative to user-supplied path
	// * target     - string, child path actually targeted for watch
	// * callback   - function, indicates whether the path was found or not
	
	// Returns nothing
	NodeFsHandler.prototype._addToNodeFs =
	function(path, initialAdd, priorWh, depth, target, callback) {
	  if (!callback) callback = Function.prototype;
	  var ready = this._emitReady;
	  if (this._isIgnored(path) || this.closed) {
	    ready();
	    return callback(null, false);
	  }
	
	  var wh = this._getWatchHelpers(path, depth);
	  if (!wh.hasGlob && priorWh) {
	    wh.hasGlob = priorWh.hasGlob;
	    wh.globFilter = priorWh.globFilter;
	    wh.filterPath = priorWh.filterPath;
	    wh.filterDir = priorWh.filterDir;
	  }
	
	  // evaluate what is at the path we're being asked to watch
	  fs[wh.statMethod](wh.watchPath, function(error, stats) {
	    if (this._handleError(error)) return callback(null, path);
	    if (this._isIgnored(wh.watchPath, stats)) {
	      ready();
	      return callback(null, false);
	    }
	
	    var initDir = function(dir, target) {
	      return this._handleDir(dir, stats, initialAdd, depth, target, wh, ready);
	    }.bind(this);
	
	    var closer;
	    if (stats.isDirectory()) {
	      closer = initDir(wh.watchPath, target);
	    } else if (stats.isSymbolicLink()) {
	      var parent = sysPath.dirname(wh.watchPath);
	      this._getWatchedDir(parent).add(wh.watchPath);
	      this._emit('add', wh.watchPath, stats);
	      closer = initDir(parent, path);
	
	      // preserve this symlink's target path
	      fs.realpath(path, function(error, targetPath) {
	        this._symlinkPaths[sysPath.resolve(path)] = targetPath;
	        ready();
	      }.bind(this));
	    } else {
	      closer = this._handleFile(wh.watchPath, stats, initialAdd, ready);
	    }
	
	    if (closer) this._closers[path] = closer;
	    callback(null, false);
	  }.bind(this));
	};
	
	module.exports = NodeFsHandler;
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var fs        =  __webpack_require__(264)
	  , path      =  __webpack_require__(4)
	  , minimatch =  __webpack_require__(289)
	  , toString  =  Object.prototype.toString
	  , si        =  __webpack_require__(293)
	  ;
	
	
	// Standard helpers
	function isFunction (obj) {
	  return toString.call(obj) === '[object Function]';
	}
	
	function isString (obj) {
	  return toString.call(obj) === '[object String]';
	}
	
	function isRegExp (obj) {
	  return toString.call(obj) === '[object RegExp]';
	}
	
	function isUndefined (obj) {
	  return obj === void 0;
	}
	
	/** 
	 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
	 * @param { Object }   opts     Options to specify root (start directory), filters and recursion depth
	 * @param { function } callback1  When callback2 is given calls back for each processed file - function (fileInfo) { ... },
	 *                                when callback2 is not given, it behaves like explained in callback2
	 * @param { function } callback2  Calls back once all files have been processed with an array of errors and file infos
	 *                                function (err, fileInfos) { ... }
	 */
	function readdir(opts, callback1, callback2) {
	  var stream
	    , handleError
	    , handleFatalError
	    , pending = 0
	    , errors = []
	    , readdirResult = {
	        directories: []
	      , files: []
	    }
	    , fileProcessed
	    , allProcessed
	    , realRoot
	    , aborted = false
	    , paused = false
	    ;
	
	  // If no callbacks were given we will use a streaming interface
	  if (isUndefined(callback1)) {
	    var api          =  __webpack_require__(294)();
	    stream           =  api.stream;
	    callback1        =  api.processEntry;
	    callback2        =  api.done;
	    handleError      =  api.handleError;
	    handleFatalError =  api.handleFatalError;
	
	    stream.on('close', function () { aborted = true; });
	    stream.on('pause', function () { paused = true; });
	    stream.on('resume', function () { paused = false; });
	  } else {
	    handleError      =  function (err) { errors.push(err); };
	    handleFatalError =  function (err) {
	      handleError(err);
	      allProcessed(errors, null);
	    };
	  }
	
	  if (isUndefined(opts)){
	    handleFatalError(new Error (
	      'Need to pass at least one argument: opts! \n' +
	      'https://github.com/thlorenz/readdirp#options'
	      )
	    );
	    return stream;
	  }
	
	  opts.root            =  opts.root            || '.';
	  opts.fileFilter      =  opts.fileFilter      || function() { return true; };
	  opts.directoryFilter =  opts.directoryFilter || function() { return true; };
	  opts.depth           =  typeof opts.depth === 'undefined' ? 999999999 : opts.depth;
	  opts.entryType       =  opts.entryType       || 'files';
	
	  var statfn = opts.lstat === true ? fs.lstat.bind(fs) : fs.stat.bind(fs);
	
	  if (isUndefined(callback2)) {
	    fileProcessed = function() { };
	    allProcessed = callback1;
	  } else {
	    fileProcessed = callback1;
	    allProcessed = callback2;
	  }
	
	  function normalizeFilter (filter) {
	
	    if (isUndefined(filter)) return undefined;
	
	    function isNegated (filters) {
	
	      function negated(f) { 
	        return f.indexOf('!') === 0; 
	      }
	
	      var some = filters.some(negated);
	      if (!some) {
	        return false;
	      } else {
	        if (filters.every(negated)) {
	          return true;
	        } else {
	          // if we detect illegal filters, bail out immediately
	          throw new Error(
	            'Cannot mix negated with non negated glob filters: ' + filters + '\n' +
	            'https://github.com/thlorenz/readdirp#filters'
	          );
	        }
	      }
	    }
	
	    // Turn all filters into a function
	    if (isFunction(filter)) {
	
	      return filter;
	
	    } else if (isString(filter)) {
	
	      return function (entryInfo) {
	        return minimatch(entryInfo.name, filter.trim());
	      };
	
	    } else if (filter && Array.isArray(filter)) {
	
	      if (filter) filter = filter.map(function (f) {
	        return f.trim();
	      });
	
	      return isNegated(filter) ?
	        // use AND to concat multiple negated filters
	        function (entryInfo) {
	          return filter.every(function (f) {
	            return minimatch(entryInfo.name, f);
	          });
	        }
	        :
	        // use OR to concat multiple inclusive filters
	        function (entryInfo) {
	          return filter.some(function (f) {
	            return minimatch(entryInfo.name, f);
	          });
	        };
	    }
	  }
	
	  function processDir(currentDir, entries, callProcessed) {
	    if (aborted) return;
	    var total = entries.length
	      , processed = 0
	      , entryInfos = []
	      ;
	
	    fs.realpath(currentDir, function(err, realCurrentDir) {
	      if (aborted) return;
	      if (err) {
	        handleError(err);
	        callProcessed(entryInfos);
	        return;
	      }
	
	      var relDir = path.relative(realRoot, realCurrentDir);
	
	      if (entries.length === 0) {
	        callProcessed([]);
	      } else {
	        entries.forEach(function (entry) { 
	
	          var fullPath = path.join(realCurrentDir, entry)
	            , relPath  = path.join(relDir, entry);
	
	          statfn(fullPath, function (err, stat) {
	            if (err) {
	              handleError(err);
	            } else {
	              entryInfos.push({
	                  name          :  entry
	                , path          :  relPath   // relative to root
	                , fullPath      :  fullPath
	
	                , parentDir     :  relDir    // relative to root
	                , fullParentDir :  realCurrentDir
	
	                , stat          :  stat
	              });
	            }
	            processed++;
	            if (processed === total) callProcessed(entryInfos);
	          });
	        });
	      }
	    });
	  }
	
	  function readdirRec(currentDir, depth, callCurrentDirProcessed) {
	    var args = arguments;
	    if (aborted) return;
	    if (paused) {
	      si(function () {
	        readdirRec.apply(null, args);
	      })
	      return;
	    } 
	
	    fs.readdir(currentDir, function (err, entries) {
	      if (err) {
	        handleError(err);
	        callCurrentDirProcessed();
	        return;
	      }
	
	      processDir(currentDir, entries, function(entryInfos) {
	
	        var subdirs = entryInfos
	          .filter(function (ei) { return ei.stat.isDirectory() && opts.directoryFilter(ei); });
	
	        subdirs.forEach(function (di) {
	          if(opts.entryType === 'directories' || opts.entryType === 'both' || opts.entryType === 'all') {
	            fileProcessed(di);
	          }
	          readdirResult.directories.push(di); 
	        });
	
	        entryInfos
	          .filter(function(ei) {
	            var isCorrectType = opts.entryType === 'all' ?
	              !ei.stat.isDirectory() : ei.stat.isFile() || ei.stat.isSymbolicLink();
	            return isCorrectType && opts.fileFilter(ei);
	          })
	          .forEach(function (fi) {
	            if(opts.entryType === 'files' || opts.entryType === 'both' || opts.entryType === 'all') {
	              fileProcessed(fi);
	            }
	            readdirResult.files.push(fi); 
	          });
	
	        var pendingSubdirs = subdirs.length;
	
	        // Be done if no more subfolders exist or we reached the maximum desired depth
	        if(pendingSubdirs === 0 || depth === opts.depth) {
	          callCurrentDirProcessed();
	        } else {
	          // recurse into subdirs, keeping track of which ones are done 
	          // and call back once all are processed
	          subdirs.forEach(function (subdir) {
	            readdirRec(subdir.fullPath, depth + 1, function () {
	              pendingSubdirs = pendingSubdirs - 1;
	              if(pendingSubdirs === 0) { 
	                callCurrentDirProcessed();
	              }
	            });
	          });
	        }
	      });
	    });
	  }
	
	  // Validate and normalize filters
	  try {
	    opts.fileFilter = normalizeFilter(opts.fileFilter);
	    opts.directoryFilter = normalizeFilter(opts.directoryFilter);
	  } catch (err) {
	    // if we detect illegal filters, bail out immediately
	    handleFatalError(err);
	    return stream;
	  }
	
	  // If filters were valid get on with the show
	  fs.realpath(opts.root, function(err, res) {
	    if (err) {
	      handleFatalError(err);
	      return stream;
	    }
	
	    realRoot = res;
	    readdirRec(opts.root, 0, function () { 
	      // All errors are collected into the errors array
	      if (errors.length > 0) {
	        allProcessed(errors, readdirResult); 
	      } else {
	        allProcessed(null, readdirResult);
	      }
	    });
	  });
	
	  return stream;
	}
	
	module.exports = readdir;


/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	var polyfills = __webpack_require__(265)
	var legacy = __webpack_require__(268)
	var queue = []
	
	var util = __webpack_require__(287)
	
	function noop () {}
	
	var debug = noop
	if (util.debuglog)
	  debug = util.debuglog('gfs4')
	else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
	  debug = function() {
	    var m = util.format.apply(util, arguments)
	    m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ')
	    console.error(m)
	  }
	
	if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
	  process.on('exit', function() {
	    debug(queue)
	    __webpack_require__(288).equal(queue.length, 0)
	  })
	}
	
	module.exports = patch(__webpack_require__(266))
	if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH) {
	  module.exports = patch(fs)
	}
	
	// Always patch fs.close/closeSync, because we want to
	// retry() whenever a close happens *anywhere* in the program.
	// This is essential when multiple graceful-fs instances are
	// in play at the same time.
	module.exports.close =
	fs.close = (function (fs$close) { return function (fd, cb) {
	  return fs$close.call(fs, fd, function (err) {
	    if (!err)
	      retry()
	
	    if (typeof cb === 'function')
	      cb.apply(this, arguments)
	  })
	}})(fs.close)
	
	module.exports.closeSync =
	fs.closeSync = (function (fs$closeSync) { return function (fd) {
	  // Note that graceful-fs also retries when fs.closeSync() fails.
	  // Looks like a bug to me, although it's probably a harmless one.
	  var rval = fs$closeSync.apply(fs, arguments)
	  retry()
	  return rval
	}})(fs.closeSync)
	
	function patch (fs) {
	  // Everything that references the open() function needs to be in here
	  polyfills(fs)
	  fs.gracefulify = patch
	  fs.FileReadStream = ReadStream;  // Legacy name.
	  fs.FileWriteStream = WriteStream;  // Legacy name.
	  fs.createReadStream = createReadStream
	  fs.createWriteStream = createWriteStream
	  var fs$readFile = fs.readFile
	  fs.readFile = readFile
	  function readFile (path, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$readFile(path, options, cb)
	
	    function go$readFile (path, options, cb) {
	      return fs$readFile(path, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$readFile, [path, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$writeFile = fs.writeFile
	  fs.writeFile = writeFile
	  function writeFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$writeFile(path, data, options, cb)
	
	    function go$writeFile (path, data, options, cb) {
	      return fs$writeFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$writeFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$appendFile = fs.appendFile
	  if (fs$appendFile)
	    fs.appendFile = appendFile
	  function appendFile (path, data, options, cb) {
	    if (typeof options === 'function')
	      cb = options, options = null
	
	    return go$appendFile(path, data, options, cb)
	
	    function go$appendFile (path, data, options, cb) {
	      return fs$appendFile(path, data, options, function (err) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$appendFile, [path, data, options, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  var fs$readdir = fs.readdir
	  fs.readdir = readdir
	  function readdir (path, options, cb) {
	    var args = [path]
	    if (typeof options !== 'function') {
	      args.push(options)
	    } else {
	      cb = options
	    }
	    args.push(go$readdir$cb)
	
	    return go$readdir(args)
	
	    function go$readdir$cb (err, files) {
	      if (files && files.sort)
	        files.sort()
	
	      if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	        enqueue([go$readdir, [args]])
	      else {
	        if (typeof cb === 'function')
	          cb.apply(this, arguments)
	        retry()
	      }
	    }
	  }
	
	  function go$readdir (args) {
	    return fs$readdir.apply(fs, args)
	  }
	
	  if (process.version.substr(0, 4) === 'v0.8') {
	    var legStreams = legacy(fs)
	    ReadStream = legStreams.ReadStream
	    WriteStream = legStreams.WriteStream
	  }
	
	  var fs$ReadStream = fs.ReadStream
	  ReadStream.prototype = Object.create(fs$ReadStream.prototype)
	  ReadStream.prototype.open = ReadStream$open
	
	  var fs$WriteStream = fs.WriteStream
	  WriteStream.prototype = Object.create(fs$WriteStream.prototype)
	  WriteStream.prototype.open = WriteStream$open
	
	  fs.ReadStream = ReadStream
	  fs.WriteStream = WriteStream
	
	  function ReadStream (path, options) {
	    if (this instanceof ReadStream)
	      return fs$ReadStream.apply(this, arguments), this
	    else
	      return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
	  }
	
	  function ReadStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        if (that.autoClose)
	          that.destroy()
	
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	        that.read()
	      }
	    })
	  }
	
	  function WriteStream (path, options) {
	    if (this instanceof WriteStream)
	      return fs$WriteStream.apply(this, arguments), this
	    else
	      return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
	  }
	
	  function WriteStream$open () {
	    var that = this
	    open(that.path, that.flags, that.mode, function (err, fd) {
	      if (err) {
	        that.destroy()
	        that.emit('error', err)
	      } else {
	        that.fd = fd
	        that.emit('open', fd)
	      }
	    })
	  }
	
	  function createReadStream (path, options) {
	    return new ReadStream(path, options)
	  }
	
	  function createWriteStream (path, options) {
	    return new WriteStream(path, options)
	  }
	
	  var fs$open = fs.open
	  fs.open = open
	  function open (path, flags, mode, cb) {
	    if (typeof mode === 'function')
	      cb = mode, mode = null
	
	    return go$open(path, flags, mode, cb)
	
	    function go$open (path, flags, mode, cb) {
	      return fs$open(path, flags, mode, function (err, fd) {
	        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
	          enqueue([go$open, [path, flags, mode, cb]])
	        else {
	          if (typeof cb === 'function')
	            cb.apply(this, arguments)
	          retry()
	        }
	      })
	    }
	  }
	
	  return fs
	}
	
	function enqueue (elem) {
	  debug('ENQUEUE', elem[0].name, elem[1])
	  queue.push(elem)
	}
	
	function retry () {
	  var elem = queue.shift()
	  if (elem) {
	    debug('RETRY', elem[0].name, elem[1])
	    elem[0].apply(null, elem[1])
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var fs = __webpack_require__(266)
	var constants = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"constants\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	
	var origCwd = process.cwd
	var cwd = null
	
	var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform
	
	process.cwd = function() {
	  if (!cwd)
	    cwd = origCwd.call(process)
	  return cwd
	}
	try {
	  process.cwd()
	} catch (er) {}
	
	var chdir = process.chdir
	process.chdir = function(d) {
	  cwd = null
	  chdir.call(process, d)
	}
	
	module.exports = patch
	
	function patch (fs) {
	  // (re-)implement some things that are known busted or missing.
	
	  // lchmod, broken prior to 0.6.2
	  // back-port the fix here.
	  if (constants.hasOwnProperty('O_SYMLINK') &&
	      process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
	    patchLchmod(fs)
	  }
	
	  // lutimes implementation, or no-op
	  if (!fs.lutimes) {
	    patchLutimes(fs)
	  }
	
	  // https://github.com/isaacs/node-graceful-fs/issues/4
	  // Chown should not fail on einval or eperm if non-root.
	  // It should not fail on enosys ever, as this just indicates
	  // that a fs doesn't support the intended operation.
	
	  fs.chown = chownFix(fs.chown)
	  fs.fchown = chownFix(fs.fchown)
	  fs.lchown = chownFix(fs.lchown)
	
	  fs.chmod = chmodFix(fs.chmod)
	  fs.fchmod = chmodFix(fs.fchmod)
	  fs.lchmod = chmodFix(fs.lchmod)
	
	  fs.chownSync = chownFixSync(fs.chownSync)
	  fs.fchownSync = chownFixSync(fs.fchownSync)
	  fs.lchownSync = chownFixSync(fs.lchownSync)
	
	  fs.chmodSync = chmodFixSync(fs.chmodSync)
	  fs.fchmodSync = chmodFixSync(fs.fchmodSync)
	  fs.lchmodSync = chmodFixSync(fs.lchmodSync)
	
	  fs.stat = statFix(fs.stat)
	  fs.fstat = statFix(fs.fstat)
	  fs.lstat = statFix(fs.lstat)
	
	  fs.statSync = statFixSync(fs.statSync)
	  fs.fstatSync = statFixSync(fs.fstatSync)
	  fs.lstatSync = statFixSync(fs.lstatSync)
	
	  // if lchmod/lchown do not exist, then make them no-ops
	  if (!fs.lchmod) {
	    fs.lchmod = function (path, mode, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchmodSync = function () {}
	  }
	  if (!fs.lchown) {
	    fs.lchown = function (path, uid, gid, cb) {
	      if (cb) process.nextTick(cb)
	    }
	    fs.lchownSync = function () {}
	  }
	
	  // on Windows, A/V software can lock the directory, causing this
	  // to fail with an EACCES or EPERM if the directory contains newly
	  // created files.  Try again on failure, for up to 60 seconds.
	
	  // Set the timeout this long because some Windows Anti-Virus, such as Parity
	  // bit9, may lock files for up to a minute, causing npm package install
	  // failures. Also, take care to yield the scheduler. Windows scheduling gives
	  // CPU to a busy looping process, which can cause the program causing the lock
	  // contention to be starved of CPU by node, so the contention doesn't resolve.
	  if (platform === "win32") {
	    fs.rename = (function (fs$rename) { return function (from, to, cb) {
	      var start = Date.now()
	      var backoff = 0;
	      fs$rename(from, to, function CB (er) {
	        if (er
	            && (er.code === "EACCES" || er.code === "EPERM")
	            && Date.now() - start < 60000) {
	          setTimeout(function() {
	            fs.stat(to, function (stater, st) {
	              if (stater && stater.code === "ENOENT")
	                fs$rename(from, to, CB);
	              else
	                cb(er)
	            })
	          }, backoff)
	          if (backoff < 100)
	            backoff += 10;
	          return;
	        }
	        if (cb) cb(er)
	      })
	    }})(fs.rename)
	  }
	
	  // if read() returns EAGAIN, then just try it again.
	  fs.read = (function (fs$read) { return function (fd, buffer, offset, length, position, callback_) {
	    var callback
	    if (callback_ && typeof callback_ === 'function') {
	      var eagCounter = 0
	      callback = function (er, _, __) {
	        if (er && er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	        }
	        callback_.apply(this, arguments)
	      }
	    }
	    return fs$read.call(fs, fd, buffer, offset, length, position, callback)
	  }})(fs.read)
	
	  fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
	    var eagCounter = 0
	    while (true) {
	      try {
	        return fs$readSync.call(fs, fd, buffer, offset, length, position)
	      } catch (er) {
	        if (er.code === 'EAGAIN' && eagCounter < 10) {
	          eagCounter ++
	          continue
	        }
	        throw er
	      }
	    }
	  }})(fs.readSync)
	}
	
	function patchLchmod (fs) {
	  fs.lchmod = function (path, mode, callback) {
	    fs.open( path
	           , constants.O_WRONLY | constants.O_SYMLINK
	           , mode
	           , function (err, fd) {
	      if (err) {
	        if (callback) callback(err)
	        return
	      }
	      // prefer to return the chmod error, if one occurs,
	      // but still try to close, and report closing errors if they occur.
	      fs.fchmod(fd, mode, function (err) {
	        fs.close(fd, function(err2) {
	          if (callback) callback(err || err2)
	        })
	      })
	    })
	  }
	
	  fs.lchmodSync = function (path, mode) {
	    var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode)
	
	    // prefer to return the chmod error, if one occurs,
	    // but still try to close, and report closing errors if they occur.
	    var threw = true
	    var ret
	    try {
	      ret = fs.fchmodSync(fd, mode)
	      threw = false
	    } finally {
	      if (threw) {
	        try {
	          fs.closeSync(fd)
	        } catch (er) {}
	      } else {
	        fs.closeSync(fd)
	      }
	    }
	    return ret
	  }
	}
	
	function patchLutimes (fs) {
	  if (constants.hasOwnProperty("O_SYMLINK")) {
	    fs.lutimes = function (path, at, mt, cb) {
	      fs.open(path, constants.O_SYMLINK, function (er, fd) {
	        if (er) {
	          if (cb) cb(er)
	          return
	        }
	        fs.futimes(fd, at, mt, function (er) {
	          fs.close(fd, function (er2) {
	            if (cb) cb(er || er2)
	          })
	        })
	      })
	    }
	
	    fs.lutimesSync = function (path, at, mt) {
	      var fd = fs.openSync(path, constants.O_SYMLINK)
	      var ret
	      var threw = true
	      try {
	        ret = fs.futimesSync(fd, at, mt)
	        threw = false
	      } finally {
	        if (threw) {
	          try {
	            fs.closeSync(fd)
	          } catch (er) {}
	        } else {
	          fs.closeSync(fd)
	        }
	      }
	      return ret
	    }
	
	  } else {
	    fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb) }
	    fs.lutimesSync = function () {}
	  }
	}
	
	function chmodFix (orig) {
	  if (!orig) return orig
	  return function (target, mode, cb) {
	    return orig.call(fs, target, mode, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function chmodFixSync (orig) {
	  if (!orig) return orig
	  return function (target, mode) {
	    try {
	      return orig.call(fs, target, mode)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}
	
	
	function chownFix (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid, cb) {
	    return orig.call(fs, target, uid, gid, function (er) {
	      if (chownErOk(er)) er = null
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function chownFixSync (orig) {
	  if (!orig) return orig
	  return function (target, uid, gid) {
	    try {
	      return orig.call(fs, target, uid, gid)
	    } catch (er) {
	      if (!chownErOk(er)) throw er
	    }
	  }
	}
	
	
	function statFix (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target, cb) {
	    return orig.call(fs, target, function (er, stats) {
	      if (!stats) return cb.apply(this, arguments)
	      if (stats.uid < 0) stats.uid += 0x100000000
	      if (stats.gid < 0) stats.gid += 0x100000000
	      if (cb) cb.apply(this, arguments)
	    })
	  }
	}
	
	function statFixSync (orig) {
	  if (!orig) return orig
	  // Older versions of Node erroneously returned signed integers for
	  // uid + gid.
	  return function (target) {
	    var stats = orig.call(fs, target)
	    if (stats.uid < 0) stats.uid += 0x100000000
	    if (stats.gid < 0) stats.gid += 0x100000000
	    return stats;
	  }
	}
	
	// ENOSYS means that the fs doesn't support the op. Just ignore
	// that, because it doesn't matter.
	//
	// if there's no getuid, or if getuid() is something other
	// than 0, and the error is EINVAL or EPERM, then just ignore
	// it.
	//
	// This specific case is a silent failure in cp, install, tar,
	// and most other unix tools that manage permissions.
	//
	// When running as root, or if other types of errors are
	// encountered, then it's strict.
	function chownErOk (er) {
	  if (!er)
	    return true
	
	  if (er.code === "ENOSYS")
	    return true
	
	  var nonroot = !process.getuid || process.getuid() !== 0
	  if (nonroot) {
	    if (er.code === "EINVAL" || er.code === "EPERM")
	      return true
	  }
	
	  return false
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict'
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()))
	
	module.exports = clone(fs)
	
	function clone (obj) {
	  if (obj === null || typeof obj !== 'object')
	    return obj
	
	  if (obj instanceof Object)
	    var copy = { __proto__: obj.__proto__ }
	  else
	    var copy = Object.create(null)
	
	  Object.getOwnPropertyNames(obj).forEach(function (key) {
	    Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key))
	  })
	
	  return copy
	}


/***/ },
/* 267 */,
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = __webpack_require__(269).Stream
	
	module.exports = legacy
	
	function legacy (fs) {
	  return {
	    ReadStream: ReadStream,
	    WriteStream: WriteStream
	  }
	
	  function ReadStream (path, options) {
	    if (!(this instanceof ReadStream)) return new ReadStream(path, options);
	
	    Stream.call(this);
	
	    var self = this;
	
	    this.path = path;
	    this.fd = null;
	    this.readable = true;
	    this.paused = false;
	
	    this.flags = 'r';
	    this.mode = 438; /*=0666*/
	    this.bufferSize = 64 * 1024;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.encoding) this.setEncoding(this.encoding);
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.end === undefined) {
	        this.end = Infinity;
	      } else if ('number' !== typeof this.end) {
	        throw TypeError('end must be a Number');
	      }
	
	      if (this.start > this.end) {
	        throw new Error('start must be <= end');
	      }
	
	      this.pos = this.start;
	    }
	
	    if (this.fd !== null) {
	      process.nextTick(function() {
	        self._read();
	      });
	      return;
	    }
	
	    fs.open(this.path, this.flags, this.mode, function (err, fd) {
	      if (err) {
	        self.emit('error', err);
	        self.readable = false;
	        return;
	      }
	
	      self.fd = fd;
	      self.emit('open', fd);
	      self._read();
	    })
	  }
	
	  function WriteStream (path, options) {
	    if (!(this instanceof WriteStream)) return new WriteStream(path, options);
	
	    Stream.call(this);
	
	    this.path = path;
	    this.fd = null;
	    this.writable = true;
	
	    this.flags = 'w';
	    this.encoding = 'binary';
	    this.mode = 438; /*=0666*/
	    this.bytesWritten = 0;
	
	    options = options || {};
	
	    // Mixin options into this
	    var keys = Object.keys(options);
	    for (var index = 0, length = keys.length; index < length; index++) {
	      var key = keys[index];
	      this[key] = options[key];
	    }
	
	    if (this.start !== undefined) {
	      if ('number' !== typeof this.start) {
	        throw TypeError('start must be a Number');
	      }
	      if (this.start < 0) {
	        throw new Error('start must be >= zero');
	      }
	
	      this.pos = this.start;
	    }
	
	    this.busy = false;
	    this._queue = [];
	
	    if (this.fd === null) {
	      this._open = fs.open;
	      this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
	      this.flush();
	    }
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	module.exports = Stream;
	
	var EE = __webpack_require__(216).EventEmitter;
	var inherits = __webpack_require__(261);
	
	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(270);
	Stream.Writable = __webpack_require__(283);
	Stream.Duplex = __webpack_require__(284);
	Stream.Transform = __webpack_require__(285);
	Stream.PassThrough = __webpack_require__(286);
	
	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;
	
	
	
	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.
	
	function Stream() {
	  EE.call(this);
	}
	
	Stream.prototype.pipe = function(dest, options) {
	  var source = this;
	
	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }
	
	  source.on('data', ondata);
	
	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }
	
	  dest.on('drain', ondrain);
	
	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }
	
	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    dest.end();
	  }
	
	
	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;
	
	    if (typeof dest.destroy === 'function') dest.destroy();
	  }
	
	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }
	
	  source.on('error', onerror);
	  dest.on('error', onerror);
	
	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);
	
	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);
	
	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);
	
	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);
	
	    dest.removeListener('close', cleanup);
	  }
	
	  source.on('end', cleanup);
	  source.on('close', cleanup);
	
	  dest.on('close', cleanup);
	
	  dest.emit('pipe', source);
	
	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(269); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(271);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(278);
	exports.Duplex = __webpack_require__(277);
	exports.Transform = __webpack_require__(281);
	exports.PassThrough = __webpack_require__(282);
	
	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	module.exports = Readable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(272);
	/*</replacement>*/
	
	/*<replacement>*/
	var isArray = __webpack_require__(233);
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Readable.ReadableState = ReadableState;
	
	/*<replacement>*/
	var EE = __webpack_require__(216).EventEmitter;
	
	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(269);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(216).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(7).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(273);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(274);
	util.inherits = __webpack_require__(261);
	/*</replacement>*/
	
	/*<replacement>*/
	var debugUtil = __webpack_require__(275);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/
	
	var BufferList = __webpack_require__(276);
	var StringDecoder;
	
	util.inherits(Readable, Stream);
	
	function prependListener(emitter, event, fn) {
	  // Sadly this is not cacheable as some libraries bundle their own
	  // event emitter implementation with them.
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}
	
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(277);
	
	  options = options || {};
	
	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
	
	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;
	
	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;
	
	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;
	
	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(280).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}
	
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(277);
	
	  if (!(this instanceof Readable)) return new Readable(options);
	
	  this._readableState = new ReadableState(options, this);
	
	  // legacy
	  this.readable = true;
	
	  if (options && typeof options.read === 'function') this._read = options.read;
	
	  Stream.call(this);
	}
	
	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;
	
	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }
	
	  return readableAddChunk(this, state, chunk, encoding, false);
	};
	
	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};
	
	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};
	
	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }
	
	      if (!addToFront) state.reading = false;
	
	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
	
	          if (state.needReadable) emitReadable(stream);
	        }
	      }
	
	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }
	
	  return needMoreData(state);
	}
	
	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}
	
	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(280).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};
	
	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}
	
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}
	
	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;
	
	  if (n !== 0) state.emittedReadable = false;
	
	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }
	
	  n = howMuchToRead(n, state);
	
	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }
	
	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.
	
	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);
	
	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }
	
	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }
	
	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;
	
	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }
	
	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;
	
	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }
	
	  if (ret !== null) this.emit('data', ret);
	
	  return ret;
	};
	
	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}
	
	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;
	
	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}
	
	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}
	
	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}
	
	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}
	
	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}
	
	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('_read() is not implemented'));
	};
	
	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;
	
	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
	
	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
	
	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);
	
	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }
	
	  function onend() {
	    debug('onend');
	    dest.end();
	  }
	
	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);
	
	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);
	
	    cleanedUp = true;
	
	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }
	
	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }
	
	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }
	
	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);
	
	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);
	
	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }
	
	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);
	
	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }
	
	  return dest;
	};
	
	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}
	
	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;
	
	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;
	
	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;
	
	    if (!dest) dest = state.pipes;
	
	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }
	
	  // slow case. multiple pipe destinations.
	
	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	
	    for (var i = 0; i < len; i++) {
	      dests[i].emit('unpipe', this);
	    }return this;
	  }
	
	  // try to find the right one.
	  var index = indexOf(state.pipes, dest);
	  if (index === -1) return this;
	
	  state.pipes.splice(index, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];
	
	  dest.emit('unpipe', this);
	
	  return this;
	};
	
	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);
	
	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }
	
	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;
	
	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}
	
	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};
	
	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}
	
	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }
	
	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}
	
	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};
	
	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}
	
	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;
	
	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }
	
	    self.push(null);
	  });
	
	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);
	
	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;
	
	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });
	
	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }
	
	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });
	
	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };
	
	  return self;
	};
	
	// exposed for testing purposes only.
	Readable._fromList = fromList;
	
	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;
	
	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }
	
	  return ret;
	}
	
	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}
	
	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}
	
	function endReadable(stream) {
	  var state = stream._readableState;
	
	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');
	
	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}
	
	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}
	
	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}
	
	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 273 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var buffer = __webpack_require__(7);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }
	
	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	
	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;
	
	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;
	
	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;
	
	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;
	
	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;
	
	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;
	
	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	
	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;
	
	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;
	
	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;
	
	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;
	
	exports.isBuffer = Buffer.isBuffer;
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 275 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Buffer = __webpack_require__(7).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(273);
	/*</replacement>*/
	
	module.exports = BufferList;
	
	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}
	
	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};
	
	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};
	
	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};
	
	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};
	
	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};
	
	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ },
/* 277 */
/***/ function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.
	
	'use strict';
	
	/*<replacement>*/
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/
	
	module.exports = Duplex;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(272);
	/*</replacement>*/
	
	/*<replacement>*/
	var util = __webpack_require__(274);
	util.inherits = __webpack_require__(261);
	/*</replacement>*/
	
	var Readable = __webpack_require__(271);
	var Writable = __webpack_require__(278);
	
	util.inherits(Duplex, Readable);
	
	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}
	
	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);
	
	  Readable.call(this, options);
	  Writable.call(this, options);
	
	  if (options && options.readable === false) this.readable = false;
	
	  if (options && options.writable === false) this.writable = false;
	
	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;
	
	  this.once('end', onend);
	}
	
	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;
	
	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}
	
	function onEndNT(self) {
	  self.end();
	}
	
	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ },
/* 278 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.
	
	'use strict';
	
	module.exports = Writable;
	
	/*<replacement>*/
	var processNextTick = __webpack_require__(272);
	/*</replacement>*/
	
	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/
	
	/*<replacement>*/
	var Duplex;
	/*</replacement>*/
	
	Writable.WritableState = WritableState;
	
	/*<replacement>*/
	var util = __webpack_require__(274);
	util.inherits = __webpack_require__(261);
	/*</replacement>*/
	
	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(279)
	};
	/*</replacement>*/
	
	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(269);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(216).EventEmitter;
	  }
	})();
	/*</replacement>*/
	
	var Buffer = __webpack_require__(7).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(273);
	/*</replacement>*/
	
	util.inherits(Writable, Stream);
	
	function nop() {}
	
	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}
	
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(277);
	
	  options = options || {};
	
	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;
	
	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
	
	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;
	
	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;
	
	  // drain event flag.
	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;
	
	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;
	
	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';
	
	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;
	
	  // a flag to see when we're in the middle of a write.
	  this.writing = false;
	
	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;
	
	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;
	
	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;
	
	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };
	
	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;
	
	  // the amount that is being written when _write is called.
	  this.writelen = 0;
	
	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;
	
	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;
	
	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;
	
	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	
	  // count buffered requests
	  this.bufferedRequestCount = 0;
	
	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}
	
	WritableState.prototype.getBuffer = function getBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};
	
	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();
	
	// Test _writableState for inheritance to account for Duplex streams,
	// whose prototype chain only points to Readable.
	var realHasInstance;
	if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
	  realHasInstance = Function.prototype[Symbol.hasInstance];
	  Object.defineProperty(Writable, Symbol.hasInstance, {
	    value: function (object) {
	      if (realHasInstance.call(this, object)) return true;
	
	      return object && object._writableState instanceof WritableState;
	    }
	  });
	} else {
	  realHasInstance = function (object) {
	    return object instanceof this;
	  };
	}
	
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(277);
	
	  // Writable ctor is applied to Duplexes, too.
	  // `realHasInstance` is necessary because using plain `instanceof`
	  // would return false, as no `_writableState` property is attached.
	
	  // Trying to use the custom `instanceof` for Writable here will also break the
	  // Node.js LazyTransform implementation, which has a non-trivial getter for
	  // `_writableState` that would lead to infinite recursion.
	  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
	    return new Writable(options);
	  }
	
	  this._writableState = new WritableState(options, this);
	
	  // legacy.
	  this.writable = true;
	
	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;
	
	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }
	
	  Stream.call(this);
	}
	
	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};
	
	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}
	
	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}
	
	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;
	
	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
	
	  if (typeof cb !== 'function') cb = nop;
	
	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }
	
	  return ret;
	};
	
	Writable.prototype.cork = function () {
	  var state = this._writableState;
	
	  state.corked++;
	};
	
	Writable.prototype.uncork = function () {
	  var state = this._writableState;
	
	  if (state.corked) {
	    state.corked--;
	
	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};
	
	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};
	
	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}
	
	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	
	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;
	
	  state.length += len;
	
	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;
	
	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }
	
	  return ret;
	}
	
	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}
	
	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);
	
	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}
	
	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}
	
	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;
	
	  onwriteStateUpdate(state);
	
	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);
	
	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }
	
	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}
	
	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}
	
	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}
	
	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;
	
	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;
	
	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }
	
	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);
	
	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;
	
	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }
	
	    if (entry === null) state.lastBufferedRequest = null;
	  }
	
	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}
	
	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('_write() is not implemented'));
	};
	
	Writable.prototype._writev = null;
	
	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;
	
	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }
	
	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);
	
	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }
	
	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};
	
	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}
	
	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}
	
	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}
	
	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}
	
	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;
	
	  this.next = null;
	  this.entry = null;
	
	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(11).setImmediate))

/***/ },
/* 279 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */
	
	module.exports = deprecate;
	
	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */
	
	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }
	
	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }
	
	  return deprecated;
	}
	
	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */
	
	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var Buffer = __webpack_require__(7).Buffer;
	
	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }
	
	
	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}
	
	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }
	
	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};
	
	
	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;
	
	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;
	
	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }
	
	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);
	
	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
	
	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;
	
	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }
	
	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);
	
	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }
	
	  charStr += buffer.toString(this.encoding, 0, end);
	
	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }
	
	  // or just emit the charStr
	  return charStr;
	};
	
	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;
	
	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];
	
	    // See http://en.wikipedia.org/wiki/UTF-8#Description
	
	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }
	
	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }
	
	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};
	
	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);
	
	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }
	
	  return res;
	};
	
	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}
	
	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}
	
	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 281 */
/***/ function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.
	
	'use strict';
	
	module.exports = Transform;
	
	var Duplex = __webpack_require__(277);
	
	/*<replacement>*/
	var util = __webpack_require__(274);
	util.inherits = __webpack_require__(261);
	/*</replacement>*/
	
	util.inherits(Transform, Duplex);
	
	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };
	
	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}
	
	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;
	
	  var cb = ts.writecb;
	
	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));
	
	  ts.writechunk = null;
	  ts.writecb = null;
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  cb(er);
	
	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}
	
	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);
	
	  Duplex.call(this, options);
	
	  this._transformState = new TransformState(this);
	
	  var stream = this;
	
	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;
	
	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;
	
	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;
	
	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }
	
	  // When the writable side finishes, then flush out anything remaining.
	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er, data) {
	      done(stream, er, data);
	    });else done(stream);
	  });
	}
	
	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};
	
	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('_transform() is not implemented');
	};
	
	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};
	
	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;
	
	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};
	
	function done(stream, er, data) {
	  if (er) return stream.emit('error', er);
	
	  if (data !== null && data !== undefined) stream.push(data);
	
	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;
	
	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');
	
	  if (ts.transforming) throw new Error('Calling transform done when still transforming');
	
	  return stream.push(null);
	}

/***/ },
/* 282 */
/***/ function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.
	
	'use strict';
	
	module.exports = PassThrough;
	
	var Transform = __webpack_require__(281);
	
	/*<replacement>*/
	var util = __webpack_require__(274);
	util.inherits = __webpack_require__(261);
	/*</replacement>*/
	
	util.inherits(PassThrough, Transform);
	
	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);
	
	  Transform.call(this, options);
	}
	
	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(278)


/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(277)


/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(281)


/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(282)


/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = (__webpack_require__(3))(54);

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:
	
	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }
	
	  var x = a.length;
	  var y = b.length;
	
	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }
	
	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}
	
	// based on node assert, original notice:
	
	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	var util = __webpack_require__(287);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.
	
	var assert = module.exports = ok;
	
	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })
	
	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;
	
	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }
	
	      this.stack = out;
	    }
	  }
	};
	
	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);
	
	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}
	
	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.
	
	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.
	
	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}
	
	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;
	
	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.
	
	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;
	
	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);
	
	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};
	
	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);
	
	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};
	
	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);
	
	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};
	
	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};
	
	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;
	
	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();
	
	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;
	
	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;
	
	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;
	
	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};
	
	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }
	
	    memos.actual.push(actual);
	    memos.expected.push(expected);
	
	    return objEquiv(actual, expected, strict, memos);
	  }
	}
	
	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}
	
	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}
	
	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);
	
	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};
	
	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}
	
	
	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);
	
	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};
	
	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);
	
	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};
	
	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }
	
	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }
	
	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }
	
	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }
	
	  return expected.call({}, actual) === true;
	}
	
	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}
	
	function _throws(shouldThrow, block, expected, message) {
	  var actual;
	
	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }
	
	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }
	
	  actual = _tryBlock(block);
	
	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');
	
	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }
	
	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;
	
	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }
	
	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}
	
	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);
	
	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};
	
	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};
	
	assert.ifError = function(err) { if (err) throw err; };
	
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch
	
	var path = { sep: '/' }
	try {
	  path = __webpack_require__(4)
	} catch (er) {}
	
	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(290)
	
	var plTypes = {
	  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
	  '?': { open: '(?:', close: ')?' },
	  '+': { open: '(?:', close: ')+' },
	  '*': { open: '(?:', close: ')*' },
	  '@': { open: '(?:', close: ')' }
	}
	
	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'
	
	// * => any number of characters
	var star = qmark + '*?'
	
	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'
	
	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'
	
	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')
	
	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}
	
	// normalizes slashes.
	var slashSplit = /\/+/
	
	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}
	
	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}
	
	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch
	
	  var orig = minimatch
	
	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }
	
	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }
	
	  return m
	}
	
	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}
	
	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }
	
	  if (!options) options = {}
	
	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }
	
	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''
	
	  return new Minimatch(pattern, options).match(p)
	}
	
	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }
	
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }
	
	  if (!options) options = {}
	  pattern = pattern.trim()
	
	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }
	
	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false
	
	  // make the set of regexps etc.
	  this.make()
	}
	
	Minimatch.prototype.debug = function () {}
	
	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return
	
	  var pattern = this.pattern
	  var options = this.options
	
	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }
	
	  // step 1: figure out negation, etc.
	  this.parseNegate()
	
	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()
	
	  if (options.debug) this.debug = console.error
	
	  this.debug(this.pattern, set)
	
	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })
	
	  this.debug(this.pattern, set)
	
	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)
	
	  this.debug(this.pattern, set)
	
	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })
	
	  this.debug(this.pattern, set)
	
	  this.set = set
	}
	
	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0
	
	  if (options.nonegate) return
	
	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }
	
	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}
	
	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}
	
	Minimatch.prototype.braceExpand = braceExpand
	
	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }
	
	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern
	
	  if (typeof pattern === 'undefined') {
	    throw new TypeError('undefined pattern')
	  }
	
	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }
	
	  return expand(pattern)
	}
	
	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  if (pattern.length > 1024 * 64) {
	    throw new TypeError('pattern is too long')
	  }
	
	  var options = this.options
	
	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''
	
	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this
	
	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }
	
	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)
	
	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }
	
	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false
	
	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue
	
	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)
	
	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }
	
	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue
	
	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }
	
	        if (!stateChar) {
	          re += '\\('
	          continue
	        }
	
	        patternListStack.push({
	          type: stateChar,
	          start: i - 1,
	          reStart: re.length,
	          open: plTypes[stateChar].open,
	          close: plTypes[stateChar].close
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue
	
	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }
	
	        clearStateChar()
	        hasMagic = true
	        var pl = patternListStack.pop()
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        re += pl.close
	        if (pl.type === '!') {
	          negativeLists.push(pl)
	        }
	        pl.reEnd = re.length
	      continue
	
	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }
	
	        clearStateChar()
	        re += '|'
	      continue
	
	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()
	
	        if (inClass) {
	          re += '\\' + c
	          continue
	        }
	
	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue
	
	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }
	
	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }
	
	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue
	
	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()
	
	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }
	
	        re += c
	
	    } // switch
	  } // for
	
	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }
	
	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + pl.open.length)
	    this.debug('setting tail', re, pl)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }
	
	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })
	
	    this.debug('tail=%j\n   %s', tail, tail, pl, re)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type
	
	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }
	
	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }
	
	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }
	
	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]
	
	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)
	
	    nlLast += nlAfter
	
	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter
	
	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }
	
	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }
	
	  if (addPatternStart) {
	    re = patternStart + re
	  }
	
	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }
	
	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }
	
	  var flags = options.nocase ? 'i' : ''
	  try {
	    var regExp = new RegExp('^' + re + '$', flags)
	  } catch (er) {
	    // If it was an invalid regular expression, then it can't match
	    // anything.  This trick looks for a character after the end of
	    // the string, which is of course impossible, except in multi-line
	    // mode, but it's not a /m regex.
	    return new RegExp('$.')
	  }
	
	  regExp._glob = pattern
	  regExp._src = re
	
	  return regExp
	}
	
	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}
	
	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp
	
	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set
	
	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options
	
	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''
	
	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')
	
	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'
	
	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'
	
	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}
	
	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}
	
	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''
	
	  if (f === '/' && partial) return true
	
	  var options = this.options
	
	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }
	
	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)
	
	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.
	
	  var set = this.set
	  this.debug(this.pattern, 'set', set)
	
	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }
	
	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }
	
	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}
	
	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options
	
	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })
	
	  this.debug('matchOne', file.length, pattern.length)
	
	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]
	
	    this.debug(pattern, p, f)
	
	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false
	
	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])
	
	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }
	
	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]
	
	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)
	
	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }
	
	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }
	
	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }
	
	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }
	
	    if (!hit) return false
	  }
	
	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*
	
	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }
	
	  // should be unreachable.
	  throw new Error('wtf?')
	}
	
	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}
	
	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(291);
	var balanced = __webpack_require__(292);
	
	module.exports = expandTop;
	
	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';
	
	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}
	
	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}
	
	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}
	
	
	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];
	
	  var parts = [];
	  var m = balanced('{', '}', str);
	
	  if (!m)
	    return str.split(',');
	
	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');
	
	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }
	
	  parts.push.apply(parts, p);
	
	  return parts;
	}
	
	function expandTop(str) {
	  if (!str)
	    return [];
	
	  // I don't know why Bash 4.3 does this, but it does.
	  // Anything starting with {} will have the first two bytes preserved
	  // but *only* at the top level, so {},a}b will not expand to anything,
	  // but a{},b}c will be expanded to [a}c,abc].
	  // One could argue that this is a bug in Bash, but since the goal of
	  // this module is to match Bash's rules, we escape a leading {}
	  if (str.substr(0, 2) === '{}') {
	    str = '\\{\\}' + str.substr(2);
	  }
	
	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}
	
	function identity(e) {
	  return e;
	}
	
	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}
	
	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}
	
	function expand(str, isTop) {
	  var expansions = [];
	
	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];
	
	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*\}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }
	
	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }
	
	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.
	
	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];
	
	  var N;
	
	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);
	
	    N = [];
	
	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }
	
	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }
	
	  return expansions;
	}
	


/***/ },
/* 291 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};
	
	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 292 */
/***/ function(module, exports) {

	module.exports = balanced;
	function balanced(a, b, str) {
	  if (a instanceof RegExp) a = maybeMatch(a, str);
	  if (b instanceof RegExp) b = maybeMatch(b, str);
	
	  var r = range(a, b, str);
	
	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}
	
	function maybeMatch(reg, str) {
	  var m = str.match(reg);
	  return m ? m[0] : null;
	}
	
	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;
	
	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;
	
	    while (i >= 0 && !result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }
	
	        bi = str.indexOf(b, i + 1);
	      }
	
	      i = ai < bi && ai >= 0 ? ai : bi;
	    }
	
	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }
	
	  return result;
	}


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {'use strict';
	module.exports = typeof setImmediate === 'function' ? setImmediate :
		function setImmediate() {
			var args = [].slice.apply(arguments);
			args.splice(1, 0, 0);
			setTimeout.apply(null, args);
		};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(11).setImmediate))

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var si =  __webpack_require__(293);
	var stream = __webpack_require__(270);
	var util = __webpack_require__(287);
	
	var Readable = stream.Readable;
	
	module.exports = ReaddirpReadable;
	
	util.inherits(ReaddirpReadable, Readable);
	
	function ReaddirpReadable (opts) {
	  if (!(this instanceof ReaddirpReadable)) return new ReaddirpReadable(opts);
	
	  opts = opts || {};
	
	  opts.objectMode = true;
	  Readable.call(this, opts);
	
	  // backpressure not implemented at this point
	  this.highWaterMark = Infinity;
	
	  this._destroyed = false;
	  this._paused = false;
	  this._warnings = [];
	  this._errors = [];
	
	  this._pauseResumeErrors();
	}
	
	var proto = ReaddirpReadable.prototype;
	
	proto._pauseResumeErrors = function () {
	  var self = this;
	  self.on('pause', function () { self._paused = true });
	  self.on('resume', function () {
	    if (self._destroyed) return;
	    self._paused = false;
	
	    self._warnings.forEach(function (err) { self.emit('warn', err) });
	    self._warnings.length = 0;
	
	    self._errors.forEach(function (err) { self.emit('error', err) });
	    self._errors.length = 0;
	  })
	}
	
	// called for each entry
	proto._processEntry = function (entry) {
	  if (this._destroyed) return;
	  this.push(entry);
	}
	
	proto._read = function () { }
	
	proto.destroy = function () {
	  // when stream is destroyed it will emit nothing further, not even errors or warnings
	  this.push(null);
	  this.readable = false;
	  this._destroyed = true;
	  this.emit('close');
	}
	
	proto._done = function () {
	  this.push(null);
	}
	
	// we emit errors and warnings async since we may handle errors like invalid args
	// within the initial event loop before any event listeners subscribed
	proto._handleError = function (err) {
	  var self = this;
	  si(function () {
	    if (self._paused) return self._warnings.push(err);
	    if (!self._destroyed) self.emit('warn', err);
	  });
	}
	
	proto._handleFatalError = function (err) {
	  var self = this;
	  si(function () {
	    if (self._paused) return self._errors.push(err);
	    if (!self._destroyed) self.emit('error', err);
	  });
	}
	
	function createStreamAPI () {
	  var stream = new ReaddirpReadable();
	
	  return {
	      stream           :  stream
	    , processEntry     :  stream._processEntry.bind(stream)
	    , done             :  stream._done.bind(stream)
	    , handleError      :  stream._handleError.bind(stream)
	    , handleFatalError :  stream._handleFatalError.bind(stream)
	  };
	}
	
	module.exports = createStreamAPI;


/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var path = __webpack_require__(4);
	var binaryExtensions = __webpack_require__(296);
	var exts = Object.create(null);
	
	binaryExtensions.forEach(function (el) {
		exts[el] = true;
	});
	
	module.exports = function (filepath) {
		return path.extname(filepath).slice(1).toLowerCase() in exts;
	};


/***/ },
/* 296 */
/***/ function(module, exports) {

	[
		"3ds",
		"3g2",
		"3gp",
		"7z",
		"a",
		"aac",
		"adp",
		"ai",
		"aif",
		"aiff",
		"alz",
		"ape",
		"apk",
		"ar",
		"arj",
		"asf",
		"au",
		"avi",
		"bak",
		"bh",
		"bin",
		"bk",
		"bmp",
		"btif",
		"bz2",
		"bzip2",
		"cab",
		"caf",
		"cgm",
		"class",
		"cmx",
		"cpio",
		"cr2",
		"csv",
		"cur",
		"dat",
		"deb",
		"dex",
		"djvu",
		"dll",
		"dmg",
		"dng",
		"doc",
		"docm",
		"docx",
		"dot",
		"dotm",
		"dra",
		"DS_Store",
		"dsk",
		"dts",
		"dtshd",
		"dvb",
		"dwg",
		"dxf",
		"ecelp4800",
		"ecelp7470",
		"ecelp9600",
		"egg",
		"eol",
		"eot",
		"epub",
		"exe",
		"f4v",
		"fbs",
		"fh",
		"fla",
		"flac",
		"fli",
		"flv",
		"fpx",
		"fst",
		"fvt",
		"g3",
		"gif",
		"graffle",
		"gz",
		"gzip",
		"h261",
		"h263",
		"h264",
		"ico",
		"ief",
		"img",
		"ipa",
		"iso",
		"jar",
		"jpeg",
		"jpg",
		"jpgv",
		"jpm",
		"jxr",
		"key",
		"ktx",
		"lha",
		"lvp",
		"lz",
		"lzh",
		"lzma",
		"lzo",
		"m3u",
		"m4a",
		"m4v",
		"mar",
		"mdi",
		"mht",
		"mid",
		"midi",
		"mj2",
		"mka",
		"mkv",
		"mmr",
		"mng",
		"mobi",
		"mov",
		"movie",
		"mp3",
		"mp4",
		"mp4a",
		"mpeg",
		"mpg",
		"mpga",
		"mxu",
		"nef",
		"npx",
		"numbers",
		"o",
		"oga",
		"ogg",
		"ogv",
		"otf",
		"pages",
		"pbm",
		"pcx",
		"pdf",
		"pea",
		"pgm",
		"pic",
		"png",
		"pnm",
		"pot",
		"potm",
		"potx",
		"ppa",
		"ppam",
		"ppm",
		"pps",
		"ppsm",
		"ppsx",
		"ppt",
		"pptm",
		"pptx",
		"psd",
		"pya",
		"pyc",
		"pyo",
		"pyv",
		"qt",
		"rar",
		"ras",
		"raw",
		"rgb",
		"rip",
		"rlc",
		"rmf",
		"rmvb",
		"rtf",
		"rz",
		"s3m",
		"s7z",
		"scpt",
		"sgi",
		"shar",
		"sil",
		"sketch",
		"slk",
		"smv",
		"so",
		"sub",
		"swf",
		"tar",
		"tbz",
		"tbz2",
		"tga",
		"tgz",
		"thmx",
		"tif",
		"tiff",
		"tlz",
		"ttc",
		"ttf",
		"txz",
		"udf",
		"uvh",
		"uvi",
		"uvm",
		"uvp",
		"uvs",
		"uvu",
		"viv",
		"vob",
		"war",
		"wav",
		"wax",
		"wbmp",
		"wdp",
		"weba",
		"webm",
		"webp",
		"whl",
		"wim",
		"wm",
		"wma",
		"wmv",
		"wmx",
		"woff",
		"woff2",
		"wvx",
		"xbm",
		"xif",
		"xla",
		"xlam",
		"xls",
		"xlsb",
		"xlsm",
		"xlsx",
		"xlt",
		"xltm",
		"xltx",
		"xm",
		"xmind",
		"xpi",
		"xpm",
		"xwd",
		"xz",
		"z",
		"zip",
		"zipx"
	]


/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var sysPath = __webpack_require__(4);
	var readdirp = __webpack_require__(263);
	var fsevents;
	try { fsevents = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fsevents\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())); } catch (error) {}
	
	// fsevents instance helper functions
	
	// object to hold per-process fsevents instances
	// (may be shared across chokidar FSWatcher instances)
	var FSEventsWatchers = Object.create(null);
	
	// Threshold of duplicate path prefixes at which to start
	// consolidating going forward
	var consolidateThreshhold = 10;
	
	// Private function: Instantiates the fsevents interface
	
	// * path       - string, path to be watched
	// * callback   - function, called when fsevents is bound and ready
	
	// Returns new fsevents instance
	function createFSEventsInstance(path, callback) {
	  return (new fsevents(path)).on('fsevent', callback).start();
	}
	
	// Private function: Instantiates the fsevents interface or binds listeners
	// to an existing one covering the same file tree
	
	// * path       - string, path to be watched
	// * realPath   - string, real path (in case of symlinks)
	// * listener   - function, called when fsevents emits events
	// * rawEmitter - function, passes data to listeners of the 'raw' event
	
	// Returns close function
	function setFSEventsListener(path, realPath, listener, rawEmitter) {
	  var watchPath = sysPath.extname(path) ? sysPath.dirname(path) : path;
	  var watchContainer;
	  var parentPath = sysPath.dirname(watchPath);
	
	  // If we've accumulated a substantial number of paths that
	  // could have been consolidated by watching one directory
	  // above the current one, create a watcher on the parent
	  // path instead, so that we do consolidate going forward.
	  if (couldConsolidate(parentPath)) {
	    watchPath = parentPath;
	  }
	
	  var resolvedPath = sysPath.resolve(path);
	  var hasSymlink = resolvedPath !== realPath;
	  function filteredListener(fullPath, flags, info) {
	    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);
	    if (
	      fullPath === resolvedPath ||
	      !fullPath.indexOf(resolvedPath + sysPath.sep)
	    ) listener(fullPath, flags, info);
	  }
	
	  // check if there is already a watcher on a parent path
	  // modifies `watchPath` to the parent path when it finds a match
	  function watchedParent() {
	    return Object.keys(FSEventsWatchers).some(function(watchedPath) {
	      // condition is met when indexOf returns 0
	      if (!realPath.indexOf(sysPath.resolve(watchedPath) + sysPath.sep)) {
	        watchPath = watchedPath;
	        return true;
	      }
	    });
	  }
	
	  if (watchPath in FSEventsWatchers || watchedParent()) {
	    watchContainer = FSEventsWatchers[watchPath];
	    watchContainer.listeners.push(filteredListener);
	  } else {
	    watchContainer = FSEventsWatchers[watchPath] = {
	      listeners: [filteredListener],
	      rawEmitters: [rawEmitter],
	      watcher: createFSEventsInstance(watchPath, function(fullPath, flags) {
	        var info = fsevents.getInfo(fullPath, flags);
	        watchContainer.listeners.forEach(function(listener) {
	          listener(fullPath, flags, info);
	        });
	        watchContainer.rawEmitters.forEach(function(emitter) {
	          emitter(info.event, fullPath, info);
	        });
	      })
	    };
	  }
	  var listenerIndex = watchContainer.listeners.length - 1;
	
	  // removes this instance's listeners and closes the underlying fsevents
	  // instance if there are no more listeners left
	  return function close() {
	    delete watchContainer.listeners[listenerIndex];
	    delete watchContainer.rawEmitters[listenerIndex];
	    if (!Object.keys(watchContainer.listeners).length) {
	      watchContainer.watcher.stop();
	      delete FSEventsWatchers[watchPath];
	    }
	  };
	}
	
	// Decide whether or not we should start a new higher-level
	// parent watcher
	function couldConsolidate(path) {
	  var keys = Object.keys(FSEventsWatchers);
	  var count = 0;
	
	  for (var i = 0, len = keys.length; i < len; ++i) {
	    var watchPath = keys[i];
	    if (watchPath.indexOf(path) === 0) {
	      count++;
	      if (count >= consolidateThreshhold) {
	        return true;
	      }
	    }
	  }
	
	  return false;
	}
	
	// returns boolean indicating whether fsevents can be used
	function canUse() {
	  return fsevents && Object.keys(FSEventsWatchers).length < 128;
	}
	
	// determines subdirectory traversal levels from root to path
	function depth(path, root) {
	  var i = 0;
	  while (!path.indexOf(root) && (path = sysPath.dirname(path)) !== root) i++;
	  return i;
	}
	
	// fake constructor for attaching fsevents-specific prototype methods that
	// will be copied to FSWatcher's prototype
	function FsEventsHandler() {}
	
	// Private method: Handle symlinks encountered during directory scan
	
	// * watchPath  - string, file/dir path to be watched with fsevents
	// * realPath   - string, real path (in case of symlinks)
	// * transform  - function, path transformer
	// * globFilter - function, path filter in case a glob pattern was provided
	
	// Returns close function for the watcher instance
	FsEventsHandler.prototype._watchWithFsEvents =
	function(watchPath, realPath, transform, globFilter) {
	  if (this._isIgnored(watchPath)) return;
	  var watchCallback = function(fullPath, flags, info) {
	    if (
	      this.options.depth !== undefined &&
	      depth(fullPath, realPath) > this.options.depth
	    ) return;
	    var path = transform(sysPath.join(
	      watchPath, sysPath.relative(watchPath, fullPath)
	    ));
	    if (globFilter && !globFilter(path)) return;
	    // ensure directories are tracked
	    var parent = sysPath.dirname(path);
	    var item = sysPath.basename(path);
	    var watchedDir = this._getWatchedDir(
	      info.type === 'directory' ? path : parent
	    );
	    var checkIgnored = function(stats) {
	      if (this._isIgnored(path, stats)) {
	        this._ignoredPaths[path] = true;
	        if (stats && stats.isDirectory()) {
	          this._ignoredPaths[path + '/**/*'] = true;
	        }
	        return true;
	      } else {
	        delete this._ignoredPaths[path];
	        delete this._ignoredPaths[path + '/**/*'];
	      }
	    }.bind(this);
	
	    var handleEvent = function(event) {
	      if (checkIgnored()) return;
	
	      if (event === 'unlink') {
	        // suppress unlink events on never before seen files
	        if (info.type === 'directory' || watchedDir.has(item)) {
	          this._remove(parent, item);
	        }
	      } else {
	        if (event === 'add') {
	          // track new directories
	          if (info.type === 'directory') this._getWatchedDir(path);
	
	          if (info.type === 'symlink' && this.options.followSymlinks) {
	            // push symlinks back to the top of the stack to get handled
	            var curDepth = this.options.depth === undefined ?
	              undefined : depth(fullPath, realPath) + 1;
	            return this._addToFsEvents(path, false, true, curDepth);
	          } else {
	            // track new paths
	            // (other than symlinks being followed, which will be tracked soon)
	            this._getWatchedDir(parent).add(item);
	          }
	        }
	        var eventName = info.type === 'directory' ? event + 'Dir' : event;
	        this._emit(eventName, path);
	        if (eventName === 'addDir') this._addToFsEvents(path, false, true);
	      }
	    }.bind(this);
	
	    function addOrChange() {
	      handleEvent(watchedDir.has(item) ? 'change' : 'add');
	    }
	    function checkFd() {
	      fs.open(path, 'r', function(error, fd) {
	        if (fd) fs.close(fd);
	        error && error.code !== 'EACCES' ?
	          handleEvent('unlink') : addOrChange();
	      });
	    }
	    // correct for wrong events emitted
	    var wrongEventFlags = [
	      69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912
	    ];
	    if (wrongEventFlags.indexOf(flags) !== -1 || info.event === 'unknown') {
	      if (typeof this.options.ignored === 'function') {
	        fs.stat(path, function(error, stats) {
	          if (checkIgnored(stats)) return;
	          stats ? addOrChange() : handleEvent('unlink');
	        });
	      } else {
	        checkFd();
	      }
	    } else {
	      switch (info.event) {
	      case 'created':
	      case 'modified':
	        return addOrChange();
	      case 'deleted':
	      case 'moved':
	        return checkFd();
	      }
	    }
	  }.bind(this);
	
	  var closer = setFSEventsListener(
	    watchPath,
	    realPath,
	    watchCallback,
	    this.emit.bind(this, 'raw')
	  );
	
	  this._emitReady();
	  return closer;
	};
	
	// Private method: Handle symlinks encountered during directory scan
	
	// * linkPath   - string, path to symlink
	// * fullPath   - string, absolute path to the symlink
	// * transform  - function, pre-existing path transformer
	// * curDepth   - int, level of subdirectories traversed to where symlink is
	
	// Returns nothing
	FsEventsHandler.prototype._handleFsEventsSymlink =
	function(linkPath, fullPath, transform, curDepth) {
	  // don't follow the same symlink more than once
	  if (this._symlinkPaths[fullPath]) return;
	  else this._symlinkPaths[fullPath] = true;
	
	  this._readyCount++;
	
	  fs.realpath(linkPath, function(error, linkTarget) {
	    if (this._handleError(error) || this._isIgnored(linkTarget)) {
	      return this._emitReady();
	    }
	
	    this._readyCount++;
	
	    // add the linkTarget for watching with a wrapper for transform
	    // that causes emitted paths to incorporate the link's path
	    this._addToFsEvents(linkTarget || linkPath, function(path) {
	      var dotSlash = '.' + sysPath.sep;
	      var aliasedPath = linkPath;
	      if (linkTarget && linkTarget !== dotSlash) {
	        aliasedPath = path.replace(linkTarget, linkPath);
	      } else if (path !== dotSlash) {
	        aliasedPath = sysPath.join(linkPath, path);
	      }
	      return transform(aliasedPath);
	    }, false, curDepth);
	  }.bind(this));
	};
	
	// Private method: Handle added path with fsevents
	
	// * path       - string, file/directory path or glob pattern
	// * transform  - function, converts working path to what the user expects
	// * forceAdd   - boolean, ensure add is emitted
	// * priorDepth - int, level of subdirectories already traversed
	
	// Returns nothing
	FsEventsHandler.prototype._addToFsEvents =
	function(path, transform, forceAdd, priorDepth) {
	
	  // applies transform if provided, otherwise returns same value
	  var processPath = typeof transform === 'function' ?
	    transform : function(val) { return val; };
	
	  var emitAdd = function(newPath, stats) {
	    var pp = processPath(newPath);
	    var isDir = stats.isDirectory();
	    var dirObj = this._getWatchedDir(sysPath.dirname(pp));
	    var base = sysPath.basename(pp);
	
	    // ensure empty dirs get tracked
	    if (isDir) this._getWatchedDir(pp);
	
	    if (dirObj.has(base)) return;
	    dirObj.add(base);
	
	    if (!this.options.ignoreInitial || forceAdd === true) {
	      this._emit(isDir ? 'addDir' : 'add', pp, stats);
	    }
	  }.bind(this);
	
	  var wh = this._getWatchHelpers(path);
	
	  // evaluate what is at the path we're being asked to watch
	  fs[wh.statMethod](wh.watchPath, function(error, stats) {
	    if (this._handleError(error) || this._isIgnored(wh.watchPath, stats)) {
	      this._emitReady();
	      return this._emitReady();
	    }
	
	    if (stats.isDirectory()) {
	      // emit addDir unless this is a glob parent
	      if (!wh.globFilter) emitAdd(processPath(path), stats);
	
	      // don't recurse further if it would exceed depth setting
	      if (priorDepth && priorDepth > this.options.depth) return;
	
	      // scan the contents of the dir
	      readdirp({
	        root: wh.watchPath,
	        entryType: 'all',
	        fileFilter: wh.filterPath,
	        directoryFilter: wh.filterDir,
	        lstat: true,
	        depth: this.options.depth - (priorDepth || 0)
	      }).on('data', function(entry) {
	        // need to check filterPath on dirs b/c filterDir is less restrictive
	        if (entry.stat.isDirectory() && !wh.filterPath(entry)) return;
	
	        var joinedPath = sysPath.join(wh.watchPath, entry.path);
	        var fullPath = entry.fullPath;
	
	        if (wh.followSymlinks && entry.stat.isSymbolicLink()) {
	          // preserve the current depth here since it can't be derived from
	          // real paths past the symlink
	          var curDepth = this.options.depth === undefined ?
	            undefined : depth(joinedPath, sysPath.resolve(wh.watchPath)) + 1;
	
	          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);
	        } else {
	          emitAdd(joinedPath, entry.stat);
	        }
	      }.bind(this)).on('error', function() {
	        // Ignore readdirp errors
	      }).on('end', this._emitReady);
	    } else {
	      emitAdd(wh.watchPath, stats);
	      this._emitReady();
	    }
	  }.bind(this));
	
	  if (this.options.persistent && forceAdd !== true) {
	    var initWatch = function(error, realPath) {
	      var closer = this._watchWithFsEvents(
	        wh.watchPath,
	        sysPath.resolve(realPath || wh.watchPath),
	        processPath,
	        wh.globFilter
	      );
	      if (closer) this._closers[path] = closer;
	    }.bind(this);
	
	    if (typeof transform === 'function') {
	      // realpath has already been resolved
	      initWatch();
	    } else {
	      fs.realpath(wh.watchPath, initWatch);
	    }
	  }
	};
	
	module.exports = FsEventsHandler;
	module.exports.canUse = canUse;


/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(4);
	var mkdirp = __webpack_require__(299);
	
	function NodeOutputFileSystem() {}
	module.exports = NodeOutputFileSystem;
	
	NodeOutputFileSystem.prototype.mkdirp = mkdirp;
	NodeOutputFileSystem.prototype.mkdir = fs.mkdir.bind(this);
	NodeOutputFileSystem.prototype.rmdir = fs.rmdir.bind(this);
	NodeOutputFileSystem.prototype.unlink = fs.unlink.bind(this);
	NodeOutputFileSystem.prototype.writeFile = fs.writeFile.bind(fs);
	NodeOutputFileSystem.prototype.join = path.join.bind(path);


/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var path = __webpack_require__(4);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var _0777 = parseInt('0777', 8);
	
	module.exports = mkdirP.mkdirp = mkdirP.mkdirP = mkdirP;
	
	function mkdirP (p, opts, f, made) {
	    if (typeof opts === 'function') {
	        f = opts;
	        opts = {};
	    }
	    else if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = _0777 & (~process.umask());
	    }
	    if (!made) made = null;
	    
	    var cb = f || function () {};
	    p = path.resolve(p);
	    
	    xfs.mkdir(p, mode, function (er) {
	        if (!er) {
	            made = made || p;
	            return cb(null, made);
	        }
	        switch (er.code) {
	            case 'ENOENT':
	                mkdirP(path.dirname(p), opts, function (er, made) {
	                    if (er) cb(er, made);
	                    else mkdirP(p, opts, cb, made);
	                });
	                break;
	
	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                xfs.stat(p, function (er2, stat) {
	                    // if the stat fails, then that's super weird.
	                    // let the original error be the failure reason.
	                    if (er2 || !stat.isDirectory()) cb(er, made)
	                    else cb(null, made);
	                });
	                break;
	        }
	    });
	}
	
	mkdirP.sync = function sync (p, opts, made) {
	    if (!opts || typeof opts !== 'object') {
	        opts = { mode: opts };
	    }
	    
	    var mode = opts.mode;
	    var xfs = opts.fs || fs;
	    
	    if (mode === undefined) {
	        mode = _0777 & (~process.umask());
	    }
	    if (!made) made = null;
	
	    p = path.resolve(p);
	
	    try {
	        xfs.mkdirSync(p, mode);
	        made = made || p;
	    }
	    catch (err0) {
	        switch (err0.code) {
	            case 'ENOENT' :
	                made = sync(path.dirname(p), opts, made);
	                sync(p, opts, made);
	                break;
	
	            // In the case of any other error, just see if there's a dir
	            // there already.  If so, then hooray!  If not, then something
	            // is borked.
	            default:
	                var stat;
	                try {
	                    stat = xfs.statSync(p);
	                }
	                catch (err1) {
	                    throw err0;
	                }
	                if (!stat.isDirectory()) throw err0;
	                break;
	        }
	    }
	
	    return made;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(264);
	
	function NodeJsInputFileSystem() {}
	module.exports = NodeJsInputFileSystem;
	
	NodeJsInputFileSystem.prototype.isSync = function() {
		return false;
	};
	
	NodeJsInputFileSystem.prototype.stat = fs.stat.bind(fs);
	NodeJsInputFileSystem.prototype.readdir = function readdir(path, callback) {
		fs.readdir(path, function (err, files) {
			callback(err, files && files.map(function (file) {
				return file.normalize ? file.normalize("NFC") : file;
			}));
		});
	};
	NodeJsInputFileSystem.prototype.readFile = fs.readFile.bind(fs);
	NodeJsInputFileSystem.prototype.readlink = fs.readlink.bind(fs);

/***/ },
/* 301 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function Storage(duration) {
		this.duration = duration;
		this.running = {};
		this.data = {};
		this.levels = [];
		if(duration > 0) {
			this.levels.push([], [], [], [], [], [], [], [], []);
			for(var i = 8000; i < duration; i+=500)
				this.levels.push([]);
		}
		this.count = 0;
		this.interval = null;
		this.needTickCheck = false;
		this.nextTick = null;
		this.passive = true;
	}
	
	Storage.prototype.ensureTick = function() {
		if(!this.interval && this.duration > 0 && !this.nextTick)
			this.interval = setInterval(this.tick.bind(this), Math.floor(this.duration / this.levels.length));
	};
	
	Storage.prototype.finished = function(name) {
		var args = Array.prototype.slice.call(arguments, 1);
		var callbacks = this.running[name];
		delete this.running[name];
		if(this.duration > 0) {
			this.count++;
			this.data[name] = args;
			this.levels[0].push(name);
			this.ensureTick();
		}
		for(var i = 0; i < callbacks.length; i++) {
			callbacks[i].apply(null, args);
		}
	};
	
	Storage.prototype.provide = function(name, provider, callback) {
		var running = this.running[name];
		if(running) {
			running.push(callback);
			return;
		}
		if(this.duration > 0) {
			this.checkTicks();
			var data = this.data[name];
			if(data) {
				return callback.apply(null, data);
			}
		}
		this.running[name] = running = [callback];
		provider(name, this.finished.bind(this, name));
	};
	
	Storage.prototype.tick = function() {
		var decay = this.levels.pop();
		for(var i = decay.length - 1; i >= 0; i--) {
			delete this.data[decay[i]];
		}
		this.count -= decay.length;
		decay.length = 0;
		this.levels.unshift(decay);
		if(this.count == 0) {
			clearInterval(this.interval);
			this.interval = null;
			this.nextTick = null;
			return true;
		} else if(this.nextTick) {
			this.nextTick += Math.floor(this.duration / this.levels.length);
			var time = new Date().getTime();
			if(this.nextTick > time) {
				this.nextTick = null;
				this.interval = setInterval(this.tick.bind(this), Math.floor(this.duration / this.levels.length));
				return true;
			}
		} else if(this.passive) {
			clearInterval(this.interval);
			this.interval = null;
			this.nextTick = new Date().getTime() + Math.floor(this.duration / this.levels.length);
		} else {
			this.passive = true;
		}
	};
	
	Storage.prototype.checkTicks = function() {
		this.passive = false;
		if(this.nextTick) {
			while(!this.tick());
		}
	};
	
	Storage.prototype.purge = function(what) {
		if(!what) {
			this.count = 0;
			clearInterval(this.interval);
			this.nextTick = null;
			this.data = {};
			this.levels.forEach(function(level) {
				level.length = 0;
			});
		} else if(typeof what === "string") {
			Object.keys(this.data).forEach(function(key) {
				if(key.indexOf(what) === 0)
					delete this.data[key];
			}, this);
		} else {
			for(var i = what.length - 1; i >= 0; i--) {
				this.purge(what[i]);
			}
		}
	};
	
	
	function CachedInputFileSystem(fileSystem, duration) {
		this.fileSystem = fileSystem;
		this._statStorage = new Storage(duration);
		this._readdirStorage = new Storage(duration);
		this._readFileStorage = new Storage(duration);
		this._readlinkStorage = new Storage(duration);
	}
	module.exports = CachedInputFileSystem;
	
	CachedInputFileSystem.prototype.isSync = function() {
		return this.fileSystem.isSync();
	};
	
	CachedInputFileSystem.prototype.stat = function(path, callback) {
		this._statStorage.provide(path, this.fileSystem.stat.bind(this.fileSystem), callback);
	};
	
	CachedInputFileSystem.prototype.readdir = function(path, callback) {
		this._readdirStorage.provide(path, this.fileSystem.readdir.bind(this.fileSystem), callback);
	};
	
	CachedInputFileSystem.prototype.readFile = function(path, callback) {
		this._readFileStorage.provide(path, this.fileSystem.readFile.bind(this.fileSystem), callback);
	};
	
	CachedInputFileSystem.prototype.readlink = function(path, callback) {
		this._readlinkStorage.provide(path, this.fileSystem.readlink.bind(this.fileSystem), callback);
	};
	
	CachedInputFileSystem.prototype.purge = function(what) {
		this._statStorage.purge(what);
		this._readdirStorage.purge(what);
		this._readFileStorage.purge(what);
		this._readlinkStorage.purge(what);
	};

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	
	function NodeHotUpdateChunkTemplatePlugin() {}
	module.exports = NodeHotUpdateChunkTemplatePlugin;
	
	NodeHotUpdateChunkTemplatePlugin.prototype.apply = function(hotUpdateChunkTemplate) {
		hotUpdateChunkTemplate.plugin("render", function(modulesSource, modules, hash, id) {
			var source = new ConcatSource();
			source.add("exports.id = " + JSON.stringify(id) + ";\nexports.modules = ");
			source.add(modulesSource);
			source.add(";");
			return source;
		});
		hotUpdateChunkTemplate.plugin("hash", function(hash) {
			hash.update("NodeHotUpdateChunkTemplatePlugin");
			hash.update("3");
			hash.update(this.outputOptions.hotUpdateFunction + "");
			hash.update(this.outputOptions.library + "");
		});
	};


/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalsPlugin = __webpack_require__(304);
	
	function NodeTargetPlugin() {}
	
	module.exports = NodeTargetPlugin;
	NodeTargetPlugin.prototype.apply = function(compiler) {
		new ExternalsPlugin("commonjs", Object.keys(process.binding("natives"))).apply(compiler);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalModuleFactoryPlugin = __webpack_require__(305);
	
	function ExternalsPlugin(type, externals) {
		this.type = type;
		this.externals = externals;
	}
	module.exports = ExternalsPlugin;
	ExternalsPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compile", function(params) {
			params.normalModuleFactory.apply(new ExternalModuleFactoryPlugin(this.type, this.externals));
		}.bind(this));
	};


/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ExternalModule = __webpack_require__(306);
	
	function ExternalModuleFactoryPlugin(type, externals) {
		this.type = type;
		this.externals = externals;
	}
	module.exports = ExternalModuleFactoryPlugin;
	
	ExternalModuleFactoryPlugin.prototype.apply = function(normalModuleFactory) {
		var globalType = this.type;
		normalModuleFactory.plugin("factory", function(factory) {
			return function(data, callback) {
				var context = data.context;
				var dependency = data.dependency;
	
				function handleExternal(value, type, callback) {
					if(typeof type === "function") {
						callback = type;
						type = undefined;
					}
					if(value === false) return factory(data, callback);
					if(value === true) value = dependency.request;
					if(typeof type === "undefined" && /^[a-z0-9]+ /.test(value)) {
						var idx = value.indexOf(" ");
						type = value.substr(0, idx);
						value = value.substr(idx + 1);
					}
					callback(null, new ExternalModule(value, type || globalType));
					return true;
				}
				(function handleExternals(externals, callback) {
					if(typeof externals === "string") {
						if(externals === dependency.request) {
							return handleExternal(dependency.request, callback);
						}
					} else if(Array.isArray(externals)) {
						var i = 0;
						(function next() {
							do {
								var async = true;
								if(i >= externals.length) return callback();
								handleExternals(externals[i++], function(err, module) {
									if(err) return callback(err);
									if(!module) {
										if(async) {
											async = false;
											return;
										}
										return next();
									}
									callback(null, module);
								});
							} while (!async);
							async = false;
						}());
						return;
					} else if(externals instanceof RegExp) {
						if(externals.test(dependency.request)) {
							return handleExternal(dependency.request, callback);
						}
					} else if(typeof externals === "function") {
						externals.call(null, context, dependency.request, function(err, value, type) {
							if(err) return callback(err);
							if(typeof value !== "undefined") {
								handleExternal(value, type, callback);
							} else {
								callback();
							}
						});
						return;
					} else if(typeof externals === "object" && Object.prototype.hasOwnProperty.call(externals, dependency.request)) {
						return handleExternal(externals[dependency.request], callback);
					}
					callback();
				}(this.externals, function(err, module) {
					if(err) return callback(err);
					if(!module) return handleExternal(false, callback);
					return callback(null, module);
				}));
			}.bind(this);
		}.bind(this));
	};


/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Module = __webpack_require__(15);
	var OriginalSource = __webpack_require__(50);
	var RawSource = __webpack_require__(40);
	var WebpackMissingModule = __webpack_require__(126);
	
	function ExternalModule(request, type) {
		Module.call(this);
		this.request = request;
		this.type = type;
		this.built = false;
	}
	module.exports = ExternalModule;
	
	ExternalModule.prototype = Object.create(Module.prototype);
	
	ExternalModule.prototype.external = true;
	
	ExternalModule.prototype.identifier = function() {
		return "external " + JSON.stringify(this.request);
	};
	
	ExternalModule.prototype.readableIdentifier = function() {
		return "external " + JSON.stringify(this.request);
	};
	
	ExternalModule.prototype.needRebuild = function() {
		return false;
	};
	
	ExternalModule.prototype.build = function(options, compilation, resolver, fs, callback) {
		this.builtTime = new Date().getTime();
		callback();
	};
	
	ExternalModule.prototype.source = function() {
		var str = "throw new Error('Externals not supported');";
		var request = this.request;
		if(typeof request === "object") request = request[this.type];
		switch(this.type) {
			case "this":
			case "window":
			case "global":
				if(Array.isArray(request)) {
					str = "(function() { module.exports = " + this.type + request.map(function(r) {
						return "[" + JSON.stringify(r) + "]";
					}).join("") + "; }());";
				} else
					str = "(function() { module.exports = " + this.type + "[" + JSON.stringify(request) + "]; }());";
				break;
			case "commonjs":
			case "commonjs2":
				if(Array.isArray(request)) {
					str = "module.exports = require(" + JSON.stringify(request[0]) + ")" + request.slice(1).map(function(r) {
						return "[" + JSON.stringify(r) + "]";
					}).join("") + ";";
				} else
					str = "module.exports = require(" + JSON.stringify(request) + ");";
				break;
			case "amd":
			case "umd":
			case "umd2":
				str = "";
				if(this.optional) {
					str += "if(typeof __WEBPACK_EXTERNAL_MODULE_" + this.id + "__ === 'undefined') {" + WebpackMissingModule.moduleCode(request) + "}\n";
				}
				str += "module.exports = __WEBPACK_EXTERNAL_MODULE_" + this.id + "__;";
				break;
			default:
				str = "";
				if(this.optional) {
					str += "if(typeof " + request + " === 'undefined') {" + WebpackMissingModule.moduleCode(request) + "}\n";
				}
				str += "module.exports = " + request + ";";
				break;
		}
		if(this.useSourceMap) {
			return new OriginalSource(str, this.identifier());
		} else {
			return new RawSource(str);
		}
	};
	
	ExternalModule.prototype.size = function() {
		return 42;
	};


/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	var path = __webpack_require__(4);
	var async = __webpack_require__(10);
	
	function OldNodeWatchFileSystem(inputFileSystem) {
		this.inputFileSystem = inputFileSystem;
	}
	module.exports = OldNodeWatchFileSystem;
	
	/**
	 *
	 * @param files {String[]} a sorted array of paths to files
	 * @param dirs {String[]} a sorted array of paths to directories
	 * @param startTime {number} the virtual start time
	 * @param delay {number} in ms, the time to wait to signal after the first change
	 * @param callback {function(err, filesModified: String[], dirsModified: String[], fileTimestamps: Object, dirTimestamps: Object)] called once after change plus delay
	 * @param callbackUndelayed {function()} called once after first change
	 */
	OldNodeWatchFileSystem.prototype.watch = function(files, dirs, missing, startTime, delay, callback, callbackUndelayed) {
		var inputFileSystem = this.inputFileSystem;
	
		if(!callbackUndelayed) callbackUndelayed = function() {};
		var closed = false;
		var fileTimestamps = {};
		var dirTimestamps = {};
		var filesModified = {};
		var dirsModified = {};
	
		var lastChangeTime;
	
		startTime = Math.floor(startTime / 1000) * 1000; // only 1 second accuracy
	
		var directories = {};
		dirs.forEach(function(dir) {
			directories[dir] = {
				context: dir,
				files: []
			};
		});
		files.forEach(function(file) {
			var dir = path.dirname(file);
			if(!directories[dir]) directories[dir] = {
				files: []
			};
			directories[dir].files.push(file);
		});
	
		var items = Object.keys(directories).map(function(dir) {
			directories[dir].path = dir;
			return directories[dir];
		});
		items.sort(function(a, b) {
			if(a.path === b.path) return 0;
			return a.path < b.path ? -1 : 1;
		});
		items.forEach(function(item) {
			if(item.files) {
				item.files.sort();
			}
		});
	
		var initialChange = false;
		var change = function() {
			initialChange = true;
		};
	
		function readStat(item, callback) {
			if(item.context) {
				fs.readdir(item.path, function(err, files) {
					function onTimestamp(ts) {
						if(!dirTimestamps[item.context] || dirTimestamps[item.context] < ts)
							dirTimestamps[item.context] = ts;
						if(ts >= startTime) {
							dirsModified[item.context] = true;
							change(item.path);
						}
						return callback();
					}
					if(err) return onTimestamp(Infinity);
					async.map(files, function(file, callback) {
						file = path.join(item.path, file);
						var isFile = false;
						if(item.files) {
							if(binarySearch(item.files, function(path) {
									if(path === file) return 0;
									return path < file ? -1 : 1;
								}) >= 0) {
								isFile = true;
							}
						}
						fs.stat(file, function(err, stat) {
							var ts = err ? Infinity : stat.mtime.getTime();
							if(isFile) {
								fileTimestamps[file] = ts;
								if(ts >= startTime) filesModified[file] = true;
							}
							return callback(null, ts);
						});
					}, function(err, timestamps) {
						if(err) return onTimestamp(Infinity);
						var ts = timestamps.reduce(function(max, ts) {
							if(ts > max)
								return ts;
							return max;
						}, 0);
						onTimestamp(ts);
					});
				});
			} else {
				async.forEach(item.files, function(file, callback) {
					fs.stat(file, function(err, stat) {
						var ts = err ? Infinity : stat.mtime.getTime();
						fileTimestamps[file] = ts;
						if(ts >= startTime) {
							filesModified[file] = true;
							change(file);
						}
						return callback(null, ts);
					});
				}, callback);
			}
		}
		async.forEach(items, function processItem(item, callback) {
			var isRunning = false;
			var isScheduled = false;
			item.watcher = fs.watch(item.path, function() {
				if(isRunning) {
					isScheduled = true;
					return;
				}
				isRunning = true;
				readStat(item, done);
			});
			if(item.context) {
				item.children = [];
				fs.readdir(item.path, function(err, files) {
					if(err) {
						change();
						onWatcherApplied();
						return;
					}
					async.forEach(files, function(file, callback) {
						file = path.join(item.path, file);
						fs.stat(file, function(err, stat) {
							if(err) {
								change(file);
								callback();
								return;
							}
							if(!stat.isDirectory()) return callback();
							var subitem = {
								path: file,
								context: item.context
							};
							item.children.push(subitem);
							processItem(subitem, callback);
						});
					}, onWatcherApplied);
				});
			} else onWatcherApplied();
	
			function onWatcherApplied() {
				readStat(item, function() {
					callback();
					done();
				});
			}
	
			function done() {
				if(closed) return;
				if(isScheduled) {
					isScheduled = false;
					readStat(item, done);
				} else {
					isRunning = false;
				}
			}
		}, function() {
			var timeout;
			if(initialChange) {
	
				callbackUndelayed();
				if(delay) {
					lastChangeTime = Date.now();
					change = restartDelay;
					timeout = setTimeout(onTimeout, delay);
				} else onTimeout();
	
			} else {
	
				change = function() {
	
					callbackUndelayed();
					if(delay) {
						lastChangeTime = Date.now();
						change = restartDelay;
						timeout = setTimeout(onTimeout, delay);
					} else {
						change = function() {};
						onTimeout();
					}
				};
	
			}
	
			function restartDelay() {
				lastChangeTime = Date.now();
				clearTimeout(timeout);
				timeout = setTimeout(onTimeout, delay);
			}
	
		});
	
		// 7.
		function onTimeout() {
			var nextSecond = Math.ceil(lastChangeTime / 1000) * 1000;
			var timeToNextSecond = nextSecond - Date.now();
			if(timeToNextSecond > 0) {
				setTimeout(onTimeout, timeToNextSecond);
				return;
			}
			change = function() {};
			if(closed) return;
			var outdatedFiles = Object.keys(filesModified).sort();
			var outdatedDirs = Object.keys(dirsModified).sort();
			if(inputFileSystem && inputFileSystem.purge) {
				inputFileSystem.purge(outdatedFiles);
				inputFileSystem.purge(outdatedDirs);
			}
			callback(null, outdatedFiles, outdatedDirs, [], fileTimestamps, dirTimestamps);
	
			close();
		}
	
		function close() {
			closed = true;
			items.forEach(function closeItem(item) {
				item.watcher.close();
				if(item.children) item.children.forEach(closeItem);
			});
		}
	
		return {
			close: close,
			pause: close
		};
	};
	
	function binarySearch(array, comparator) {
		var left = 0;
		var right = array.length - 1;
	
		while(left <= right) {
			var middle = ((left + right) / 2) | 0;
			var comp = comparator(array[middle]);
			if(comp === 0) return middle;
			if(comp > 0) right = middle - 1;
			if(comp < 0) left = middle + 1;
		}
		return -1;
	}


/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SetVarMainTemplatePlugin = __webpack_require__(309);
	
	function accessorToObjectAccess(accessor) {
		return accessor.map(function(a) {
			return "[" + JSON.stringify(a) + "]";
		}).join("");
	}
	
	function accessorAccess(base, accessor, joinWith) {
		accessor = [].concat(accessor);
		return accessor.map(function(a, idx) {
			a = base ?
				base + accessorToObjectAccess(accessor.slice(0, idx + 1)) :
				accessor[0] + accessorToObjectAccess(accessor.slice(1, idx + 1));
			if(idx === accessor.length - 1) return a;
			if(idx === 0 && typeof base === "undefined") return a + " = typeof " + a + " === \"object\" ? " + a + " : {}";
			return a + " = " + a + " || {}";
		}).join(joinWith || "; ");
	}
	
	function LibraryTemplatePlugin(name, target, umdNamedDefine) {
		this.name = name;
		this.target = target;
		this.umdNamedDefine = umdNamedDefine;
	}
	module.exports = LibraryTemplatePlugin;
	LibraryTemplatePlugin.prototype.apply = function(compiler) {
		compiler.plugin("this-compilation", function(compilation) {
			switch(this.target) {
				case "var":
					compilation.apply(new SetVarMainTemplatePlugin("var " + accessorAccess(false, this.name)));
					break;
				case "assign":
					compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(undefined, this.name)));
					break;
				case "this":
				case "window":
				case "global":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess(this.target, this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin(this.target, true));
					break;
				case "commonjs":
					if(this.name)
						compilation.apply(new SetVarMainTemplatePlugin(accessorAccess("exports", this.name)));
					else
						compilation.apply(new SetVarMainTemplatePlugin("exports", true));
					break;
				case "commonjs2":
					compilation.apply(new SetVarMainTemplatePlugin("module.exports"));
					break;
				case "amd":
					var AmdMainTemplatePlugin = __webpack_require__(310);
					compilation.apply(new AmdMainTemplatePlugin(this.name));
					break;
				case "umd":
				case "umd2":
					var UmdMainTemplatePlugin = __webpack_require__(311);
					compilation.apply(new UmdMainTemplatePlugin(this.name, {
						optionalAmdExternalAsGlobal: this.target === "umd2",
						namedDefine: this.umdNamedDefine
					}));
					break;
				case "jsonp":
					var JsonpExportMainTemplatePlugin = __webpack_require__(312);
					compilation.apply(new JsonpExportMainTemplatePlugin(this.name));
					break;
				default:
					throw new Error(this.target + " is not a valid Library target");
			}
		}.bind(this));
	};


/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	
	function SetVarMainTemplatePlugin(varExpression, copyObject) {
		this.varExpression = varExpression;
		this.copyObject = copyObject;
	}
	module.exports = SetVarMainTemplatePlugin;
	SetVarMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var varExpression = mainTemplate.applyPluginsWaterfall("asset-path", this.varExpression, {
				hash: hash,
				chunk: chunk
			});
			if(this.copyObject) {
				return new ConcatSource("(function(e, a) { for(var i in a) e[i] = a[i]; }(" +
					varExpression + ", ", source, "))");
			} else {
				var prefix = varExpression + " =\n";
				return new ConcatSource(prefix, source);
			}
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.varExpression) paths.push(this.varExpression);
			return paths;
		});
		mainTemplate.plugin("hash", function(hash) {
			hash.update("set var");
			hash.update(this.varExpression + "");
			hash.update(this.copyObject + "");
		}.bind(this));
	};


/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	
	function AmdMainTemplatePlugin(name) {
		this.name = name;
	}
	module.exports = AmdMainTemplatePlugin;
	AmdMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var externals = chunk.modules.filter(function(m) {
				return m.external;
			});
			var externalsDepsArray = JSON.stringify(externals.map(function(m) {
				return typeof m.request === "object" ? m.request.amd : m.request;
			}));
			var externalsArguments = externals.map(function(m) {
				return "__WEBPACK_EXTERNAL_MODULE_" + m.id + "__";
			}).join(", ");
			if(this.name) {
				var name = mainTemplate.applyPluginsWaterfall("asset-path", this.name, {
					hash: hash,
					chunk: chunk
				});
				return new ConcatSource("define(" + JSON.stringify(name) + ", " + externalsDepsArray + ", function(" + externalsArguments + ") { return ", source, "});");
			} else if(externalsArguments) {
				return new ConcatSource("define(" + externalsDepsArray + ", function(" + externalsArguments + ") { return ", source, "});");
			} else {
				return new ConcatSource("define(function() { return ", source, "});");
			}
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths.push(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("exports amd");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	var OriginalSource = __webpack_require__(50);
	
	function accessorToObjectAccess(accessor) {
		return accessor.map(function(a) {
			return "[" + JSON.stringify(a) + "]";
		}).join("");
	}
	
	function accessorAccess(base, accessor) {
		accessor = [].concat(accessor);
		return accessor.map(function(a, idx) {
			a = base + accessorToObjectAccess(accessor.slice(0, idx + 1));
			if(idx === accessor.length - 1) return a;
			return a + " = " + a + " || {}";
		}).join(", ");
	}
	
	function UmdMainTemplatePlugin(name, options) {
		this.name = name;
		this.optionalAmdExternalAsGlobal = options.optionalAmdExternalAsGlobal;
		this.namedDefine = options.namedDefine;
	}
	module.exports = UmdMainTemplatePlugin;
	UmdMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var externals = chunk.modules.filter(function(m) {
				return m.external;
			});
			var optionalExternals = [],
				requiredExternals = [];
			if(this.optionalAmdExternalAsGlobal) {
				externals.forEach(function(m) {
					if(m.optional) {
						optionalExternals.push(m);
					} else {
						requiredExternals.push(m);
					}
				});
				externals = requiredExternals.concat(optionalExternals);
			} else {
				requiredExternals = externals;
			}
	
			function replaceKeys(str) {
				return mainTemplate.applyPluginsWaterfall("asset-path", str, {
					hash: hash,
					chunk: chunk
				});
			}
	
			function externalsDepsArray(modules) {
				return "[" + replaceKeys(modules.map(function(m) {
					return JSON.stringify(typeof m.request === "object" ? m.request.amd : m.request);
				}).join(", ")) + "]";
			}
	
			function externalsRootArray(modules) {
				return replaceKeys(modules.map(function(m) {
					var request = m.request;
					if(typeof request === "object") request = request.root;
					return "root" + accessorToObjectAccess([].concat(request));
				}).join(", "));
			}
	
			function externalsRequireArray(type) {
				return replaceKeys(externals.map(function(m) {
					var request = m.request;
					if(typeof request === "object") request = request[type];
					if(Array.isArray(request)) {
						var expr = "require(" + JSON.stringify(request[0]) + ")" + accessorToObjectAccess(request.slice(1));
					} else
						var expr = "require(" + JSON.stringify(request) + ")";
					if(m.optional) {
						expr = "(function webpackLoadOptionalExternalModule() { try { return " + expr + "; } catch(e) {} }())";
					}
					return expr;
				}).join(", "));
			}
	
			function externalsArguments(modules) {
				return modules.map(function(m) {
					return "__WEBPACK_EXTERNAL_MODULE_" + m.id + "__";
				}).join(", ");
			}
	
			function libraryName(library) {
				return JSON.stringify(replaceKeys([].concat(library).pop()));
			}
	
			if(optionalExternals.length > 0) {
				var amdFactory = "function webpackLoadOptionalExternalModuleAmd(" + externalsArguments(requiredExternals) + ") {\n" +
					"			return factory(" + (
						requiredExternals.length > 0 ?
						externalsArguments(requiredExternals) + ", " + externalsRootArray(optionalExternals) :
						externalsRootArray(optionalExternals)
					) + ");\n" +
					"		}";
			} else {
				var amdFactory = "factory";
			}
	
			return new ConcatSource(new OriginalSource(
				"(function webpackUniversalModuleDefinition(root, factory) {\n" +
				"	if(typeof exports === 'object' && typeof module === 'object')\n" +
				"		module.exports = factory(" + externalsRequireArray("commonjs2") + ");\n" +
				"	else if(typeof define === 'function' && define.amd)\n" +
				(requiredExternals.length > 0 ?
					(this.name && this.namedDefine === true ?
						"		define(" + libraryName(this.name) + ", " + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n" :
						"		define(" + externalsDepsArray(requiredExternals) + ", " + amdFactory + ");\n"
					) :
					(this.name && this.namedDefine === true ?
						"		define(" + libraryName(this.name) + ", [], " + amdFactory + ");\n" :
						"		define([], " + amdFactory + ");\n"
					)
				) +
				(this.name ?
					"	else if(typeof exports === 'object')\n" +
					"		exports[" + libraryName(this.name) + "] = factory(" + externalsRequireArray("commonjs") + ");\n" +
					"	else\n" +
					"		" + replaceKeys(accessorAccess("root", this.name)) + " = factory(" + externalsRootArray(externals) + ");\n" :
					"	else {\n" +
					(externals.length > 0 ?
						"		var a = typeof exports === 'object' ? factory(" + externalsRequireArray("commonjs") + ") : factory(" + externalsRootArray(externals) + ");\n" :
						"		var a = factory();\n"
					) +
					"		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n" +
					"	}\n"
				) +
				"})(this, function(" + externalsArguments(externals) + ") {\nreturn ", "webpack/universalModuleDefinition"), source, "\n});\n");
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths = paths.concat(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("umd");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(49);
	
	function JsonpExportMainTemplatePlugin(name) {
		this.name = name;
	}
	module.exports = JsonpExportMainTemplatePlugin;
	JsonpExportMainTemplatePlugin.prototype.apply = function(compilation) {
		var mainTemplate = compilation.mainTemplate;
		compilation.templatesPlugin("render-with-entry", function(source, chunk, hash) {
			var name = mainTemplate.applyPluginsWaterfall("asset-path", this.name || "", {
				hash: hash,
				chunk: chunk
			});
			return new ConcatSource(name + "(", source, ");");
		}.bind(this));
		mainTemplate.plugin("global-hash-paths", function(paths) {
			if(this.name) paths.push(this.name);
			return paths;
		}.bind(this));
		mainTemplate.plugin("hash", function(hash) {
			hash.update("jsonp export");
			hash.update(this.name + "");
		}.bind(this));
	};


/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Template = __webpack_require__(52);
	var BasicEvaluatedExpression = __webpack_require__(62);
	var ModuleHotAcceptDependency = __webpack_require__(314);
	var ModuleHotDeclineDependency = __webpack_require__(315);
	var RawSource = __webpack_require__(40);
	var ConstDependency = __webpack_require__(106);
	var NullFactory = __webpack_require__(108);
	
	function HotModuleReplacementPlugin() {}
	module.exports = HotModuleReplacementPlugin;
	
	HotModuleReplacementPlugin.prototype.apply = function(compiler) {
		var hotUpdateChunkFilename = compiler.options.output.hotUpdateChunkFilename;
		var hotUpdateMainFilename = compiler.options.output.hotUpdateMainFilename;
		compiler.plugin("compilation", function(compilation, params) {
			var hotUpdateChunkTemplate = compilation.hotUpdateChunkTemplate;
			if(!hotUpdateChunkTemplate) return;
	
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
	
			compilation.dependencyFactories.set(ModuleHotAcceptDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(ModuleHotAcceptDependency, new ModuleHotAcceptDependency.Template());
	
			compilation.dependencyFactories.set(ModuleHotDeclineDependency, normalModuleFactory);
			compilation.dependencyTemplates.set(ModuleHotDeclineDependency, new ModuleHotDeclineDependency.Template());
	
			compilation.plugin("record", function(compilation, records) {
				if(records.hash === this.hash) return;
				records.hash = compilation.hash;
				records.moduleHashs = {};
				this.modules.forEach(function(module) {
					var identifier = module.identifier();
					var hash = __webpack_require__(59).createHash("md5");
					module.updateHash(hash);
					records.moduleHashs[identifier] = hash.digest("hex");
				});
				records.chunkHashs = {};
				this.chunks.forEach(function(chunk) {
					records.chunkHashs[chunk.id] = chunk.hash;
				});
				records.chunkModuleIds = {};
				this.chunks.forEach(function(chunk) {
					records.chunkModuleIds[chunk.id] = chunk.modules.map(function(m) {
						return m.id;
					});
				});
			});
			compilation.plugin("after-hash", function() {
				var records = this.records;
				if(!records) return;
				var preHash = records.preHash || "x";
				var prepreHash = records.prepreHash || "x";
				if(preHash === this.hash) {
					this.modifyHash(prepreHash);
					return;
				}
				records.prepreHash = records.hash || "x";
				records.preHash = this.hash;
				this.modifyHash(records.prepreHash);
			});
			compilation.plugin("additional-chunk-assets", function() {
				var records = this.records;
				if(records.hash === this.hash) return;
				if(!records.moduleHashs || !records.chunkHashs || !records.chunkModuleIds) return;
				this.modules.forEach(function(module) {
					var identifier = module.identifier();
					var hash = __webpack_require__(59).createHash("md5");
					module.updateHash(hash);
					hash = hash.digest("hex");
					module.hotUpdate = records.moduleHashs[identifier] !== hash;
				});
				var hotUpdateMainContent = {
					h: this.hash,
					c: []
				};
				Object.keys(records.chunkHashs).forEach(function(chunkId) {
					chunkId = +chunkId;
					var currentChunk = this.chunks.filter(function(chunk) {
						return chunk.id === chunkId;
					})[0];
					if(currentChunk) {
						var newModules = currentChunk.modules.filter(function(module) {
							return module.hotUpdate;
						});
						if(newModules.length > 0) {
							var source = hotUpdateChunkTemplate.render(chunkId, newModules, this.hash, this.moduleTemplate, this.dependencyTemplates);
							var filename = this.getPath(hotUpdateChunkFilename, {
								hash: records.hash,
								chunk: currentChunk
							});
							this.additionalChunkAssets.push(filename);
							this.assets[filename] = source;
							hotUpdateMainContent.c.push(chunkId);
							currentChunk.files.push(filename);
							this.applyPlugins("chunk-asset", currentChunk, filename);
						}
					}
				}, this);
				var source = new RawSource(JSON.stringify(hotUpdateMainContent));
				var filename = this.getPath(hotUpdateMainFilename, {
					hash: records.hash
				});
				this.assets[filename] = source;
			});
	
			compilation.mainTemplate.plugin("hash", function(hash) {
				hash.update("HotMainTemplateDecorator");
			});
	
			compilation.mainTemplate.plugin("module-require", function(_, chunk, hash, varModuleId) {
				return "hotCreateRequire(" + varModuleId + ")";
			});
	
			compilation.mainTemplate.plugin("require-extensions", function(source) {
				var buf = [source];
				buf.push("");
				buf.push("// __webpack_hash__");
				buf.push(this.requireFn + ".h = function() { return hotCurrentHash; };");
				return this.asString(buf);
			});
	
			compilation.mainTemplate.plugin("bootstrap", function(source, chunk, hash) {
				source = this.applyPluginsWaterfall("hot-bootstrap", source, chunk, hash);
				return this.asString([
					source,
					"",
					hotInitCode
					.replace(/\$require\$/g, this.requireFn)
					.replace(/\$hash\$/g, JSON.stringify(hash))
					.replace(/\/\*foreachInstalledChunks\*\//g, chunk.chunks.length > 0 ? "for(var chunkId in installedChunks)" : "var chunkId = " + chunk.id + ";")
				]);
			});
	
			compilation.mainTemplate.plugin("global-hash", function() {
				return true;
			});
	
			compilation.mainTemplate.plugin("current-hash", function(_, length) {
				if(isFinite(length))
					return "hotCurrentHash.substr(0, " + length + ")";
				else
					return "hotCurrentHash";
			});
	
			compilation.mainTemplate.plugin("module-obj", function(source, chunk, hash, varModuleId) {
				return this.asString([
					source + ",",
					"hot: hotCreateModule(" + varModuleId + "),",
					"parents: hotCurrentParents,",
					"children: []"
				]);
			});
	
		});
		compiler.parser.plugin("expression __webpack_hash__", function(expr) {
			var dep = new ConstDependency("__webpack_require__.h()", expr.range);
			dep.loc = expr.loc;
			this.state.current.addDependency(dep);
			return true;
		});
		compiler.parser.plugin("evaluate typeof __webpack_hash__", function(expr) {
			return new BasicEvaluatedExpression().setString("string").setRange(expr.range);
		});
		compiler.parser.plugin("evaluate Identifier module.hot", function(expr) {
			return new BasicEvaluatedExpression()
				.setBoolean(!!this.state.compilation.hotUpdateChunkTemplate)
				.setRange(expr.range);
		});
		compiler.parser.plugin("call module.hot.accept", function(expr) {
			if(!this.state.compilation.hotUpdateChunkTemplate) return false;
			if(expr.arguments.length > 1) {
				var arg = this.evaluateExpression(expr.arguments[0]);
				var params = [];
				if(arg.isString()) {
					params = [arg];
				} else if(arg.isArray()) {
					params = arg.items.filter(function(param) {
						return param.isString();
					});
				}
				params.forEach(function(param, idx) {
					var dep = new ModuleHotAcceptDependency(param.string, param.range);
					dep.optional = true;
					dep.loc = Object.create(expr.loc);
					dep.loc.index = idx;
					this.state.module.addDependency(dep);
				}.bind(this));
			}
		});
		compiler.parser.plugin("call module.hot.decline", function(expr) {
			if(!this.state.compilation.hotUpdateChunkTemplate) return false;
			if(expr.arguments.length === 1) {
				var arg = this.evaluateExpression(expr.arguments[0]);
				var params = [];
				if(arg.isString()) {
					params = [arg];
				} else if(arg.isArray()) {
					params = arg.items.filter(function(param) {
						return param.isString();
					});
				}
				params.forEach(function(param, idx) {
					var dep = new ModuleHotDeclineDependency(param.string, param.range);
					dep.optional = true;
					dep.loc = Object.create(expr.loc);
					dep.loc.index = idx;
					this.state.module.addDependency(dep);
				}.bind(this));
			}
		});
		compiler.parser.plugin("expression module.hot", function() {
			return true;
		});
	};
	
	var hotInitCode = Template.getFunctionContent(__webpack_require__(316));


/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function ModuleHotAcceptDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
		this.weak = true;
	}
	module.exports = ModuleHotAcceptDependency;
	
	ModuleHotAcceptDependency.prototype = Object.create(ModuleDependency.prototype);
	ModuleHotAcceptDependency.prototype.constructor = ModuleHotAcceptDependency;
	ModuleHotAcceptDependency.prototype.type = "module.hot.accept";
	
	ModuleHotAcceptDependency.Template = __webpack_require__(125);


/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function ModuleHotDeclineDependency(request, range) {
		ModuleDependency.call(this, request);
		this.range = range;
		this.weak = true;
	}
	module.exports = ModuleHotDeclineDependency;
	
	ModuleHotDeclineDependency.prototype = Object.create(ModuleDependency.prototype);
	ModuleHotDeclineDependency.prototype.constructor = ModuleHotDeclineDependency;
	ModuleHotDeclineDependency.prototype.type = "module.hot.decline";
	
	ModuleHotDeclineDependency.Template = __webpack_require__(125);


/***/ },
/* 316 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*global $hash$ installedModules $require$ hotDownloadManifest hotDownloadUpdateChunk modules */
	module.exports = function() {
	
		// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
		var canDefineProperty = false;
		try {
			Object.defineProperty({}, "x", {
				get: function() {}
			});
			canDefineProperty = true;
		} catch(x) {
			// IE will fail on defineProperty
		}
	
		var hotApplyOnUpdate = true;
		var hotCurrentHash = $hash$; // eslint-disable-line no-unused-vars
		var hotCurrentModuleData = {};
		var hotCurrentParents = []; // eslint-disable-line no-unused-vars
	
		function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
			var me = installedModules[moduleId];
			if(!me) return $require$;
			var fn = function(request) {
				if(me.hot.active) {
					if(installedModules[request]) {
						if(installedModules[request].parents.indexOf(moduleId) < 0)
							installedModules[request].parents.push(moduleId);
						if(me.children.indexOf(request) < 0)
							me.children.push(request);
					} else hotCurrentParents = [moduleId];
				} else {
					console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
					hotCurrentParents = [];
				}
				return $require$(request);
			};
			for(var name in $require$) {
				if(Object.prototype.hasOwnProperty.call($require$, name)) {
					if(canDefineProperty) {
						Object.defineProperty(fn, name, (function(name) {
							return {
								configurable: true,
								enumerable: true,
								get: function() {
									return $require$[name];
								},
								set: function(value) {
									$require$[name] = value;
								}
							};
						}(name)));
					} else {
						fn[name] = $require$[name];
					}
				}
			}
	
			function ensure(chunkId, callback) {
				if(hotStatus === "ready")
					hotSetStatus("prepare");
				hotChunksLoading++;
				$require$.e(chunkId, function() {
					try {
						callback.call(null, fn);
					} finally {
						finishChunkLoading();
					}
	
					function finishChunkLoading() {
						hotChunksLoading--;
						if(hotStatus === "prepare") {
							if(!hotWaitingFilesMap[chunkId]) {
								hotEnsureUpdateChunk(chunkId);
							}
							if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
								hotUpdateDownloaded();
							}
						}
					}
				});
			}
			if(canDefineProperty) {
				Object.defineProperty(fn, "e", {
					enumerable: true,
					value: ensure
				});
			} else {
				fn.e = ensure;
			}
			return fn;
		}
	
		function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
			var hot = {
				// private stuff
				_acceptedDependencies: {},
				_declinedDependencies: {},
				_selfAccepted: false,
				_selfDeclined: false,
				_disposeHandlers: [],
	
				// Module API
				active: true,
				accept: function(dep, callback) {
					if(typeof dep === "undefined")
						hot._selfAccepted = true;
					else if(typeof dep === "function")
						hot._selfAccepted = dep;
					else if(typeof dep === "object")
						for(var i = 0; i < dep.length; i++)
							hot._acceptedDependencies[dep[i]] = callback;
					else
						hot._acceptedDependencies[dep] = callback;
				},
				decline: function(dep) {
					if(typeof dep === "undefined")
						hot._selfDeclined = true;
					else if(typeof dep === "number")
						hot._declinedDependencies[dep] = true;
					else
						for(var i = 0; i < dep.length; i++)
							hot._declinedDependencies[dep[i]] = true;
				},
				dispose: function(callback) {
					hot._disposeHandlers.push(callback);
				},
				addDisposeHandler: function(callback) {
					hot._disposeHandlers.push(callback);
				},
				removeDisposeHandler: function(callback) {
					var idx = hot._disposeHandlers.indexOf(callback);
					if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
				},
	
				// Management API
				check: hotCheck,
				apply: hotApply,
				status: function(l) {
					if(!l) return hotStatus;
					hotStatusHandlers.push(l);
				},
				addStatusHandler: function(l) {
					hotStatusHandlers.push(l);
				},
				removeStatusHandler: function(l) {
					var idx = hotStatusHandlers.indexOf(l);
					if(idx >= 0) hotStatusHandlers.splice(idx, 1);
				},
	
				//inherit from previous dispose call
				data: hotCurrentModuleData[moduleId]
			};
			return hot;
		}
	
		var hotStatusHandlers = [];
		var hotStatus = "idle";
	
		function hotSetStatus(newStatus) {
			hotStatus = newStatus;
			for(var i = 0; i < hotStatusHandlers.length; i++)
				hotStatusHandlers[i].call(null, newStatus);
		}
	
		// while downloading
		var hotWaitingFiles = 0;
		var hotChunksLoading = 0;
		var hotWaitingFilesMap = {};
		var hotRequestedFilesMap = {};
		var hotAvailibleFilesMap = {};
		var hotCallback;
	
		// The update info
		var hotUpdate, hotUpdateNewHash;
	
		function toModuleId(id) {
			var isNumber = (+id) + "" === id;
			return isNumber ? +id : id;
		}
	
		function hotCheck(apply, callback) {
			if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
			if(typeof apply === "function") {
				hotApplyOnUpdate = false;
				callback = apply;
			} else {
				hotApplyOnUpdate = apply;
				callback = callback || function(err) {
					if(err) throw err;
				};
			}
			hotSetStatus("check");
			hotDownloadManifest(function(err, update) {
				if(err) return callback(err);
				if(!update) {
					hotSetStatus("idle");
					callback(null, null);
					return;
				}
	
				hotRequestedFilesMap = {};
				hotAvailibleFilesMap = {};
				hotWaitingFilesMap = {};
				for(var i = 0; i < update.c.length; i++)
					hotAvailibleFilesMap[update.c[i]] = true;
				hotUpdateNewHash = update.h;
	
				hotSetStatus("prepare");
				hotCallback = callback;
				hotUpdate = {};
				/*foreachInstalledChunks*/
				{ // eslint-disable-line no-lone-blocks
					/*globals chunkId */
					hotEnsureUpdateChunk(chunkId);
				}
				if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
					hotUpdateDownloaded();
				}
			});
		}
	
		function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
			if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
				return;
			hotRequestedFilesMap[chunkId] = false;
			for(var moduleId in moreModules) {
				if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
					hotUpdate[moduleId] = moreModules[moduleId];
				}
			}
			if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
				hotUpdateDownloaded();
			}
		}
	
		function hotEnsureUpdateChunk(chunkId) {
			if(!hotAvailibleFilesMap[chunkId]) {
				hotWaitingFilesMap[chunkId] = true;
			} else {
				hotRequestedFilesMap[chunkId] = true;
				hotWaitingFiles++;
				hotDownloadUpdateChunk(chunkId);
			}
		}
	
		function hotUpdateDownloaded() {
			hotSetStatus("ready");
			var callback = hotCallback;
			hotCallback = null;
			if(!callback) return;
			if(hotApplyOnUpdate) {
				hotApply(hotApplyOnUpdate, callback);
			} else {
				var outdatedModules = [];
				for(var id in hotUpdate) {
					if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
						outdatedModules.push(toModuleId(id));
					}
				}
				callback(null, outdatedModules);
			}
		}
	
		function hotApply(options, callback) {
			if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
			if(typeof options === "function") {
				callback = options;
				options = {};
			} else if(options && typeof options === "object") {
				callback = callback || function(err) {
					if(err) throw err;
				};
			} else {
				options = {};
				callback = callback || function(err) {
					if(err) throw err;
				};
			}
	
			function getAffectedStuff(module) {
				var outdatedModules = [module];
				var outdatedDependencies = {};
	
				var queue = outdatedModules.slice();
				while(queue.length > 0) {
					var moduleId = queue.pop();
					var module = installedModules[moduleId];
					if(!module || module.hot._selfAccepted)
						continue;
					if(module.hot._selfDeclined) {
						return new Error("Aborted because of self decline: " + moduleId);
					}
					if(moduleId === 0) {
						return;
					}
					for(var i = 0; i < module.parents.length; i++) {
						var parentId = module.parents[i];
						var parent = installedModules[parentId];
						if(parent.hot._declinedDependencies[moduleId]) {
							return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
						}
						if(outdatedModules.indexOf(parentId) >= 0) continue;
						if(parent.hot._acceptedDependencies[moduleId]) {
							if(!outdatedDependencies[parentId])
								outdatedDependencies[parentId] = [];
							addAllToSet(outdatedDependencies[parentId], [moduleId]);
							continue;
						}
						delete outdatedDependencies[parentId];
						outdatedModules.push(parentId);
						queue.push(parentId);
					}
				}
	
				return [outdatedModules, outdatedDependencies];
			}
	
			function addAllToSet(a, b) {
				for(var i = 0; i < b.length; i++) {
					var item = b[i];
					if(a.indexOf(item) < 0)
						a.push(item);
				}
			}
	
			// at begin all updates modules are outdated
			// the "outdated" status can propagate to parents if they don't accept the children
			var outdatedDependencies = {};
			var outdatedModules = [];
			var appliedUpdate = {};
			for(var id in hotUpdate) {
				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
					var moduleId = toModuleId(id);
					var result = getAffectedStuff(moduleId);
					if(!result) {
						if(options.ignoreUnaccepted)
							continue;
						hotSetStatus("abort");
						return callback(new Error("Aborted because " + moduleId + " is not accepted"));
					}
					if(result instanceof Error) {
						hotSetStatus("abort");
						return callback(result);
					}
					appliedUpdate[moduleId] = hotUpdate[moduleId];
					addAllToSet(outdatedModules, result[0]);
					for(var moduleId in result[1]) {
						if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
							if(!outdatedDependencies[moduleId])
								outdatedDependencies[moduleId] = [];
							addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
						}
					}
				}
			}
	
			// Store self accepted outdated modules to require them later by the module system
			var outdatedSelfAcceptedModules = [];
			for(var i = 0; i < outdatedModules.length; i++) {
				var moduleId = outdatedModules[i];
				if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
					outdatedSelfAcceptedModules.push({
						module: moduleId,
						errorHandler: installedModules[moduleId].hot._selfAccepted
					});
			}
	
			// Now in "dispose" phase
			hotSetStatus("dispose");
			var queue = outdatedModules.slice();
			while(queue.length > 0) {
				var moduleId = queue.pop();
				var module = installedModules[moduleId];
				if(!module) continue;
	
				var data = {};
	
				// Call dispose handlers
				var disposeHandlers = module.hot._disposeHandlers;
				for(var j = 0; j < disposeHandlers.length; j++) {
					var cb = disposeHandlers[j];
					cb(data);
				}
				hotCurrentModuleData[moduleId] = data;
	
				// disable module (this disables requires from this module)
				module.hot.active = false;
	
				// remove module from cache
				delete installedModules[moduleId];
	
				// remove "parents" references from all children
				for(var j = 0; j < module.children.length; j++) {
					var child = installedModules[module.children[j]];
					if(!child) continue;
					var idx = child.parents.indexOf(moduleId);
					if(idx >= 0) {
						child.parents.splice(idx, 1);
					}
				}
			}
	
			// remove outdated dependency from module children
			for(var moduleId in outdatedDependencies) {
				if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
					var module = installedModules[moduleId];
					var moduleOutdatedDependencies = outdatedDependencies[moduleId];
					for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
						var dependency = moduleOutdatedDependencies[j];
						var idx = module.children.indexOf(dependency);
						if(idx >= 0) module.children.splice(idx, 1);
					}
				}
			}
	
			// Not in "apply" phase
			hotSetStatus("apply");
	
			hotCurrentHash = hotUpdateNewHash;
	
			// insert new code
			for(var moduleId in appliedUpdate) {
				if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
					modules[moduleId] = appliedUpdate[moduleId];
				}
			}
	
			// call accept handlers
			var error = null;
			for(var moduleId in outdatedDependencies) {
				if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
					var module = installedModules[moduleId];
					var moduleOutdatedDependencies = outdatedDependencies[moduleId];
					var callbacks = [];
					for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
						var dependency = moduleOutdatedDependencies[i];
						var cb = module.hot._acceptedDependencies[dependency];
						if(callbacks.indexOf(cb) >= 0) continue;
						callbacks.push(cb);
					}
					for(var i = 0; i < callbacks.length; i++) {
						var cb = callbacks[i];
						try {
							cb(outdatedDependencies);
						} catch(err) {
							if(!error)
								error = err;
						}
					}
				}
			}
	
			// Load self accepted modules
			for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
				var item = outdatedSelfAcceptedModules[i];
				var moduleId = item.module;
				hotCurrentParents = [moduleId];
				try {
					$require$(moduleId);
				} catch(err) {
					if(typeof item.errorHandler === "function") {
						try {
							item.errorHandler(err);
						} catch(err) {
							if(!error)
								error = err;
						}
					} else if(!error)
						error = err;
				}
			}
	
			// handle errors in accept handlers and self accepted module load
			if(error) {
				hotSetStatus("fail");
				return callback(error);
			}
	
			hotSetStatus("idle");
			callback(null, outdatedModules);
		}
	};


/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var PrefetchDependency = __webpack_require__(318);
	
	function PrefetchPlugin(context, request) {
		if(!request) {
			this.request = context;
		} else {
			this.context = context;
			this.request = request;
		}
	}
	module.exports = PrefetchPlugin;
	PrefetchPlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation, params) {
			var normalModuleFactory = params.normalModuleFactory;
	
			compilation.dependencyFactories.set(PrefetchDependency, normalModuleFactory);
		});
		compiler.plugin("make", function(compilation, callback) {
			compilation.prefetch(this.context || compiler.context, new PrefetchDependency(this.request), callback);
		}.bind(this));
	};


/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleDependency = __webpack_require__(83);
	
	function PrefetchDependency(request) {
		ModuleDependency.call(this, request);
	}
	module.exports = PrefetchDependency;
	
	PrefetchDependency.prototype = Object.create(ModuleDependency.prototype);
	PrefetchDependency.prototype.constructor = PrefetchDependency;
	PrefetchDependency.prototype.type = "prefetch";


/***/ },
/* 319 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OccurrenceOrderPlugin(preferEntry) {
		if(preferEntry !== undefined && typeof preferEntry !== "boolean") {
			throw new Error("Argument should be a boolean.\nFor more info on this plugin, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.preferEntry = preferEntry;
	}
	module.exports = OccurrenceOrderPlugin;
	OccurrenceOrderPlugin.prototype.apply = function(compiler) {
		var preferEntry = this.preferEntry;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-module-order", function(modules) {
				function entryChunks(m) {
					return m.chunks.filter(function(c) {
						return c.initial;
					}).length;
				}
	
				function occursInEntry(m) {
					return m.reasons.map(function(r) {
						if(!r.module) return 0;
						return entryChunks(r.module);
					}).reduce(function(a, b) {
						return a + b;
					}, 0) + entryChunks(m);
				}
	
				function occurs(m) {
					return m.reasons.map(function(r) {
						if(!r.module) return 0;
						return r.module.chunks.length;
					}).reduce(function(a, b) {
						return a + b;
					}, 0) + m.chunks.length;
				}
				modules.sort(function(a, b) {
					if(preferEntry) {
						var aEntryOccurs = occursInEntry(a);
						var bEntryOccurs = occursInEntry(b);
						if(aEntryOccurs > bEntryOccurs) return -1;
						if(aEntryOccurs < bEntryOccurs) return 1;
					}
					var aOccurs = occurs(a);
					var bOccurs = occurs(b);
					if(aOccurs > bOccurs) return -1;
					if(aOccurs < bOccurs) return 1;
					if(a.identifier() > b.identifier()) return 1;
					if(a.identifier() < b.identifier()) return -1;
					return 0;
				});
			});
			compilation.plugin("optimize-chunk-order", function(chunks) {
				function occursInEntry(c) {
					return c.parents.filter(function(p) {
						return p.initial;
					}).length + (c.entry ? 1 : 0);
				}
	
				function occurs(c) {
					return c.blocks.length + (c.entry ? 1 : 0);
				}
				chunks.forEach(function(c) {
					c.modules.sort(function(a, b) {
						if(a.identifier() > b.identifier()) return 1;
						if(a.identifier() < b.identifier()) return -1;
						return 0;
					});
				});
				chunks.sort(function(a, b) {
					var aEntryOccurs = occursInEntry(a);
					var bEntryOccurs = occursInEntry(b);
					if(aEntryOccurs > bEntryOccurs) return -1;
					if(aEntryOccurs < bEntryOccurs) return 1;
					var aOccurs = occurs(a);
					var bOccurs = occurs(b);
					if(aOccurs > bOccurs) return -1;
					if(aOccurs < bOccurs) return 1;
					if(a.modules.length > b.modules.length) return -1;
					if(a.modules.length < b.modules.length) return 1;
					for(var i = 0; i < a.modules.length; i++) {
						if(a.modules[i].identifier() > b.modules[i].identifier()) return -1;
						if(a.modules[i].identifier() < b.modules[i].identifier()) return 1;
					}
					return 0;
				});
			});
		});
	};


/***/ },
/* 320 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function MinChunkSizePlugin(options) {
		if(typeof options !== "object" || Array.isArray(options)) {
			throw new Error("Argument should be an options object.\nFor more info on options, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.options = options;
	}
	module.exports = MinChunkSizePlugin;
	
	MinChunkSizePlugin.prototype.apply = function(compiler) {
		var options = this.options;
		var minChunkSize = options.minChunkSize;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {
	
				var combinations = [];
				chunks.forEach(function(a, idx) {
					for(var i = 0; i < idx; i++) {
						var b = chunks[i];
						combinations.push([b, a]);
					}
				});
	
				var equalOptions = {
					chunkOverhead: 1,
					entryChunkMultiplicator: 1
				};
				combinations = combinations.filter(function(pair) {
					return pair[0].size(equalOptions) < minChunkSize || pair[1].size(equalOptions) < minChunkSize;
				});
	
				combinations.forEach(function(pair) {
					var a = pair[0].size(options);
					var b = pair[1].size(options);
					var ab = pair[0].integratedSize(pair[1], options);
					pair.unshift(a + b - ab, ab);
				});
	
				combinations = combinations.filter(function(pair) {
					return pair[1] !== false;
				});
	
				if(combinations.length === 0) return;
	
				combinations.sort(function(a, b) {
					var diff = b[0] - a[0];
					if(diff !== 0) return diff;
					return a[1] - b[1];
				});
	
				var pair = combinations[0];
	
				pair[2].integrate(pair[3], "min-size");
				chunks.splice(chunks.indexOf(pair[3]), 1);
				this.restartApplyPlugins();
			});
		});
	};


/***/ },
/* 321 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function LimitChunkCountPlugin(options) {
		if(options !== undefined && typeof options !== "object" || Array.isArray(options)) {
			throw new Error("Argument should be an options object.\nFor more info on options, see https://webpack.github.io/docs/list-of-plugins.html");
		}
		this.options = options || {};
	}
	module.exports = LimitChunkCountPlugin;
	
	LimitChunkCountPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		compiler.plugin("compilation", function(compilation) {
			compilation.plugin("optimize-chunks", function(chunks) {
				var maxChunks = options.maxChunks;
				if(!maxChunks) return;
				if(maxChunks < 1) return;
				if(chunks.length <= maxChunks) return;
	
				if(chunks.length > maxChunks) {
					var combinations = [];
					chunks.forEach(function(a, idx) {
						for(var i = 0; i < idx; i++) {
							var b = chunks[i];
							combinations.push([b, a]);
						}
					});
	
					combinations.forEach(function(pair) {
						var a = pair[0].size(options);
						var b = pair[1].size(options);
						var ab = pair[0].integratedSize(pair[1], options);
						pair.unshift(a + b - ab, ab);
					});
					combinations = combinations.filter(function(pair) {
						return pair[1] !== false;
					});
					combinations.sort(function(a, b) {
						var diff = b[0] - a[0];
						if(diff !== 0) return diff;
						return a[1] - b[1];
					});
	
					var pair = combinations[0];
	
					if(pair && pair[2].integrate(pair[3], "limit")) {
						chunks.splice(chunks.indexOf(pair[3]), 1);
						this.restartApplyPlugins();
					}
				}
			});
		});
	};


/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceMapConsumer = __webpack_require__(323).SourceMapConsumer;
	var SourceMapSource = __webpack_require__(70);
	var RawSource = __webpack_require__(40);
	var RequestShortener = __webpack_require__(46);
	var ModuleFilenameHelpers = __webpack_require__(92);
	var uglify = __webpack_require__(324);
	
	function UglifyJsPlugin(options) {
		if(typeof options !== "object") options = {};
		if(typeof options.compressor !== "undefined") {
			options.compress = options.compressor;
		}
		this.options = options;
	}
	module.exports = UglifyJsPlugin;
	
	UglifyJsPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		options.test = options.test || /\.js($|\?)/i;
	
		var requestShortener = new RequestShortener(compiler.context);
		compiler.plugin("compilation", function(compilation) {
			if(options.sourceMap !== false) {
				compilation.plugin("build-module", function(module) {
					// to get detailed location info about errors
					module.useSourceMap = true;
				});
			}
			compilation.plugin("optimize-chunk-assets", function(chunks, callback) {
				var files = [];
				chunks.forEach(function(chunk) {
					chunk.files.forEach(function(file) {
						files.push(file);
					});
				});
				compilation.additionalChunkAssets.forEach(function(file) {
					files.push(file);
				});
				files = files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options));
				files.forEach(function(file) {
					var oldWarnFunction = uglify.AST_Node.warn_function;
					var warnings = [];
					try {
						var asset = compilation.assets[file];
						if(asset.__UglifyJsPlugin) {
							compilation.assets[file] = asset.__UglifyJsPlugin;
							return;
						}
						if(options.sourceMap !== false) {
							if(asset.sourceAndMap) {
								var sourceAndMap = asset.sourceAndMap();
								var inputSourceMap = sourceAndMap.map;
								var input = sourceAndMap.source;
							} else {
								var inputSourceMap = asset.map();
								var input = asset.source();
							}
							var sourceMap = new SourceMapConsumer(inputSourceMap);
							uglify.AST_Node.warn_function = function(warning) { // eslint-disable-line camelcase
								var match = /\[.+:([0-9]+),([0-9]+)\]/.exec(warning);
								var line = +match[1];
								var column = +match[2];
								var original = sourceMap.originalPositionFor({
									line: line,
									column: column
								});
								if(!original || !original.source || original.source === file) return;
								warnings.push(warning.replace(/\[.+:([0-9]+),([0-9]+)\]/, "") +
									"[" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "]");
							};
						} else {
							var input = asset.source();
							uglify.AST_Node.warn_function = function(warning) { // eslint-disable-line camelcase
								warnings.push(warning);
							};
						}
						uglify.base54.reset();
						var ast = uglify.parse(input, {
							filename: file
						});
						if(options.compress !== false) {
							ast.figure_out_scope();
							var compress = uglify.Compressor(options.compress); // eslint-disable-line new-cap
							ast = ast.transform(compress);
						}
						if(options.mangle !== false) {
							ast.figure_out_scope();
							ast.compute_char_frequency(options.mangle || {});
							ast.mangle_names(options.mangle || {});
							if(options.mangle && options.mangle.props) {
								uglify.mangle_properties(ast, options.mangle.props);
							}
						}
						var output = {};
						output.comments = Object.prototype.hasOwnProperty.call(options, "comments") ? options.comments : /^\**!|@preserve|@license/;
						output.beautify = options.beautify;
						for(var k in options.output) {
							output[k] = options.output[k];
						}
						if(options.sourceMap !== false) {
							var map = uglify.SourceMap({ // eslint-disable-line new-cap
								file: file,
								root: ""
							});
							output.source_map = map; // eslint-disable-line camelcase
						}
						var stream = uglify.OutputStream(output); // eslint-disable-line new-cap
						ast.print(stream);
						if(map) map = map + "";
						stream = stream + "";
						asset.__UglifyJsPlugin = compilation.assets[file] = (map ?
							new SourceMapSource(stream, file, JSON.parse(map), input, inputSourceMap) :
							new RawSource(stream));
						if(warnings.length > 0) {
							compilation.warnings.push(new Error(file + " from UglifyJs\n" + warnings.join("\n")));
						}
					} catch(err) {
						if(err.line) {
							var original = sourceMap && sourceMap.originalPositionFor({
								line: err.line,
								column: err.col
							});
							if(original && original.source) {
								compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + requestShortener.shorten(original.source) + ":" + original.line + "," + original.column + "]"));
							} else {
								compilation.errors.push(new Error(file + " from UglifyJs\n" + err.message + " [" + file + ":" + err.line + "," + err.col + "]"));
							}
						} else if(err.msg) {
							compilation.errors.push(new Error(file + " from UglifyJs\n" + err.msg));
						} else
							compilation.errors.push(new Error(file + " from UglifyJs\n" + err.stack));
					} finally {
						uglify.AST_Node.warn_function = oldWarnFunction; // eslint-disable-line camelcase
					}
				});
				callback();
			});
			compilation.plugin("normal-module-loader", function(context) {
				context.minimize = true;
			});
		});
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = __webpack_require__(20);

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __filename, global, Buffer, __dirname) {// workaround for tty output truncation upon process.exit()
	[process.stdout, process.stderr].forEach(function(stream){
	    if (stream._handle && stream._handle.setBlocking)
	        stream._handle.setBlocking(true);
	});
	
	var path = __webpack_require__(4);
	var fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	
	var FILES = exports.FILES = [
	    "../lib/utils.js",
	    "../lib/ast.js",
	    "../lib/parse.js",
	    "../lib/transform.js",
	    "../lib/scope.js",
	    "../lib/output.js",
	    "../lib/compress.js",
	    "../lib/sourcemap.js",
	    "../lib/mozilla-ast.js",
	    "../lib/propmangle.js",
	    "./exports.js",
	].map(function(file){
	    return fs.realpathSync(path.join(path.dirname(__filename), file));
	});
	
	var UglifyJS = exports;
	
	new Function("MOZ_SourceMap", "exports", "DEBUG", FILES.map(function(file){
	    return fs.readFileSync(file, "utf8");
	}).join("\n\n"))(
	    __webpack_require__(325),
	    UglifyJS,
	    !!global.UGLIFY_DEBUG
	);
	
	UglifyJS.AST_Node.warn_function = function(txt) {
	    console.error("WARN: %s", txt);
	};
	
	exports.minify = function(files, options) {
	    options = UglifyJS.defaults(options, {
	        spidermonkey     : false,
	        outSourceMap     : null,
	        outFileName      : null,
	        sourceRoot       : null,
	        inSourceMap      : null,
	        sourceMapUrl     : null,
	        sourceMapInline  : false,
	        fromString       : false,
	        warnings         : false,
	        mangle           : {},
	        mangleProperties : false,
	        nameCache        : null,
	        output           : null,
	        compress         : {},
	        parse            : {}
	    });
	    UglifyJS.base54.reset();
	
	    // 1. parse
	    var toplevel = null,
	        sourcesContent = {};
	
	    if (options.spidermonkey) {
	        toplevel = UglifyJS.AST_Node.from_mozilla_ast(files);
	    } else {
	        function addFile(file, fileUrl) {
	            var code = options.fromString
	                ? file
	                : fs.readFileSync(file, "utf8");
	            sourcesContent[fileUrl] = code;
	            toplevel = UglifyJS.parse(code, {
	                filename: fileUrl,
	                toplevel: toplevel,
	                bare_returns: options.parse ? options.parse.bare_returns : undefined
	            });
	        }
	        if (!options.fromString) files = UglifyJS.simple_glob(files);
	        [].concat(files).forEach(function (files, i) {
	            if (typeof files === 'string') {
	                addFile(files, options.fromString ? i : files);
	            } else {
	                for (var fileUrl in files) {
	                    addFile(files[fileUrl], fileUrl);
	                }
	            }
	        });
	    }
	    if (options.wrap) {
	      toplevel = toplevel.wrap_commonjs(options.wrap, options.exportAll);
	    }
	
	    // 2. compress
	    if (options.compress) {
	        var compress = { warnings: options.warnings };
	        UglifyJS.merge(compress, options.compress);
	        toplevel.figure_out_scope();
	        var sq = UglifyJS.Compressor(compress);
	        toplevel = sq.compress(toplevel);
	    }
	
	    // 3. mangle properties
	    if (options.mangleProperties || options.nameCache) {
	        options.mangleProperties.cache = UglifyJS.readNameCache(options.nameCache, "props");
	        toplevel = UglifyJS.mangle_properties(toplevel, options.mangleProperties);
	        UglifyJS.writeNameCache(options.nameCache, "props", options.mangleProperties.cache);
	    }
	
	    // 4. mangle
	    if (options.mangle) {
	        toplevel.figure_out_scope(options.mangle);
	        toplevel.compute_char_frequency(options.mangle);
	        toplevel.mangle_names(options.mangle);
	    }
	
	    // 5. output
	    var inMap = options.inSourceMap;
	    var output = {};
	    if (typeof options.inSourceMap == "string") {
	        inMap = JSON.parse(fs.readFileSync(options.inSourceMap, "utf8"));
	    }
	    if (options.outSourceMap || options.sourceMapInline) {
	        output.source_map = UglifyJS.SourceMap({
	            // prefer outFileName, otherwise use outSourceMap without .map suffix
	            file: options.outFileName || (typeof options.outSourceMap === 'string' ? options.outSourceMap.replace(/\.map$/i, '') : null),
	            orig: inMap,
	            root: options.sourceRoot
	        });
	        if (options.sourceMapIncludeSources) {
	            for (var file in sourcesContent) {
	                if (sourcesContent.hasOwnProperty(file)) {
	                    output.source_map.get().setSourceContent(file, sourcesContent[file]);
	                }
	            }
	        }
	
	    }
	    if (options.output) {
	        UglifyJS.merge(output, options.output);
	    }
	    var stream = UglifyJS.OutputStream(output);
	    toplevel.print(stream);
	
	
	    var source_map = output.source_map;
	    if (source_map) {
	        source_map = source_map + "";
	    }
	
	    var mappingUrlPrefix = "\n//# sourceMappingURL=";
	    if (options.sourceMapInline) {
	        stream += mappingUrlPrefix + "data:application/json;charset=utf-8;base64," + new Buffer(source_map).toString("base64");
	    } else if (options.outSourceMap && typeof options.outSourceMap === "string" && options.sourceMapUrl !== false) {
	        stream += mappingUrlPrefix + (typeof options.sourceMapUrl === "string" ? options.sourceMapUrl : options.outSourceMap);
	    }
	
	    return {
	        code : stream + "",
	        map  : source_map
	    };
	};
	
	// exports.describe_ast = function() {
	//     function doitem(ctor) {
	//         var sub = {};
	//         ctor.SUBCLASSES.forEach(function(ctor){
	//             sub[ctor.TYPE] = doitem(ctor);
	//         });
	//         var ret = {};
	//         if (ctor.SELF_PROPS.length > 0) ret.props = ctor.SELF_PROPS;
	//         if (ctor.SUBCLASSES.length > 0) ret.sub = sub;
	//         return ret;
	//     }
	//     return doitem(UglifyJS.AST_Node).sub;
	// }
	
	exports.describe_ast = function() {
	    var out = UglifyJS.OutputStream({ beautify: true });
	    function doitem(ctor) {
	        out.print("AST_" + ctor.TYPE);
	        var props = ctor.SELF_PROPS.filter(function(prop){
	            return !/^\$/.test(prop);
	        });
	        if (props.length > 0) {
	            out.space();
	            out.with_parens(function(){
	                props.forEach(function(prop, i){
	                    if (i) out.space();
	                    out.print(prop);
	                });
	            });
	        }
	        if (ctor.documentation) {
	            out.space();
	            out.print_string(ctor.documentation);
	        }
	        if (ctor.SUBCLASSES.length > 0) {
	            out.space();
	            out.with_block(function(){
	                ctor.SUBCLASSES.forEach(function(ctor, i){
	                    out.indent();
	                    doitem(ctor);
	                    out.newline();
	                });
	            });
	        }
	    };
	    doitem(UglifyJS.AST_Node);
	    return out + "";
	};
	
	function readReservedFile(filename, reserved) {
	    if (!reserved) {
	        reserved = { vars: [], props: [] };
	    }
	    var data = fs.readFileSync(filename, "utf8");
	    data = JSON.parse(data);
	    if (data.vars) {
	        data.vars.forEach(function(name){
	            UglifyJS.push_uniq(reserved.vars, name);
	        });
	    }
	    if (data.props) {
	        data.props.forEach(function(name){
	            UglifyJS.push_uniq(reserved.props, name);
	        });
	    }
	    return reserved;
	}
	
	exports.readReservedFile = readReservedFile;
	
	exports.readDefaultReservedFile = function(reserved) {
	    return readReservedFile(path.join(__dirname, "domprops.json"), reserved);
	};
	
	exports.readNameCache = function(filename, key) {
	    var cache = null;
	    if (filename) {
	        try {
	            var cache = fs.readFileSync(filename, "utf8");
	            cache = JSON.parse(cache)[key];
	            if (!cache) throw "init";
	            cache.props = UglifyJS.Dictionary.fromObject(cache.props);
	        } catch(ex) {
	            cache = {
	                cname: -1,
	                props: new UglifyJS.Dictionary()
	            };
	        }
	    }
	    return cache;
	};
	
	exports.writeNameCache = function(filename, key, cache) {
	    if (filename) {
	        var data;
	        try {
	            data = fs.readFileSync(filename, "utf8");
	            data = JSON.parse(data);
	        } catch(ex) {
	            data = {};
	        }
	        data[key] = {
	            cname: cache.cname,
	            props: cache.props.toObject()
	        };
	        fs.writeFileSync(filename, JSON.stringify(data, null, 2), "utf8");
	    }
	};
	
	// A file glob function that only supports "*" and "?" wildcards in the basename.
	// Example: "foo/bar/*baz??.*.js"
	// Argument `glob` may be a string or an array of strings.
	// Returns an array of strings. Garbage in, garbage out.
	exports.simple_glob = function simple_glob(glob) {
	    var results = [];
	    if (Array.isArray(glob)) {
	        glob.forEach(function(elem) {
	            results = results.concat(simple_glob(elem));
	        });
	        return results;
	    }
	    if (glob.match(/\*|\?/)) {
	        var dir = path.dirname(glob);
	        try {
	            var entries = fs.readdirSync(dir);
	        } catch (ex) {}
	        if (entries) {
	            var pattern = "^" + (path.basename(glob)
	                .replace(/\(/g, "\\(")
	                .replace(/\)/g, "\\)")
	                .replace(/\{/g, "\\{")
	                .replace(/\}/g, "\\}")
	                .replace(/\[/g, "\\[")
	                .replace(/\]/g, "\\]")
	                .replace(/\+/g, "\\+")
	                .replace(/\^/g, "\\^")
	                .replace(/\$/g, "\\$")
	                .replace(/\*/g, "[^/\\\\]*")
	                .replace(/\./g, "\\.")
	                .replace(/\?/g, ".")) + "$";
	            var mod = process.platform === "win32" ? "i" : "";
	            var rx = new RegExp(pattern, mod);
	            for (var i in entries) {
	                if (rx.test(entries[i]))
	                    results.push(dir + "/" + entries[i]);
	            }
	        }
	    }
	    if (results.length === 0)
	        results = [ glob ];
	    return results;
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), "/index.js", (function() { return this; }()), __webpack_require__(7).Buffer, "/"))

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(326).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(332).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(335).SourceNode;


/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var base64VLQ = __webpack_require__(327);
	var util = __webpack_require__(329);
	var ArraySet = __webpack_require__(330).ArraySet;
	var MappingList = __webpack_require__(331).MappingList;
	
	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util.getArg(aArgs, 'file', null);
	  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}
	
	SourceMapGenerator.prototype._version = 3;
	
	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };
	
	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util.relative(sourceRoot, newMapping.source);
	        }
	
	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };
	
	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }
	
	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };
	
	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util.getArg(aArgs, 'generated');
	    var original = util.getArg(aArgs, 'original', null);
	    var source = util.getArg(aArgs, 'source', null);
	    var name = util.getArg(aArgs, 'name', null);
	
	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }
	
	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }
	
	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }
	
	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };
	
	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util.relative(this._sourceRoot, source);
	    }
	
	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };
	
	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet();
	    var newNames = new ArraySet();
	
	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util.join(aSourceMapPath, mapping.source)
	          }
	          if (sourceRoot != null) {
	            mapping.source = util.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }
	
	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }
	
	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }
	
	    }, this);
	    this._sources = newSources;
	    this._names = newNames;
	
	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };
	
	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };
	
	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;
	
	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = ''
	
	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }
	
	      next += base64VLQ.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;
	
	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;
	
	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;
	
	        next += base64VLQ.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;
	
	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }
	
	      result += next;
	    }
	
	    return result;
	  };
	
	SourceMapGenerator.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util.relative(aSourceRoot, source);
	      }
	      var key = util.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };
	
	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }
	
	    return map;
	  };
	
	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };
	
	exports.SourceMapGenerator = SourceMapGenerator;


/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	var base64 = __webpack_require__(328);
	
	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011
	
	var VLQ_BASE_SHIFT = 5;
	
	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}
	
	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}
	
	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;
	
	  var vlq = toVLQSigned(aValue);
	
	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);
	
	  return encoded;
	};
	
	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;
	
	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	
	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }
	
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);
	
	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};


/***/ },
/* 328 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	
	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	exports.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};
	
	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	exports.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'
	
	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'
	
	  var zero = 48;     // '0'
	  var nine = 57;     // '9'
	
	  var plus = 43;     // '+'
	  var slash = 47;    // '/'
	
	  var littleOffset = 26;
	  var numberOffset = 52;
	
	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }
	
	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }
	
	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }
	
	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }
	
	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }
	
	  // Invalid base64 digit.
	  return -1;
	};


/***/ },
/* 329 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;
	
	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;
	
	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;
	
	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;
	
	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);
	
	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');
	
	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }
	
	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;
	
	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }
	
	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }
	
	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }
	
	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }
	
	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	
	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;
	
	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};
	
	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	
	  aRoot = aRoot.replace(/\/$/, '');
	
	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }
	
	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }
	
	    ++level;
	  }
	
	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;
	
	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());
	
	function identity (s) {
	  return s;
	}
	
	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }
	
	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;
	
	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }
	
	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;
	
	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }
	
	  var length = s.length;
	
	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }
	
	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }
	
	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;
	
	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }
	
	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	
	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }
	
	  if (aStr1 > aStr2) {
	    return 1;
	  }
	
	  return -1;
	}
	
	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(329);
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet() {
	  this._array = [];
	  this._set = Object.create(null);
	}
	
	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};
	
	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet.prototype.size = function ArraySet_size() {
	  return Object.getOwnPropertyNames(this._set).length;
	};
	
	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = util.toSetString(aStr);
	  var isDuplicate = has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    this._set[sStr] = idx;
	  }
	};
	
	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.has = function ArraySet_has(aStr) {
	  var sStr = util.toSetString(aStr);
	  return has.call(this._set, sStr);
	};
	
	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  var sStr = util.toSetString(aStr);
	  if (has.call(this._set, sStr)) {
	    return this._set[sStr];
	  }
	  throw new Error('"' + aStr + '" is not in the set.');
	};
	
	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};
	
	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};
	
	exports.ArraySet = ArraySet;


/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(329);
	
	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	
	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}
	
	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };
	
	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};
	
	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};
	
	exports.MappingList = MappingList;


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(329);
	var binarySearch = __webpack_require__(333);
	var ArraySet = __webpack_require__(330).ArraySet;
	var base64VLQ = __webpack_require__(327);
	var quickSort = __webpack_require__(334).quickSort;
	
	function SourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap)
	    : new BasicSourceMapConsumer(sourceMap);
	}
	
	SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	}
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer.prototype._version = 3;
	
	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.
	
	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__generatedMappings;
	  }
	});
	
	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__originalMappings;
	  }
	});
	
	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };
	
	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;
	
	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	
	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }
	
	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };
	
	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util.getArg(aArgs, 'line');
	
	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util.getArg(aArgs, 'column', 0)
	    };
	
	    if (this.sourceRoot != null) {
	      needle.source = util.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);
	
	    var mappings = [];
	
	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      }
	    }
	
	    return mappings;
	  };
	
	exports.SourceMapConsumer = SourceMapConsumer;
	
	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sources = util.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util.getArg(sourceMap, 'names', []);
	  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util.getArg(sourceMap, 'mappings');
	  var file = util.getArg(sourceMap, 'file', null);
	
	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	        ? util.relative(sourceRoot, source)
	        : source;
	    });
	
	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);
	
	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}
	
	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	
	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);
	
	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	
	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.
	
	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];
	
	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;
	
	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;
	
	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }
	
	        destOriginalMappings.push(destMapping);
	      }
	
	      destGeneratedMappings.push(destMapping);
	    }
	
	    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	
	    return smc;
	  };
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});
	
	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;
	
	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;
	
	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);
	
	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }
	
	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }
	
	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }
	
	          cachedSegments[str] = segment;
	        }
	
	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;
	
	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];
	
	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;
	
	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;
	
	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }
	
	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }
	
	    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;
	
	    quickSort(originalMappings, util.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };
	
	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.
	
	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }
	
	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };
	
	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];
	
	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];
	
	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }
	
	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util.compareByGeneratedPositionsDeflated,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];
	
	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	        }
	        var name = util.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }
	
	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }
	
	    if (this.sourceRoot != null) {
	      aSource = util.relative(this.sourceRoot, aSource);
	    }
	
	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }
	
	    var url;
	    if (this.sourceRoot != null
	        && (url = util.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }
	
	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }
	
	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);
	
	    var needle = {
	      source: source,
	      originalLine: util.getArg(aArgs, 'line'),
	      originalColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util.compareByOriginalPositions,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (mapping.source === needle.source) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }
	
	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };
	
	exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	
	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sections = util.getArg(sourceMap, 'sections');
	
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	
	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util.getArg(s, 'offset');
	    var offsetLine = util.getArg(offset, 'line');
	    var offsetColumn = util.getArg(offset, 'column');
	
	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;
	
	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	    }
	  });
	}
	
	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }
	
	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];
	
	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }
	
	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }
	
	    return {
	      line: null,
	      column: null
	    };
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];
	
	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);
	
	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);
	
	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };
	
	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }
	
	    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util.compareByOriginalPositions);
	  };
	
	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ },
/* 333 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}
	
	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }
	
	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }
	
	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }
	
	  return index;
	};


/***/ },
/* 334 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.
	
	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}
	
	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}
	
	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.
	
	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.
	
	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;
	
	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];
	
	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }
	
	    swap(ary, i + 1, j);
	    var q = i + 1;
	
	    // (2) Recurse on each half.
	
	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}
	
	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	exports.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};


/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var SourceMapGenerator = __webpack_require__(326).SourceMapGenerator;
	var util = __webpack_require__(329);
	
	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;
	
	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;
	
	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";
	
	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}
	
	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();
	
	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are removed from this array, by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var shiftNextLine = function() {
	      var lineContents = remainingLines.shift();
	      // The last line of a file might not have a newline.
	      var newLine = remainingLines.shift() || "";
	      return lineContents + newLine;
	    };
	
	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	
	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;
	
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[0];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[0];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLines.length > 0) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.join(""));
	    }
	
	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });
	
	    return node;
	
	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };
	
	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};
	
	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};
	
	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};
	
	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };
	
	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }
	
	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };
	
	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};
	
	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });
	
	  return { code: generated.code, map: map };
	};
	
	exports.SourceNode = SourceNode;


/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var async = __webpack_require__(10);
	
	function CachePlugin(cache) {
		this.cache = cache || {};
	}
	module.exports = CachePlugin;
	
	CachePlugin.prototype.apply = function(compiler) {
		if(Array.isArray(compiler.compilers)) {
			compiler.compilers.forEach(function(c, idx) {
				c.apply(new CachePlugin(this.cache[idx] = this.cache[idx] || {}));
			}, this);
		} else {
			compiler.plugin("compilation", function(compilation) {
				compilation.cache = this.cache;
			}.bind(this));
			compiler.plugin("run", function(compiler, callback) {
				if(!compiler._lastCompilationFileDependencies) return callback();
				var fs = compiler.inputFileSystem;
				var fileTs = compiler.fileTimestamps = {};
				async.forEach(compiler._lastCompilationFileDependencies, function(file, callback) {
					fs.stat(file, function(err, stat) {
						if(err) {
							if(err.code === "ENOENT") return callback();
							return callback(err);
						}
	
						fileTs[file] = stat.mtime || Infinity;
						callback();
					});
				}, callback);
			});
			compiler.plugin("after-compile", function(compilation, callback) {
				compilation.compiler._lastCompilationFileDependencies = compilation.fileDependencies;
				compilation.compiler._lastCompilationContextDependencies = compilation.contextDependencies;
				callback();
			});
		}
	};


/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ModuleParserHelpers = __webpack_require__(112);
	var ConstDependency = __webpack_require__(106);
	
	var NullFactory = __webpack_require__(108);
	
	function ProvidePlugin(definitions) {
		this.definitions = definitions;
	}
	module.exports = ProvidePlugin;
	ProvidePlugin.prototype.apply = function(compiler) {
		compiler.plugin("compilation", function(compilation) {
			compilation.dependencyFactories.set(ConstDependency, new NullFactory());
			compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());
		});
		Object.keys(this.definitions).forEach(function(name) {
			var request = this.definitions[name];
			var splittedName = name.split(".");
			if(splittedName.length > 0) {
				splittedName.slice(1).forEach(function(_, i) {
					var name = splittedName.slice(0, i + 1).join(".");
					compiler.parser.plugin("can-rename " + name, function() {
						return true;
					});
				});
			}
			compiler.parser.plugin("expression " + name, function(expr) {
				var nameIdentifier = name;
				var scopedName = name.indexOf(".") >= 0;
				if(scopedName) {
					nameIdentifier = "__webpack_provided_" + name.replace(/\./g, "_dot_");
				}
				if(!ModuleParserHelpers.addParsedVariable(this, nameIdentifier, "require(" + JSON.stringify(request) + ")")) {
					return false;
				}
				if(scopedName) {
					nameIdentifier = "__webpack_provided_" + name.replace(/\./g, "_dot_");
					var dep = new ConstDependency(nameIdentifier, expr.range);
					dep.loc = expr.loc;
					this.state.current.addDependency(dep);
				}
				return true;
			});
		}, this);
	};


/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var OptionsDefaulter = __webpack_require__(339);
	
	function WebpackOptionsDefaulter() {
		OptionsDefaulter.call(this);
		this.set("debug", false);
		this.set("devtool", false);
		this.set("cache", true);
	
		this.set("context", process.cwd());
		this.set("target", "web");
		this.set("output", {});
		this.set("node", {});
		this.set("resolve", {});
		this.set("resolveLoader", {});
	
		this.set("module.unknownContextRequest", ".");
		this.set("module.unknownContextRecursive", true);
		this.set("module.unknownContextRegExp", /^\.\/.*$/);
		this.set("module.unknownContextCritical", true);
		this.set("module.exprContextRequest", ".");
		this.set("module.exprContextRegExp", /^\.\/.*$/);
		this.set("module.exprContextRecursive", true);
		this.set("module.exprContextCritical", true);
		this.set("module.wrappedContextRegExp", /.*/);
		this.set("module.wrappedContextRecursive", true);
		this.set("module.wrappedContextCritical", false);
	
		this.set("output.libraryTarget", "var");
		this.set("output.path", "");
		this.set("output.sourceMapFilename", "[file].map[query]");
		this.set("output.hotUpdateChunkFilename", "[id].[hash].hot-update.js");
		this.set("output.hotUpdateMainFilename", "[hash].hot-update.json");
		this.set("output.crossOriginLoading", false);
		this.set("output.hashFunction", "md5");
		this.set("output.hashDigest", "hex");
		this.set("output.hashDigestLength", 20);
		this.set("output.sourcePrefix", "\t");
		this.set("output.devtoolLineToLine", false);
	
		this.set("node.console", false);
		this.set("node.process", true);
		this.set("node.global", true);
		// TODO: add this in next major version
		// this.set("node.Buffer", true);
		this.set("node.setImmediate", true);
		this.set("node.__filename", "mock");
		this.set("node.__dirname", "mock");
	
		this.set("resolve.fastUnsafe", []);
		this.set("resolveLoader.fastUnsafe", []);
	
		this.set("resolve.alias", {});
		this.set("resolveLoader.alias", {});
	
		this.set("optimize.occurenceOrderPreferEntry", true);
	}
	module.exports = WebpackOptionsDefaulter;
	
	WebpackOptionsDefaulter.prototype = Object.create(OptionsDefaulter.prototype);
	
	WebpackOptionsDefaulter.prototype.constructor = WebpackOptionsDefaulter;
	
	WebpackOptionsDefaulter.prototype.process = function(options) {
		OptionsDefaulter.prototype.process.call(this, options);
	
		if(options.resolve.packageAlias === undefined) {
			if(options.target === "web" || options.target === "webworker")
				options.resolve.packageAlias = "browser";
		}
	
		function defaultByTarget(value, web, webworker, node, nodeWebkit, def) {
			if(value !== undefined) return value;
			switch(options.target) {
				case "web":
					return web;
				case "webworker":
					return webworker;
				case "node":
				case "async-node":
					return node;
				case "node-webkit":
					return nodeWebkit;
				default:
					return def;
			}
		}
	
		options.resolve.modulesDirectories = defaultByTarget(options.resolve.modulesDirectories, ["web_modules", "node_modules"], ["webworker_modules", "web_modules", "node_modules"], ["node_modules"], ["node_modules", "web_modules"], ["node_modules"]);
	
		options.resolveLoader.modulesDirectories = defaultByTarget(options.resolveLoader.modulesDirectories, ["web_loaders", "web_modules", "node_loaders", "node_modules"], ["webworker_loaders", "web_loaders", "web_modules", "node_loaders", "node_modules"], ["node_loaders", "node_modules"], ["node_loaders", "web_loaders", "node_modules", "web_modules"], ["node_modules"]);
	
		options.resolve.packageMains = defaultByTarget(options.resolve.packageMains, ["webpack", "browser", "web", "browserify", ["jam", "main"], "main"], ["webpackWorker", "webworker", "webpack", "browser", "web", "browserify", ["jam", "main"], "main"], ["webpackNode", "node", "main"], ["webpackNodeWebkit", "webpackNode", "node", "main", "web"], ["main"]);
	
		options.resolve.packageAlias = defaultByTarget(options.resolve.packageAlias,
			"browser",
			"browser",
			false,
			"node-webkit",
			false);
	
		options.resolveLoader.packageMains = defaultByTarget(options.resolveLoader.packageMains, ["webpackLoader", "webLoader", "loader", "main"], ["webpackWorkerLoader", "webworkerLoader", "webLoader", "loader", "main"], ["webpackNodeLoader", "nodeLoader", "loader", "main"], ["webpackNodeWebkitLoader", "webpackNodeLoader", "nodeLoader", "loader", "webLoader", "main"], ["loader", "main"]);
	
		options.resolve.extensions = defaultByTarget(options.resolve.extensions, ["", ".webpack.js", ".web.js", ".js", ".json"], ["", ".webpack-worker.js", ".webworker.js", ".web.js", ".js", ".json"], ["", ".webpack-node.js", ".js", ".json", ".node"], ["", ".webpack-node-webkit.js", ".webpack-node.js", ".js", ".json", ".node", ".web.js"], ["", ".js", ".json"]);
	
		options.resolveLoader.extensions = defaultByTarget(options.resolveLoader.extensions, ["", ".webpack-loader.js", ".web-loader.js", ".loader.js", ".js"], ["", ".webpack-worker-loader.js", ".webpack-loader.js", ".webworker-loader.js", ".web-loader.js", ".loader.js", ".js"], ["", ".webpack-node-loader.js", ".loader.js", ".js"], ["", ".webpack-node-webkit-loader.js", ".webpack-node-loader.js", ".loader.js", ".web-loader.js", ".js"], ["", ".js"]);
	
		options.resolveLoader.moduleTemplates = defaultByTarget(options.resolveLoader.moduleTemplates, ["*-webpack-loader", "*-web-loader", "*-loader", "*"], ["*-webpack-worker-loader", "*-webworker-loader", "*-web-loader", "*-loader", "*"], ["*-webpack-node-loader", "*-node-loader", "*-loader", "*"], ["*-webpack-node-webkit-loader", "*-webpack-node-loader", "*-node-loader", "*-loader", "*-web-loader", "*"], ["*-loader", "*"]);
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))

/***/ },
/* 339 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OptionsDefaulter() {
		this.defaults = {};
		this.config = {};
	}
	module.exports = OptionsDefaulter;
	
	function getProperty(obj, name) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			obj = obj[name[i]];
			if(typeof obj != "object" || !obj) return;
		}
		return obj[name.pop()];
	}
	
	function setProperty(obj, name, value) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			if(typeof (obj[name[i]]) !== "object" || !obj[name[i]]) obj[name[i]] = {};
			obj = obj[name[i]];
		}
		obj[name.pop()] = value;
	}
	
	function hasProperty(obj, name, value) {
		name = name.split(".");
		for(var i = 0; i < name.length - 1; i++) {
			obj = obj[name[i]];
			if(typeof obj != "object" || !obj) return false;
		}
		return Object.prototype.hasOwnProperty.call(obj, name.pop());
	}
	
	OptionsDefaulter.prototype.process = function(options) {
		for(var name in this.defaults) {
			switch(this.config[name]) {
			case undefined:
				if(getProperty(options, name) === undefined)
					setProperty(options, name, this.defaults[name]);
				break;
			case "call":
				setProperty(options, name, this.defaults[name].call(this, getProperty(options, name)), options);
				break;
			case "append":
				var oldValue = getProperty(options, name);
				if(!Array.isArray(oldValue)) oldValue = [];
				this.defaults[name].forEach(function(item) {
					oldValue.push(item);
				});
				setProperty(options, name, oldValue);
				break;
			default:
				throw new Error("OptionsDefaulter cannot process " + this.config[name]);
			}
		}
	};
	
	OptionsDefaulter.prototype.set = function(name, config, def) {
		if(arguments.length === 3) {
			this.defaults[name] = def;
			this.config[name] = config;
		} else {
			this.defaults[name] = config;
			delete this.config[name];
		}
	}

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var ConcatSource = __webpack_require__(341).ConcatSource;
	var async = __webpack_require__(10);
	var ExtractedModule = __webpack_require__(363);
	var Chunk = __webpack_require__(44);
	var OrderUndefinedError = __webpack_require__(364);
	var loaderUtils = __webpack_require__(365);
	
	var nextId = 0;
	
	function ExtractTextPluginCompilation() {
		this.modulesByIdentifier = {};
	}
	
	ExtractTextPlugin.prototype.mergeNonInitialChunks = function(chunk, intoChunk, checkedChunks) {
		if(!intoChunk) {
			checkedChunks = [];
			chunk.chunks.forEach(function(c) {
				if(c.initial) return;
				this.mergeNonInitialChunks(c, chunk, checkedChunks);
			}, this);
		} else if(checkedChunks.indexOf(chunk) < 0) {
			checkedChunks.push(chunk);
			chunk.modules.slice().forEach(function(module) {
				intoChunk.addModule(module);
				module.addChunk(intoChunk);
			});
			chunk.chunks.forEach(function(c) {
				if(c.initial) return;
				this.mergeNonInitialChunks(c, intoChunk, checkedChunks);
			}, this);
		}
	};
	
	ExtractTextPluginCompilation.prototype.addModule = function(identifier, originalModule, source, additionalInformation, sourceMap, prevModules) {
		var m;
		if(!this.modulesByIdentifier[identifier]) {
			m = this.modulesByIdentifier[identifier] = new ExtractedModule(identifier, originalModule, source, sourceMap, additionalInformation, prevModules);
		} else {
			m = this.modulesByIdentifier[identifier];
			m.addPrevModules(prevModules);
			if(originalModule.index2 < m.getOriginalModule().index2) {
				m.setOriginalModule(originalModule);
			}
		}
		return m;
	};
	
	ExtractTextPluginCompilation.prototype.addResultToChunk = function(identifier, result, originalModule, extractedChunk) {
		if(!Array.isArray(result)) {
			result = [[identifier, result]];
		}
		var counterMap = {};
		var prevModules = [];
		result.forEach(function(item) {
			var c = counterMap[item[0]];
			var module = this.addModule.call(this, item[0] + (c || ""), originalModule, item[1], item[2], item[3], prevModules.slice());
			extractedChunk.addModule(module);
			module.addChunk(extractedChunk);
			counterMap[item[0]] = (c || 0) + 1;
			prevModules.push(module);
		}, this);
	};
	
	ExtractTextPlugin.prototype.renderExtractedChunk = function(chunk) {
		var source = new ConcatSource();
		chunk.modules.forEach(function(module) {
			var moduleSource = module.source();
			source.add(this.applyAdditionalInformation(moduleSource, module.additionalInformation));
		}, this);
		return source;
	};
	
	function isInvalidOrder(a, b) {
		var bBeforeA = a.getPrevModules().indexOf(b) >= 0;
		var aBeforeB = b.getPrevModules().indexOf(a) >= 0;
		return aBeforeB && bBeforeA;
	}
	
	function getOrder(a, b) {
		var aOrder = a.getOrder();
		var bOrder = b.getOrder();
		if(aOrder < bOrder) return -1;
		if(aOrder > bOrder) return 1;
		var aIndex = a.getOriginalModule().index2;
		var bIndex = b.getOriginalModule().index2;
		if(aIndex < bIndex) return -1;
		if(aIndex > bIndex) return 1;
		var bBeforeA = a.getPrevModules().indexOf(b) >= 0;
		var aBeforeB = b.getPrevModules().indexOf(a) >= 0;
		if(aBeforeB && !bBeforeA) return -1;
		if(!aBeforeB && bBeforeA) return 1;
		var ai = a.identifier();
		var bi = b.identifier();
		if(ai < bi) return -1;
		if(ai > bi) return 1;
		return 0;
	}
	
	function ExtractTextPlugin(id, filename, options) {
		if(typeof filename !== "string") {
			options = filename;
			filename = id;
			id = ++nextId;
		}
		if(!options) options = {};
		this.filename = filename;
		this.options = options;
		this.id = id;
	}
	module.exports = ExtractTextPlugin;
	
	function mergeOptions(a, b) {
		if(!b) return a;
		Object.keys(b).forEach(function(key) {
			a[key] = b[key];
		});
		return a;
	}
	
	ExtractTextPlugin.loader = function(options) {
		return /*require.resolve*/(370) + (options ? "?" + JSON.stringify(options) : "");
	};
	
	ExtractTextPlugin.extract = function(before, loader, options) {
		if(typeof loader === "string" || Array.isArray(loader)) {
			if(typeof before === "string") {
				before = before.split("!");
			}
			return [
				ExtractTextPlugin.loader(mergeOptions({omit: before.length, extract: true, remove: true}, options))
			].concat(before, loader).join("!");
		} else {
			options = loader;
			loader = before;
			return [
				ExtractTextPlugin.loader(mergeOptions({remove: true}, options))
			].concat(loader).join("!");
		}
	};
	
	ExtractTextPlugin.prototype.applyAdditionalInformation = function(source, info) {
		if(info) {
			return new ConcatSource(
				"@media " + info[0] + " {",
				source,
				"}"
			);
		}
		return source;
	};
	
	ExtractTextPlugin.prototype.loader = function(options) {
		options = JSON.parse(JSON.stringify(options || {}));
		options.id = this.id;
		return ExtractTextPlugin.loader(options);
	};
	
	ExtractTextPlugin.prototype.extract = function(before, loader, options) {
		if(typeof loader === "string" || Array.isArray(loader)) {
			if(typeof before === "string") {
				before = before.split("!");
			}
			return [
				this.loader(mergeOptions({omit: before.length, extract: true, remove: true}, options))
			].concat(before, loader).join("!");
		} else {
			options = loader;
			loader = before;
			return [
				this.loader(mergeOptions({remove: true}, options))
			].concat(loader).join("!");
		}
	};
	
	ExtractTextPlugin.prototype.apply = function(compiler) {
		var options = this.options;
		compiler.plugin("this-compilation", function(compilation) {
			var extractCompilation = new ExtractTextPluginCompilation();
			compilation.plugin("normal-module-loader", function(loaderContext, module) {
				loaderContext[__dirname] = function(content, opt) {
					if(options.disable)
						return false;
					if(!Array.isArray(content) && content !== null)
						throw new Error("Exported value is not a string.");
					module.meta[__dirname] = {
						content: content,
						options: opt || {}
					};
					return options.allChunks || module.meta[__dirname + "/extract"]; // eslint-disable-line no-path-concat
				};
			});
			var filename = this.filename;
			var id = this.id;
			var extractedChunks, entryChunks, initialChunks;
			compilation.plugin("optimize", function() {
				entryChunks = compilation.chunks.filter(function(c) {
					return c.entry;
				});
				initialChunks = compilation.chunks.filter(function(c) {
					return c.initial;
				});
			});
			compilation.plugin("optimize-tree", function(chunks, modules, callback) {
				extractedChunks = chunks.map(function() {
					return new Chunk();
				});
				chunks.forEach(function(chunk, i) {
					var extractedChunk = extractedChunks[i];
					extractedChunk.index = i;
					extractedChunk.originalChunk = chunk;
					extractedChunk.name = chunk.name;
					extractedChunk.entry = chunk.entry;
					extractedChunk.initial = chunk.initial;
					chunk.chunks.forEach(function(c) {
						extractedChunk.addChunk(extractedChunks[chunks.indexOf(c)]);
					});
					chunk.parents.forEach(function(c) {
						extractedChunk.addParent(extractedChunks[chunks.indexOf(c)]);
					});
				});
				entryChunks.forEach(function(chunk) {
					var idx = chunks.indexOf(chunk);
					if(idx < 0) return;
					var extractedChunk = extractedChunks[idx];
					extractedChunk.entry = true;
				});
				initialChunks.forEach(function(chunk) {
					var idx = chunks.indexOf(chunk);
					if(idx < 0) return;
					var extractedChunk = extractedChunks[idx];
					extractedChunk.initial = true;
				});
				async.forEach(chunks, function(chunk, callback) {
					var extractedChunk = extractedChunks[chunks.indexOf(chunk)];
					var shouldExtract = !!(options.allChunks || chunk.initial);
					async.forEach(chunk.modules.slice(), function(module, callback) {
						var meta = module.meta && module.meta[__dirname];
						if(meta && (!meta.options.id || meta.options.id === id)) {
							var wasExtracted = Array.isArray(meta.content);
							if(shouldExtract !== wasExtracted) {
								module.meta[__dirname + "/extract"] = shouldExtract; // eslint-disable-line no-path-concat
								compilation.rebuildModule(module, function(err) {
									if(err) {
										compilation.errors.push(err);
										return callback();
									}
									meta = module.meta[__dirname];
									if(!Array.isArray(meta.content)) {
										err = new Error(module.identifier() + " doesn't export content");
										compilation.errors.push(err);
										return callback();
									}
									if(meta.content)
										extractCompilation.addResultToChunk(module.identifier(), meta.content, module, extractedChunk);
									callback();
								});
							} else {
								if(meta.content)
									extractCompilation.addResultToChunk(module.identifier(), meta.content, module, extractedChunk);
								callback();
							}
						} else callback();
					}, function(err) {
						if(err) return callback(err);
						callback();
					});
				}, function(err) {
					if(err) return callback(err);
					extractedChunks.forEach(function(extractedChunk) {
						if(extractedChunk.initial)
							this.mergeNonInitialChunks(extractedChunk);
					}, this);
					extractedChunks.forEach(function(extractedChunk) {
						if(!extractedChunk.initial) {
							extractedChunk.modules.forEach(function(module) {
								extractedChunk.removeModule(module);
							});
						}
					});
					compilation.applyPlugins("optimize-extracted-chunks", extractedChunks);
					callback();
				}.bind(this));
			}.bind(this));
			compilation.plugin("additional-assets", function(callback) {
				extractedChunks.forEach(function(extractedChunk) {
					if(extractedChunk.modules.length) {
						extractedChunk.modules.sort(function(a, b) {
							if(isInvalidOrder(a, b)) {
								compilation.errors.push(new OrderUndefinedError(a.getOriginalModule()));
								compilation.errors.push(new OrderUndefinedError(b.getOriginalModule()));
							}
							return getOrder(a, b);
						});
						var chunk = extractedChunk.originalChunk;
						var source = this.renderExtractedChunk(extractedChunk);
						var file = compilation.getPath(filename, {
							chunk: chunk
						}).replace(/\[(?:(\w+):)?contenthash(?::([a-z]+\d*))?(?::(\d+))?\]/ig, function() {
							return loaderUtils.getHashDigest(source.source(), arguments[1], arguments[2], parseInt(arguments[3], 10));
						});
						compilation.assets[file] = source;
						chunk.files.push(file);
					}
				}, this);
				callback();
			}.bind(this));
		}.bind(this));
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	exports.Source = __webpack_require__(342);
	
	exports.RawSource = __webpack_require__(354);
	exports.OriginalSource = __webpack_require__(355);
	exports.SourceMapSource = __webpack_require__(357);
	exports.LineToLineMappedSource = __webpack_require__(358);
	
	exports.CachedSource = __webpack_require__(359);
	exports.ConcatSource = __webpack_require__(360);
	exports.ReplaceSource = __webpack_require__(361);
	exports.PrefixSource = __webpack_require__(362);


/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceMapConsumer = __webpack_require__(343).SourceMapConsumer;
	
	function Source() {}
	
	module.exports = Source;
	
	Source.prototype.source = null;
	
	Source.prototype.size = function() {
		return this.source().length;
	};
	
	Source.prototype.map = function(options) {
		return null;
	};
	
	Source.prototype.sourceAndMap = function(options) {
		return {
			source: this.source(),
			map: this.map()
		};
	};
	
	Source.prototype.node = null;
	
	Source.prototype.listNode = null;
	
	Source.prototype.updateHash = function(hash) {
		var source = this.source();
		hash.update(source || "");
	};


/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(344).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(350).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(353).SourceNode;


/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var base64VLQ = __webpack_require__(345);
	var util = __webpack_require__(347);
	var ArraySet = __webpack_require__(348).ArraySet;
	var MappingList = __webpack_require__(349).MappingList;
	
	/**
	 * An instance of the SourceMapGenerator represents a source map which is
	 * being built incrementally. You may pass an object with the following
	 * properties:
	 *
	 *   - file: The filename of the generated source.
	 *   - sourceRoot: A root for all relative URLs in this source map.
	 */
	function SourceMapGenerator(aArgs) {
	  if (!aArgs) {
	    aArgs = {};
	  }
	  this._file = util.getArg(aArgs, 'file', null);
	  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	  this._mappings = new MappingList();
	  this._sourcesContents = null;
	}
	
	SourceMapGenerator.prototype._version = 3;
	
	/**
	 * Creates a new SourceMapGenerator based on a SourceMapConsumer
	 *
	 * @param aSourceMapConsumer The SourceMap.
	 */
	SourceMapGenerator.fromSourceMap =
	  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	    var sourceRoot = aSourceMapConsumer.sourceRoot;
	    var generator = new SourceMapGenerator({
	      file: aSourceMapConsumer.file,
	      sourceRoot: sourceRoot
	    });
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      var newMapping = {
	        generated: {
	          line: mapping.generatedLine,
	          column: mapping.generatedColumn
	        }
	      };
	
	      if (mapping.source != null) {
	        newMapping.source = mapping.source;
	        if (sourceRoot != null) {
	          newMapping.source = util.relative(sourceRoot, newMapping.source);
	        }
	
	        newMapping.original = {
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        };
	
	        if (mapping.name != null) {
	          newMapping.name = mapping.name;
	        }
	      }
	
	      generator.addMapping(newMapping);
	    });
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        generator.setSourceContent(sourceFile, content);
	      }
	    });
	    return generator;
	  };
	
	/**
	 * Add a single mapping from original source line and column to the generated
	 * source's line and column for this source map being created. The mapping
	 * object should have the following properties:
	 *
	 *   - generated: An object with the generated line and column positions.
	 *   - original: An object with the original line and column positions.
	 *   - source: The original source file (relative to the sourceRoot).
	 *   - name: An optional original token name for this mapping.
	 */
	SourceMapGenerator.prototype.addMapping =
	  function SourceMapGenerator_addMapping(aArgs) {
	    var generated = util.getArg(aArgs, 'generated');
	    var original = util.getArg(aArgs, 'original', null);
	    var source = util.getArg(aArgs, 'source', null);
	    var name = util.getArg(aArgs, 'name', null);
	
	    if (!this._skipValidation) {
	      this._validateMapping(generated, original, source, name);
	    }
	
	    if (source != null) {
	      source = String(source);
	      if (!this._sources.has(source)) {
	        this._sources.add(source);
	      }
	    }
	
	    if (name != null) {
	      name = String(name);
	      if (!this._names.has(name)) {
	        this._names.add(name);
	      }
	    }
	
	    this._mappings.add({
	      generatedLine: generated.line,
	      generatedColumn: generated.column,
	      originalLine: original != null && original.line,
	      originalColumn: original != null && original.column,
	      source: source,
	      name: name
	    });
	  };
	
	/**
	 * Set the source content for a source file.
	 */
	SourceMapGenerator.prototype.setSourceContent =
	  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	    var source = aSourceFile;
	    if (this._sourceRoot != null) {
	      source = util.relative(this._sourceRoot, source);
	    }
	
	    if (aSourceContent != null) {
	      // Add the source content to the _sourcesContents map.
	      // Create a new _sourcesContents map if the property is null.
	      if (!this._sourcesContents) {
	        this._sourcesContents = Object.create(null);
	      }
	      this._sourcesContents[util.toSetString(source)] = aSourceContent;
	    } else if (this._sourcesContents) {
	      // Remove the source file from the _sourcesContents map.
	      // If the _sourcesContents map is empty, set the property to null.
	      delete this._sourcesContents[util.toSetString(source)];
	      if (Object.keys(this._sourcesContents).length === 0) {
	        this._sourcesContents = null;
	      }
	    }
	  };
	
	/**
	 * Applies the mappings of a sub-source-map for a specific source file to the
	 * source map being generated. Each mapping to the supplied source file is
	 * rewritten using the supplied source map. Note: The resolution for the
	 * resulting mappings is the minimium of this map and the supplied map.
	 *
	 * @param aSourceMapConsumer The source map to be applied.
	 * @param aSourceFile Optional. The filename of the source file.
	 *        If omitted, SourceMapConsumer's file property will be used.
	 * @param aSourceMapPath Optional. The dirname of the path to the source map
	 *        to be applied. If relative, it is relative to the SourceMapConsumer.
	 *        This parameter is needed when the two source maps aren't in the same
	 *        directory, and the source map to be applied contains relative source
	 *        paths. If so, those relative source paths need to be rewritten
	 *        relative to the SourceMapGenerator.
	 */
	SourceMapGenerator.prototype.applySourceMap =
	  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	    var sourceFile = aSourceFile;
	    // If aSourceFile is omitted, we will use the file property of the SourceMap
	    if (aSourceFile == null) {
	      if (aSourceMapConsumer.file == null) {
	        throw new Error(
	          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	          'or the source map\'s "file" property. Both were omitted.'
	        );
	      }
	      sourceFile = aSourceMapConsumer.file;
	    }
	    var sourceRoot = this._sourceRoot;
	    // Make "sourceFile" relative if an absolute Url is passed.
	    if (sourceRoot != null) {
	      sourceFile = util.relative(sourceRoot, sourceFile);
	    }
	    // Applying the SourceMap can add and remove items from the sources and
	    // the names array.
	    var newSources = new ArraySet();
	    var newNames = new ArraySet();
	
	    // Find mappings for the "sourceFile"
	    this._mappings.unsortedForEach(function (mapping) {
	      if (mapping.source === sourceFile && mapping.originalLine != null) {
	        // Check if it can be mapped by the source map, then update the mapping.
	        var original = aSourceMapConsumer.originalPositionFor({
	          line: mapping.originalLine,
	          column: mapping.originalColumn
	        });
	        if (original.source != null) {
	          // Copy mapping
	          mapping.source = original.source;
	          if (aSourceMapPath != null) {
	            mapping.source = util.join(aSourceMapPath, mapping.source)
	          }
	          if (sourceRoot != null) {
	            mapping.source = util.relative(sourceRoot, mapping.source);
	          }
	          mapping.originalLine = original.line;
	          mapping.originalColumn = original.column;
	          if (original.name != null) {
	            mapping.name = original.name;
	          }
	        }
	      }
	
	      var source = mapping.source;
	      if (source != null && !newSources.has(source)) {
	        newSources.add(source);
	      }
	
	      var name = mapping.name;
	      if (name != null && !newNames.has(name)) {
	        newNames.add(name);
	      }
	
	    }, this);
	    this._sources = newSources;
	    this._names = newNames;
	
	    // Copy sourcesContents of applied map.
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aSourceMapPath != null) {
	          sourceFile = util.join(aSourceMapPath, sourceFile);
	        }
	        if (sourceRoot != null) {
	          sourceFile = util.relative(sourceRoot, sourceFile);
	        }
	        this.setSourceContent(sourceFile, content);
	      }
	    }, this);
	  };
	
	/**
	 * A mapping can have one of the three levels of data:
	 *
	 *   1. Just the generated position.
	 *   2. The Generated position, original position, and original source.
	 *   3. Generated and original position, original source, as well as a name
	 *      token.
	 *
	 * To maintain consistency, we validate that any new mapping being added falls
	 * in to one of these categories.
	 */
	SourceMapGenerator.prototype._validateMapping =
	  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                              aName) {
	    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	        && aGenerated.line > 0 && aGenerated.column >= 0
	        && !aOriginal && !aSource && !aName) {
	      // Case 1.
	      return;
	    }
	    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	             && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	             && aGenerated.line > 0 && aGenerated.column >= 0
	             && aOriginal.line > 0 && aOriginal.column >= 0
	             && aSource) {
	      // Cases 2 and 3.
	      return;
	    }
	    else {
	      throw new Error('Invalid mapping: ' + JSON.stringify({
	        generated: aGenerated,
	        source: aSource,
	        original: aOriginal,
	        name: aName
	      }));
	    }
	  };
	
	/**
	 * Serialize the accumulated mappings in to the stream of base 64 VLQs
	 * specified by the source map format.
	 */
	SourceMapGenerator.prototype._serializeMappings =
	  function SourceMapGenerator_serializeMappings() {
	    var previousGeneratedColumn = 0;
	    var previousGeneratedLine = 1;
	    var previousOriginalColumn = 0;
	    var previousOriginalLine = 0;
	    var previousName = 0;
	    var previousSource = 0;
	    var result = '';
	    var next;
	    var mapping;
	    var nameIdx;
	    var sourceIdx;
	
	    var mappings = this._mappings.toArray();
	    for (var i = 0, len = mappings.length; i < len; i++) {
	      mapping = mappings[i];
	      next = ''
	
	      if (mapping.generatedLine !== previousGeneratedLine) {
	        previousGeneratedColumn = 0;
	        while (mapping.generatedLine !== previousGeneratedLine) {
	          next += ';';
	          previousGeneratedLine++;
	        }
	      }
	      else {
	        if (i > 0) {
	          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	            continue;
	          }
	          next += ',';
	        }
	      }
	
	      next += base64VLQ.encode(mapping.generatedColumn
	                                 - previousGeneratedColumn);
	      previousGeneratedColumn = mapping.generatedColumn;
	
	      if (mapping.source != null) {
	        sourceIdx = this._sources.indexOf(mapping.source);
	        next += base64VLQ.encode(sourceIdx - previousSource);
	        previousSource = sourceIdx;
	
	        // lines are stored 0-based in SourceMap spec version 3
	        next += base64VLQ.encode(mapping.originalLine - 1
	                                   - previousOriginalLine);
	        previousOriginalLine = mapping.originalLine - 1;
	
	        next += base64VLQ.encode(mapping.originalColumn
	                                   - previousOriginalColumn);
	        previousOriginalColumn = mapping.originalColumn;
	
	        if (mapping.name != null) {
	          nameIdx = this._names.indexOf(mapping.name);
	          next += base64VLQ.encode(nameIdx - previousName);
	          previousName = nameIdx;
	        }
	      }
	
	      result += next;
	    }
	
	    return result;
	  };
	
	SourceMapGenerator.prototype._generateSourcesContent =
	  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	    return aSources.map(function (source) {
	      if (!this._sourcesContents) {
	        return null;
	      }
	      if (aSourceRoot != null) {
	        source = util.relative(aSourceRoot, source);
	      }
	      var key = util.toSetString(source);
	      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)
	        ? this._sourcesContents[key]
	        : null;
	    }, this);
	  };
	
	/**
	 * Externalize the source map.
	 */
	SourceMapGenerator.prototype.toJSON =
	  function SourceMapGenerator_toJSON() {
	    var map = {
	      version: this._version,
	      sources: this._sources.toArray(),
	      names: this._names.toArray(),
	      mappings: this._serializeMappings()
	    };
	    if (this._file != null) {
	      map.file = this._file;
	    }
	    if (this._sourceRoot != null) {
	      map.sourceRoot = this._sourceRoot;
	    }
	    if (this._sourcesContents) {
	      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	    }
	
	    return map;
	  };
	
	/**
	 * Render the source map being generated to a string.
	 */
	SourceMapGenerator.prototype.toString =
	  function SourceMapGenerator_toString() {
	    return JSON.stringify(this.toJSON());
	  };
	
	exports.SourceMapGenerator = SourceMapGenerator;


/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	
	var base64 = __webpack_require__(346);
	
	// A single base 64 digit can contain 6 bits of data. For the base 64 variable
	// length quantities we use in the source map spec, the first bit is the sign,
	// the next four bits are the actual value, and the 6th bit is the
	// continuation bit. The continuation bit tells us whether there are more
	// digits in this value following this digit.
	//
	//   Continuation
	//   |    Sign
	//   |    |
	//   V    V
	//   101011
	
	var VLQ_BASE_SHIFT = 5;
	
	// binary: 100000
	var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
	
	// binary: 011111
	var VLQ_BASE_MASK = VLQ_BASE - 1;
	
	// binary: 100000
	var VLQ_CONTINUATION_BIT = VLQ_BASE;
	
	/**
	 * Converts from a two-complement value to a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	 *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	 */
	function toVLQSigned(aValue) {
	  return aValue < 0
	    ? ((-aValue) << 1) + 1
	    : (aValue << 1) + 0;
	}
	
	/**
	 * Converts to a two-complement value from a value where the sign bit is
	 * placed in the least significant bit.  For example, as decimals:
	 *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	 *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	 */
	function fromVLQSigned(aValue) {
	  var isNegative = (aValue & 1) === 1;
	  var shifted = aValue >> 1;
	  return isNegative
	    ? -shifted
	    : shifted;
	}
	
	/**
	 * Returns the base 64 VLQ encoded value.
	 */
	exports.encode = function base64VLQ_encode(aValue) {
	  var encoded = "";
	  var digit;
	
	  var vlq = toVLQSigned(aValue);
	
	  do {
	    digit = vlq & VLQ_BASE_MASK;
	    vlq >>>= VLQ_BASE_SHIFT;
	    if (vlq > 0) {
	      // There are still more digits in this value, so we must make sure the
	      // continuation bit is marked.
	      digit |= VLQ_CONTINUATION_BIT;
	    }
	    encoded += base64.encode(digit);
	  } while (vlq > 0);
	
	  return encoded;
	};
	
	/**
	 * Decodes the next base 64 VLQ value from the given string and returns the
	 * value and the rest of the string via the out parameter.
	 */
	exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	  var strLen = aStr.length;
	  var result = 0;
	  var shift = 0;
	  var continuation, digit;
	
	  do {
	    if (aIndex >= strLen) {
	      throw new Error("Expected more digits in base 64 VLQ value.");
	    }
	
	    digit = base64.decode(aStr.charCodeAt(aIndex++));
	    if (digit === -1) {
	      throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	    }
	
	    continuation = !!(digit & VLQ_CONTINUATION_BIT);
	    digit &= VLQ_BASE_MASK;
	    result = result + (digit << shift);
	    shift += VLQ_BASE_SHIFT;
	  } while (continuation);
	
	  aOutParam.value = fromVLQSigned(result);
	  aOutParam.rest = aIndex;
	};


/***/ },
/* 346 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
	
	/**
	 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	 */
	exports.encode = function (number) {
	  if (0 <= number && number < intToCharMap.length) {
	    return intToCharMap[number];
	  }
	  throw new TypeError("Must be between 0 and 63: " + number);
	};
	
	/**
	 * Decode a single base 64 character code digit to an integer. Returns -1 on
	 * failure.
	 */
	exports.decode = function (charCode) {
	  var bigA = 65;     // 'A'
	  var bigZ = 90;     // 'Z'
	
	  var littleA = 97;  // 'a'
	  var littleZ = 122; // 'z'
	
	  var zero = 48;     // '0'
	  var nine = 57;     // '9'
	
	  var plus = 43;     // '+'
	  var slash = 47;    // '/'
	
	  var littleOffset = 26;
	  var numberOffset = 52;
	
	  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	  if (bigA <= charCode && charCode <= bigZ) {
	    return (charCode - bigA);
	  }
	
	  // 26 - 51: abcdefghijklmnopqrstuvwxyz
	  if (littleA <= charCode && charCode <= littleZ) {
	    return (charCode - littleA + littleOffset);
	  }
	
	  // 52 - 61: 0123456789
	  if (zero <= charCode && charCode <= nine) {
	    return (charCode - zero + numberOffset);
	  }
	
	  // 62: +
	  if (charCode == plus) {
	    return 62;
	  }
	
	  // 63: /
	  if (charCode == slash) {
	    return 63;
	  }
	
	  // Invalid base64 digit.
	  return -1;
	};


/***/ },
/* 347 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	/**
	 * This is a helper function for getting values from parameter/options
	 * objects.
	 *
	 * @param args The object we are extracting values from
	 * @param name The name of the property we are getting.
	 * @param defaultValue An optional value to return if the property is missing
	 * from the object. If this is not specified and the property is missing, an
	 * error will be thrown.
	 */
	function getArg(aArgs, aName, aDefaultValue) {
	  if (aName in aArgs) {
	    return aArgs[aName];
	  } else if (arguments.length === 3) {
	    return aDefaultValue;
	  } else {
	    throw new Error('"' + aName + '" is a required argument.');
	  }
	}
	exports.getArg = getArg;
	
	var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	var dataUrlRegexp = /^data:.+\,.+$/;
	
	function urlParse(aUrl) {
	  var match = aUrl.match(urlRegexp);
	  if (!match) {
	    return null;
	  }
	  return {
	    scheme: match[1],
	    auth: match[2],
	    host: match[3],
	    port: match[4],
	    path: match[5]
	  };
	}
	exports.urlParse = urlParse;
	
	function urlGenerate(aParsedUrl) {
	  var url = '';
	  if (aParsedUrl.scheme) {
	    url += aParsedUrl.scheme + ':';
	  }
	  url += '//';
	  if (aParsedUrl.auth) {
	    url += aParsedUrl.auth + '@';
	  }
	  if (aParsedUrl.host) {
	    url += aParsedUrl.host;
	  }
	  if (aParsedUrl.port) {
	    url += ":" + aParsedUrl.port
	  }
	  if (aParsedUrl.path) {
	    url += aParsedUrl.path;
	  }
	  return url;
	}
	exports.urlGenerate = urlGenerate;
	
	/**
	 * Normalizes a path, or the path portion of a URL:
	 *
	 * - Replaces consecutive slashes with one slash.
	 * - Removes unnecessary '.' parts.
	 * - Removes unnecessary '<dir>/..' parts.
	 *
	 * Based on code in the Node.js 'path' core module.
	 *
	 * @param aPath The path or url to normalize.
	 */
	function normalize(aPath) {
	  var path = aPath;
	  var url = urlParse(aPath);
	  if (url) {
	    if (!url.path) {
	      return aPath;
	    }
	    path = url.path;
	  }
	  var isAbsolute = exports.isAbsolute(path);
	
	  var parts = path.split(/\/+/);
	  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	    part = parts[i];
	    if (part === '.') {
	      parts.splice(i, 1);
	    } else if (part === '..') {
	      up++;
	    } else if (up > 0) {
	      if (part === '') {
	        // The first part is blank if the path is absolute. Trying to go
	        // above the root is a no-op. Therefore we can remove all '..' parts
	        // directly after the root.
	        parts.splice(i + 1, up);
	        up = 0;
	      } else {
	        parts.splice(i, 2);
	        up--;
	      }
	    }
	  }
	  path = parts.join('/');
	
	  if (path === '') {
	    path = isAbsolute ? '/' : '.';
	  }
	
	  if (url) {
	    url.path = path;
	    return urlGenerate(url);
	  }
	  return path;
	}
	exports.normalize = normalize;
	
	/**
	 * Joins two paths/URLs.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be joined with the root.
	 *
	 * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	 *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	 *   first.
	 * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	 *   is updated with the result and aRoot is returned. Otherwise the result
	 *   is returned.
	 *   - If aPath is absolute, the result is aPath.
	 *   - Otherwise the two paths are joined with a slash.
	 * - Joining for example 'http://' and 'www.example.com' is also supported.
	 */
	function join(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	  if (aPath === "") {
	    aPath = ".";
	  }
	  var aPathUrl = urlParse(aPath);
	  var aRootUrl = urlParse(aRoot);
	  if (aRootUrl) {
	    aRoot = aRootUrl.path || '/';
	  }
	
	  // `join(foo, '//www.example.org')`
	  if (aPathUrl && !aPathUrl.scheme) {
	    if (aRootUrl) {
	      aPathUrl.scheme = aRootUrl.scheme;
	    }
	    return urlGenerate(aPathUrl);
	  }
	
	  if (aPathUrl || aPath.match(dataUrlRegexp)) {
	    return aPath;
	  }
	
	  // `join('http://', 'www.example.com')`
	  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	    aRootUrl.host = aPath;
	    return urlGenerate(aRootUrl);
	  }
	
	  var joined = aPath.charAt(0) === '/'
	    ? aPath
	    : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
	
	  if (aRootUrl) {
	    aRootUrl.path = joined;
	    return urlGenerate(aRootUrl);
	  }
	  return joined;
	}
	exports.join = join;
	
	exports.isAbsolute = function (aPath) {
	  return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	};
	
	/**
	 * Make a path relative to a URL or another path.
	 *
	 * @param aRoot The root path or URL.
	 * @param aPath The path or URL to be made relative to aRoot.
	 */
	function relative(aRoot, aPath) {
	  if (aRoot === "") {
	    aRoot = ".";
	  }
	
	  aRoot = aRoot.replace(/\/$/, '');
	
	  // It is possible for the path to be above the root. In this case, simply
	  // checking whether the root is a prefix of the path won't work. Instead, we
	  // need to remove components from the root one by one, until either we find
	  // a prefix that fits, or we run out of components to remove.
	  var level = 0;
	  while (aPath.indexOf(aRoot + '/') !== 0) {
	    var index = aRoot.lastIndexOf("/");
	    if (index < 0) {
	      return aPath;
	    }
	
	    // If the only part of the root that is left is the scheme (i.e. http://,
	    // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	    // have exhausted all components, so the path is not relative to the root.
	    aRoot = aRoot.slice(0, index);
	    if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	      return aPath;
	    }
	
	    ++level;
	  }
	
	  // Make sure we add a "../" for each component we removed from the root.
	  return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	}
	exports.relative = relative;
	
	var supportsNullProto = (function () {
	  var obj = Object.create(null);
	  return !('__proto__' in obj);
	}());
	
	function identity (s) {
	  return s;
	}
	
	/**
	 * Because behavior goes wacky when you set `__proto__` on objects, we
	 * have to prefix all the strings in our set with an arbitrary character.
	 *
	 * See https://github.com/mozilla/source-map/pull/31 and
	 * https://github.com/mozilla/source-map/issues/30
	 *
	 * @param String aStr
	 */
	function toSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return '$' + aStr;
	  }
	
	  return aStr;
	}
	exports.toSetString = supportsNullProto ? identity : toSetString;
	
	function fromSetString(aStr) {
	  if (isProtoString(aStr)) {
	    return aStr.slice(1);
	  }
	
	  return aStr;
	}
	exports.fromSetString = supportsNullProto ? identity : fromSetString;
	
	function isProtoString(s) {
	  if (!s) {
	    return false;
	  }
	
	  var length = s.length;
	
	  if (length < 9 /* "__proto__".length */) {
	    return false;
	  }
	
	  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 2) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 4) !== 116 /* 't' */ ||
	      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||
	      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||
	      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||
	      s.charCodeAt(length - 8) !== 95  /* '_' */ ||
	      s.charCodeAt(length - 9) !== 95  /* '_' */) {
	    return false;
	  }
	
	  for (var i = length - 10; i >= 0; i--) {
	    if (s.charCodeAt(i) !== 36 /* '$' */) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	/**
	 * Comparator between two mappings where the original positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same original source/line/column, but different generated
	 * line and column the same. Useful when searching for a mapping with a
	 * stubbed out mapping.
	 */
	function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	  var cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0 || onlyCompareOriginal) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByOriginalPositions = compareByOriginalPositions;
	
	/**
	 * Comparator between two mappings with deflated source and name indices where
	 * the generated positions are compared.
	 *
	 * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	 * mappings with the same generated line and column, but different
	 * source/name/original line and column the same. Useful when searching for a
	 * mapping with a stubbed out mapping.
	 */
	function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0 || onlyCompareGenerated) {
	    return cmp;
	  }
	
	  cmp = mappingA.source - mappingB.source;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return mappingA.name - mappingB.name;
	}
	exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
	
	function strcmp(aStr1, aStr2) {
	  if (aStr1 === aStr2) {
	    return 0;
	  }
	
	  if (aStr1 > aStr2) {
	    return 1;
	  }
	
	  return -1;
	}
	
	/**
	 * Comparator between two mappings with inflated source and name strings where
	 * the generated positions are compared.
	 */
	function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	  var cmp = mappingA.generatedLine - mappingB.generatedLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = strcmp(mappingA.source, mappingB.source);
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalLine - mappingB.originalLine;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  cmp = mappingA.originalColumn - mappingB.originalColumn;
	  if (cmp !== 0) {
	    return cmp;
	  }
	
	  return strcmp(mappingA.name, mappingB.name);
	}
	exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;


/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(347);
	var has = Object.prototype.hasOwnProperty;
	
	/**
	 * A data structure which is a combination of an array and a set. Adding a new
	 * member is O(1), testing for membership is O(1), and finding the index of an
	 * element is O(1). Removing elements from the set is not supported. Only
	 * strings are supported for membership.
	 */
	function ArraySet() {
	  this._array = [];
	  this._set = Object.create(null);
	}
	
	/**
	 * Static method for creating ArraySet instances from an existing array.
	 */
	ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	  var set = new ArraySet();
	  for (var i = 0, len = aArray.length; i < len; i++) {
	    set.add(aArray[i], aAllowDuplicates);
	  }
	  return set;
	};
	
	/**
	 * Return how many unique items are in this ArraySet. If duplicates have been
	 * added, than those do not count towards the size.
	 *
	 * @returns Number
	 */
	ArraySet.prototype.size = function ArraySet_size() {
	  return Object.getOwnPropertyNames(this._set).length;
	};
	
	/**
	 * Add the given string to this set.
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	  var sStr = util.toSetString(aStr);
	  var isDuplicate = has.call(this._set, sStr);
	  var idx = this._array.length;
	  if (!isDuplicate || aAllowDuplicates) {
	    this._array.push(aStr);
	  }
	  if (!isDuplicate) {
	    this._set[sStr] = idx;
	  }
	};
	
	/**
	 * Is the given string a member of this set?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.has = function ArraySet_has(aStr) {
	  var sStr = util.toSetString(aStr);
	  return has.call(this._set, sStr);
	};
	
	/**
	 * What is the index of the given string in the array?
	 *
	 * @param String aStr
	 */
	ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	  var sStr = util.toSetString(aStr);
	  if (has.call(this._set, sStr)) {
	    return this._set[sStr];
	  }
	  throw new Error('"' + aStr + '" is not in the set.');
	};
	
	/**
	 * What is the element at the given index?
	 *
	 * @param Number aIdx
	 */
	ArraySet.prototype.at = function ArraySet_at(aIdx) {
	  if (aIdx >= 0 && aIdx < this._array.length) {
	    return this._array[aIdx];
	  }
	  throw new Error('No element indexed by ' + aIdx);
	};
	
	/**
	 * Returns the array representation of this set (which has the proper indices
	 * indicated by indexOf). Note that this is a copy of the internal array used
	 * for storing the members so that no one can mess with internal state.
	 */
	ArraySet.prototype.toArray = function ArraySet_toArray() {
	  return this._array.slice();
	};
	
	exports.ArraySet = ArraySet;


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(347);
	
	/**
	 * Determine whether mappingB is after mappingA with respect to generated
	 * position.
	 */
	function generatedPositionAfter(mappingA, mappingB) {
	  // Optimized for most common case
	  var lineA = mappingA.generatedLine;
	  var lineB = mappingB.generatedLine;
	  var columnA = mappingA.generatedColumn;
	  var columnB = mappingB.generatedColumn;
	  return lineB > lineA || lineB == lineA && columnB >= columnA ||
	         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	}
	
	/**
	 * A data structure to provide a sorted view of accumulated mappings in a
	 * performance conscious manner. It trades a neglibable overhead in general
	 * case for a large speedup in case of mappings being added in order.
	 */
	function MappingList() {
	  this._array = [];
	  this._sorted = true;
	  // Serves as infimum
	  this._last = {generatedLine: -1, generatedColumn: 0};
	}
	
	/**
	 * Iterate through internal items. This method takes the same arguments that
	 * `Array.prototype.forEach` takes.
	 *
	 * NOTE: The order of the mappings is NOT guaranteed.
	 */
	MappingList.prototype.unsortedForEach =
	  function MappingList_forEach(aCallback, aThisArg) {
	    this._array.forEach(aCallback, aThisArg);
	  };
	
	/**
	 * Add the given source mapping.
	 *
	 * @param Object aMapping
	 */
	MappingList.prototype.add = function MappingList_add(aMapping) {
	  if (generatedPositionAfter(this._last, aMapping)) {
	    this._last = aMapping;
	    this._array.push(aMapping);
	  } else {
	    this._sorted = false;
	    this._array.push(aMapping);
	  }
	};
	
	/**
	 * Returns the flat, sorted array of mappings. The mappings are sorted by
	 * generated position.
	 *
	 * WARNING: This method returns internal data without copying, for
	 * performance. The return value must NOT be mutated, and should be treated as
	 * an immutable borrow. If you want to take ownership, you must make your own
	 * copy.
	 */
	MappingList.prototype.toArray = function MappingList_toArray() {
	  if (!this._sorted) {
	    this._array.sort(util.compareByGeneratedPositionsInflated);
	    this._sorted = true;
	  }
	  return this._array;
	};
	
	exports.MappingList = MappingList;


/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var util = __webpack_require__(347);
	var binarySearch = __webpack_require__(351);
	var ArraySet = __webpack_require__(348).ArraySet;
	var base64VLQ = __webpack_require__(345);
	var quickSort = __webpack_require__(352).quickSort;
	
	function SourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  return sourceMap.sections != null
	    ? new IndexedSourceMapConsumer(sourceMap)
	    : new BasicSourceMapConsumer(sourceMap);
	}
	
	SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	  return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	}
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	SourceMapConsumer.prototype._version = 3;
	
	// `__generatedMappings` and `__originalMappings` are arrays that hold the
	// parsed mapping coordinates from the source map's "mappings" attribute. They
	// are lazily instantiated, accessed via the `_generatedMappings` and
	// `_originalMappings` getters respectively, and we only parse the mappings
	// and create these arrays once queried for a source location. We jump through
	// these hoops because there can be many thousands of mappings, and parsing
	// them is expensive, so we only want to do it if we must.
	//
	// Each object in the arrays is of the form:
	//
	//     {
	//       generatedLine: The line number in the generated code,
	//       generatedColumn: The column number in the generated code,
	//       source: The path to the original source file that generated this
	//               chunk of code,
	//       originalLine: The line number in the original source that
	//                     corresponds to this chunk of generated code,
	//       originalColumn: The column number in the original source that
	//                       corresponds to this chunk of generated code,
	//       name: The name of the original symbol which generated this chunk of
	//             code.
	//     }
	//
	// All properties except for `generatedLine` and `generatedColumn` can be
	// `null`.
	//
	// `_generatedMappings` is ordered by the generated positions.
	//
	// `_originalMappings` is ordered by the original positions.
	
	SourceMapConsumer.prototype.__generatedMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	  get: function () {
	    if (!this.__generatedMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__generatedMappings;
	  }
	});
	
	SourceMapConsumer.prototype.__originalMappings = null;
	Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	  get: function () {
	    if (!this.__originalMappings) {
	      this._parseMappings(this._mappings, this.sourceRoot);
	    }
	
	    return this.__originalMappings;
	  }
	});
	
	SourceMapConsumer.prototype._charIsMappingSeparator =
	  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	    var c = aStr.charAt(index);
	    return c === ";" || c === ",";
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	SourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    throw new Error("Subclasses must implement _parseMappings");
	  };
	
	SourceMapConsumer.GENERATED_ORDER = 1;
	SourceMapConsumer.ORIGINAL_ORDER = 2;
	
	SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	SourceMapConsumer.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Iterate over each mapping between an original source/line/column and a
	 * generated line/column in this source map.
	 *
	 * @param Function aCallback
	 *        The function that is called with each mapping.
	 * @param Object aContext
	 *        Optional. If specified, this object will be the value of `this` every
	 *        time that `aCallback` is called.
	 * @param aOrder
	 *        Either `SourceMapConsumer.GENERATED_ORDER` or
	 *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	 *        iterate over the mappings sorted by the generated file's line/column
	 *        order or the original's source/line/column order, respectively. Defaults to
	 *        `SourceMapConsumer.GENERATED_ORDER`.
	 */
	SourceMapConsumer.prototype.eachMapping =
	  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	    var context = aContext || null;
	    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
	
	    var mappings;
	    switch (order) {
	    case SourceMapConsumer.GENERATED_ORDER:
	      mappings = this._generatedMappings;
	      break;
	    case SourceMapConsumer.ORIGINAL_ORDER:
	      mappings = this._originalMappings;
	      break;
	    default:
	      throw new Error("Unknown order of iteration.");
	    }
	
	    var sourceRoot = this.sourceRoot;
	    mappings.map(function (mapping) {
	      var source = mapping.source === null ? null : this._sources.at(mapping.source);
	      if (source != null && sourceRoot != null) {
	        source = util.join(sourceRoot, source);
	      }
	      return {
	        source: source,
	        generatedLine: mapping.generatedLine,
	        generatedColumn: mapping.generatedColumn,
	        originalLine: mapping.originalLine,
	        originalColumn: mapping.originalColumn,
	        name: mapping.name === null ? null : this._names.at(mapping.name)
	      };
	    }, this).forEach(aCallback, context);
	  };
	
	/**
	 * Returns all generated line and column information for the original source,
	 * line, and column provided. If no column is provided, returns all mappings
	 * corresponding to a either the line we are searching for or the next
	 * closest line that has any mappings. Otherwise, returns all mappings
	 * corresponding to the given line and either the column we are searching for
	 * or the next closest column that has any offsets.
	 *
	 * The only argument is an object with the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: Optional. the column number in the original source.
	 *
	 * and an array of objects is returned, each with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	SourceMapConsumer.prototype.allGeneratedPositionsFor =
	  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	    var line = util.getArg(aArgs, 'line');
	
	    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	    // returns the index of the closest mapping less than the needle. By
	    // setting needle.originalColumn to 0, we thus find the last mapping for
	    // the given line, provided such a mapping exists.
	    var needle = {
	      source: util.getArg(aArgs, 'source'),
	      originalLine: line,
	      originalColumn: util.getArg(aArgs, 'column', 0)
	    };
	
	    if (this.sourceRoot != null) {
	      needle.source = util.relative(this.sourceRoot, needle.source);
	    }
	    if (!this._sources.has(needle.source)) {
	      return [];
	    }
	    needle.source = this._sources.indexOf(needle.source);
	
	    var mappings = [];
	
	    var index = this._findMapping(needle,
	                                  this._originalMappings,
	                                  "originalLine",
	                                  "originalColumn",
	                                  util.compareByOriginalPositions,
	                                  binarySearch.LEAST_UPPER_BOUND);
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (aArgs.column === undefined) {
	        var originalLine = mapping.originalLine;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we found. Since
	        // mappings are sorted, this is guaranteed to find all mappings for
	        // the line we found.
	        while (mapping && mapping.originalLine === originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      } else {
	        var originalColumn = mapping.originalColumn;
	
	        // Iterate until either we run out of mappings, or we run into
	        // a mapping for a different line than the one we were searching for.
	        // Since mappings are sorted, this is guaranteed to find all mappings for
	        // the line we are searching for.
	        while (mapping &&
	               mapping.originalLine === line &&
	               mapping.originalColumn == originalColumn) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });
	
	          mapping = this._originalMappings[++index];
	        }
	      }
	    }
	
	    return mappings;
	  };
	
	exports.SourceMapConsumer = SourceMapConsumer;
	
	/**
	 * A BasicSourceMapConsumer instance represents a parsed source map which we can
	 * query for information about the original file positions by giving it a file
	 * position in the generated source.
	 *
	 * The only parameter is the raw source map (either as a JSON string, or
	 * already parsed to an object). According to the spec, source maps have the
	 * following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - sources: An array of URLs to the original source files.
	 *   - names: An array of identifiers which can be referrenced by individual mappings.
	 *   - sourceRoot: Optional. The URL root from which all sources are relative.
	 *   - sourcesContent: Optional. An array of contents of the original source files.
	 *   - mappings: A string of base64 VLQs which contain the actual mappings.
	 *   - file: Optional. The generated file this source map is associated with.
	 *
	 * Here is an example source map, taken from the source map spec[0]:
	 *
	 *     {
	 *       version : 3,
	 *       file: "out.js",
	 *       sourceRoot : "",
	 *       sources: ["foo.js", "bar.js"],
	 *       names: ["src", "maps", "are", "fun"],
	 *       mappings: "AA,AB;;ABCDE;"
	 *     }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	 */
	function BasicSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sources = util.getArg(sourceMap, 'sources');
	  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	  // requires the array) to play nice here.
	  var names = util.getArg(sourceMap, 'names', []);
	  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	  var mappings = util.getArg(sourceMap, 'mappings');
	  var file = util.getArg(sourceMap, 'file', null);
	
	  // Once again, Sass deviates from the spec and supplies the version as a
	  // string rather than a number, so we use loose equality checking here.
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  sources = sources
	    .map(String)
	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    .map(util.normalize)
	    // Always ensure that absolute sources are internally stored relative to
	    // the source root, if the source root is absolute. Not doing this would
	    // be particularly problematic when the source root is a prefix of the
	    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	    .map(function (source) {
	      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	        ? util.relative(sourceRoot, source)
	        : source;
	    });
	
	  // Pass `true` below to allow duplicate names and sources. While source maps
	  // are intended to be compressed and deduplicated, the TypeScript compiler
	  // sometimes generates source maps with duplicates in them. See Github issue
	  // #72 and bugzil.la/889492.
	  this._names = ArraySet.fromArray(names.map(String), true);
	  this._sources = ArraySet.fromArray(sources, true);
	
	  this.sourceRoot = sourceRoot;
	  this.sourcesContent = sourcesContent;
	  this._mappings = mappings;
	  this.file = file;
	}
	
	BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
	
	/**
	 * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	 *
	 * @param SourceMapGenerator aSourceMap
	 *        The source map that will be consumed.
	 * @returns BasicSourceMapConsumer
	 */
	BasicSourceMapConsumer.fromSourceMap =
	  function SourceMapConsumer_fromSourceMap(aSourceMap) {
	    var smc = Object.create(BasicSourceMapConsumer.prototype);
	
	    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	    smc.sourceRoot = aSourceMap._sourceRoot;
	    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                            smc.sourceRoot);
	    smc.file = aSourceMap._file;
	
	    // Because we are modifying the entries (by converting string sources and
	    // names to indices into the sources and names ArraySets), we have to make
	    // a copy of the entry or else bad things happen. Shared mutable state
	    // strikes again! See github issue #191.
	
	    var generatedMappings = aSourceMap._mappings.toArray().slice();
	    var destGeneratedMappings = smc.__generatedMappings = [];
	    var destOriginalMappings = smc.__originalMappings = [];
	
	    for (var i = 0, length = generatedMappings.length; i < length; i++) {
	      var srcMapping = generatedMappings[i];
	      var destMapping = new Mapping;
	      destMapping.generatedLine = srcMapping.generatedLine;
	      destMapping.generatedColumn = srcMapping.generatedColumn;
	
	      if (srcMapping.source) {
	        destMapping.source = sources.indexOf(srcMapping.source);
	        destMapping.originalLine = srcMapping.originalLine;
	        destMapping.originalColumn = srcMapping.originalColumn;
	
	        if (srcMapping.name) {
	          destMapping.name = names.indexOf(srcMapping.name);
	        }
	
	        destOriginalMappings.push(destMapping);
	      }
	
	      destGeneratedMappings.push(destMapping);
	    }
	
	    quickSort(smc.__originalMappings, util.compareByOriginalPositions);
	
	    return smc;
	  };
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	BasicSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    return this._sources.toArray().map(function (s) {
	      return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	    }, this);
	  }
	});
	
	/**
	 * Provide the JIT with a nice shape / hidden class.
	 */
	function Mapping() {
	  this.generatedLine = 0;
	  this.generatedColumn = 0;
	  this.source = null;
	  this.originalLine = null;
	  this.originalColumn = null;
	  this.name = null;
	}
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	BasicSourceMapConsumer.prototype._parseMappings =
	  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    var generatedLine = 1;
	    var previousGeneratedColumn = 0;
	    var previousOriginalLine = 0;
	    var previousOriginalColumn = 0;
	    var previousSource = 0;
	    var previousName = 0;
	    var length = aStr.length;
	    var index = 0;
	    var cachedSegments = {};
	    var temp = {};
	    var originalMappings = [];
	    var generatedMappings = [];
	    var mapping, str, segment, end, value;
	
	    while (index < length) {
	      if (aStr.charAt(index) === ';') {
	        generatedLine++;
	        index++;
	        previousGeneratedColumn = 0;
	      }
	      else if (aStr.charAt(index) === ',') {
	        index++;
	      }
	      else {
	        mapping = new Mapping();
	        mapping.generatedLine = generatedLine;
	
	        // Because each offset is encoded relative to the previous one,
	        // many segments often have the same encoding. We can exploit this
	        // fact by caching the parsed variable length fields of each segment,
	        // allowing us to avoid a second parse if we encounter the same
	        // segment again.
	        for (end = index; end < length; end++) {
	          if (this._charIsMappingSeparator(aStr, end)) {
	            break;
	          }
	        }
	        str = aStr.slice(index, end);
	
	        segment = cachedSegments[str];
	        if (segment) {
	          index += str.length;
	        } else {
	          segment = [];
	          while (index < end) {
	            base64VLQ.decode(aStr, index, temp);
	            value = temp.value;
	            index = temp.rest;
	            segment.push(value);
	          }
	
	          if (segment.length === 2) {
	            throw new Error('Found a source, but no line and column');
	          }
	
	          if (segment.length === 3) {
	            throw new Error('Found a source and line, but no column');
	          }
	
	          cachedSegments[str] = segment;
	        }
	
	        // Generated column.
	        mapping.generatedColumn = previousGeneratedColumn + segment[0];
	        previousGeneratedColumn = mapping.generatedColumn;
	
	        if (segment.length > 1) {
	          // Original source.
	          mapping.source = previousSource + segment[1];
	          previousSource += segment[1];
	
	          // Original line.
	          mapping.originalLine = previousOriginalLine + segment[2];
	          previousOriginalLine = mapping.originalLine;
	          // Lines are stored 0-based
	          mapping.originalLine += 1;
	
	          // Original column.
	          mapping.originalColumn = previousOriginalColumn + segment[3];
	          previousOriginalColumn = mapping.originalColumn;
	
	          if (segment.length > 4) {
	            // Original name.
	            mapping.name = previousName + segment[4];
	            previousName += segment[4];
	          }
	        }
	
	        generatedMappings.push(mapping);
	        if (typeof mapping.originalLine === 'number') {
	          originalMappings.push(mapping);
	        }
	      }
	    }
	
	    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	    this.__generatedMappings = generatedMappings;
	
	    quickSort(originalMappings, util.compareByOriginalPositions);
	    this.__originalMappings = originalMappings;
	  };
	
	/**
	 * Find the mapping that best matches the hypothetical "needle" mapping that
	 * we are searching for in the given "haystack" of mappings.
	 */
	BasicSourceMapConsumer.prototype._findMapping =
	  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                         aColumnName, aComparator, aBias) {
	    // To return the position we are searching for, we must first find the
	    // mapping for the given position and then return the opposite position it
	    // points to. Because the mappings are sorted, we can use binary search to
	    // find the best mapping.
	
	    if (aNeedle[aLineName] <= 0) {
	      throw new TypeError('Line must be greater than or equal to 1, got '
	                          + aNeedle[aLineName]);
	    }
	    if (aNeedle[aColumnName] < 0) {
	      throw new TypeError('Column must be greater than or equal to 0, got '
	                          + aNeedle[aColumnName]);
	    }
	
	    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	  };
	
	/**
	 * Compute the last column for each generated mapping. The last column is
	 * inclusive.
	 */
	BasicSourceMapConsumer.prototype.computeColumnSpans =
	  function SourceMapConsumer_computeColumnSpans() {
	    for (var index = 0; index < this._generatedMappings.length; ++index) {
	      var mapping = this._generatedMappings[index];
	
	      // Mappings do not contain a field for the last generated columnt. We
	      // can come up with an optimistic estimate, however, by assuming that
	      // mappings are contiguous (i.e. given two consecutive mappings, the
	      // first mapping ends where the second one starts).
	      if (index + 1 < this._generatedMappings.length) {
	        var nextMapping = this._generatedMappings[index + 1];
	
	        if (mapping.generatedLine === nextMapping.generatedLine) {
	          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	          continue;
	        }
	      }
	
	      // The last mapping for each line spans the entire line.
	      mapping.lastGeneratedColumn = Infinity;
	    }
	  };
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	BasicSourceMapConsumer.prototype.originalPositionFor =
	  function SourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._generatedMappings,
	      "generatedLine",
	      "generatedColumn",
	      util.compareByGeneratedPositionsDeflated,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._generatedMappings[index];
	
	      if (mapping.generatedLine === needle.generatedLine) {
	        var source = util.getArg(mapping, 'source', null);
	        if (source !== null) {
	          source = this._sources.at(source);
	          if (this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	        }
	        var name = util.getArg(mapping, 'name', null);
	        if (name !== null) {
	          name = this._names.at(name);
	        }
	        return {
	          source: source,
	          line: util.getArg(mapping, 'originalLine', null),
	          column: util.getArg(mapping, 'originalColumn', null),
	          name: name
	        };
	      }
	    }
	
	    return {
	      source: null,
	      line: null,
	      column: null,
	      name: null
	    };
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function BasicSourceMapConsumer_hasContentsOfAllSources() {
	    if (!this.sourcesContent) {
	      return false;
	    }
	    return this.sourcesContent.length >= this._sources.size() &&
	      !this.sourcesContent.some(function (sc) { return sc == null; });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	BasicSourceMapConsumer.prototype.sourceContentFor =
	  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    if (!this.sourcesContent) {
	      return null;
	    }
	
	    if (this.sourceRoot != null) {
	      aSource = util.relative(this.sourceRoot, aSource);
	    }
	
	    if (this._sources.has(aSource)) {
	      return this.sourcesContent[this._sources.indexOf(aSource)];
	    }
	
	    var url;
	    if (this.sourceRoot != null
	        && (url = util.urlParse(this.sourceRoot))) {
	      // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	      // many users. We can help them out when they expect file:// URIs to
	      // behave like it would if they were running a local HTTP server. See
	      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	      var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	      if (url.scheme == "file"
	          && this._sources.has(fileUriAbsPath)) {
	        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	      }
	
	      if ((!url.path || url.path == "/")
	          && this._sources.has("/" + aSource)) {
	        return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	      }
	    }
	
	    // This function is used recursively from
	    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	    // don't want to throw if we can't find the source - we just want to
	    // return null, so we provide a flag to exit gracefully.
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	 *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	BasicSourceMapConsumer.prototype.generatedPositionFor =
	  function SourceMapConsumer_generatedPositionFor(aArgs) {
	    var source = util.getArg(aArgs, 'source');
	    if (this.sourceRoot != null) {
	      source = util.relative(this.sourceRoot, source);
	    }
	    if (!this._sources.has(source)) {
	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    }
	    source = this._sources.indexOf(source);
	
	    var needle = {
	      source: source,
	      originalLine: util.getArg(aArgs, 'line'),
	      originalColumn: util.getArg(aArgs, 'column')
	    };
	
	    var index = this._findMapping(
	      needle,
	      this._originalMappings,
	      "originalLine",
	      "originalColumn",
	      util.compareByOriginalPositions,
	      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	    );
	
	    if (index >= 0) {
	      var mapping = this._originalMappings[index];
	
	      if (mapping.source === needle.source) {
	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }
	    }
	
	    return {
	      line: null,
	      column: null,
	      lastColumn: null
	    };
	  };
	
	exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
	
	/**
	 * An IndexedSourceMapConsumer instance represents a parsed source map which
	 * we can query for information. It differs from BasicSourceMapConsumer in
	 * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	 * input.
	 *
	 * The only parameter is a raw source map (either as a JSON string, or already
	 * parsed to an object). According to the spec for indexed source maps, they
	 * have the following attributes:
	 *
	 *   - version: Which version of the source map spec this map is following.
	 *   - file: Optional. The generated file this source map is associated with.
	 *   - sections: A list of section definitions.
	 *
	 * Each value under the "sections" field has two fields:
	 *   - offset: The offset into the original specified at which this section
	 *       begins to apply, defined as an object with a "line" and "column"
	 *       field.
	 *   - map: A source map definition. This source map could also be indexed,
	 *       but doesn't have to be.
	 *
	 * Instead of the "map" field, it's also possible to have a "url" field
	 * specifying a URL to retrieve a source map from, but that's currently
	 * unsupported.
	 *
	 * Here's an example source map, taken from the source map spec[0], but
	 * modified to omit a section which uses the "url" field.
	 *
	 *  {
	 *    version : 3,
	 *    file: "app.js",
	 *    sections: [{
	 *      offset: {line:100, column:10},
	 *      map: {
	 *        version : 3,
	 *        file: "section.js",
	 *        sources: ["foo.js", "bar.js"],
	 *        names: ["src", "maps", "are", "fun"],
	 *        mappings: "AAAA,E;;ABCDE;"
	 *      }
	 *    }],
	 *  }
	 *
	 * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	 */
	function IndexedSourceMapConsumer(aSourceMap) {
	  var sourceMap = aSourceMap;
	  if (typeof aSourceMap === 'string') {
	    sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	  }
	
	  var version = util.getArg(sourceMap, 'version');
	  var sections = util.getArg(sourceMap, 'sections');
	
	  if (version != this._version) {
	    throw new Error('Unsupported version: ' + version);
	  }
	
	  this._sources = new ArraySet();
	  this._names = new ArraySet();
	
	  var lastOffset = {
	    line: -1,
	    column: 0
	  };
	  this._sections = sections.map(function (s) {
	    if (s.url) {
	      // The url field will require support for asynchronicity.
	      // See https://github.com/mozilla/source-map/issues/16
	      throw new Error('Support for url field in sections not implemented.');
	    }
	    var offset = util.getArg(s, 'offset');
	    var offsetLine = util.getArg(offset, 'line');
	    var offsetColumn = util.getArg(offset, 'column');
	
	    if (offsetLine < lastOffset.line ||
	        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	      throw new Error('Section offsets must be ordered and non-overlapping.');
	    }
	    lastOffset = offset;
	
	    return {
	      generatedOffset: {
	        // The offset fields are 0-based, but we use 1-based indices when
	        // encoding/decoding from VLQ.
	        generatedLine: offsetLine + 1,
	        generatedColumn: offsetColumn + 1
	      },
	      consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	    }
	  });
	}
	
	IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
	
	/**
	 * The version of the source mapping spec that we are consuming.
	 */
	IndexedSourceMapConsumer.prototype._version = 3;
	
	/**
	 * The list of original sources.
	 */
	Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	  get: function () {
	    var sources = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	        sources.push(this._sections[i].consumer.sources[j]);
	      }
	    }
	    return sources;
	  }
	});
	
	/**
	 * Returns the original source, line, and column information for the generated
	 * source's line and column positions provided. The only argument is an object
	 * with the following properties:
	 *
	 *   - line: The line number in the generated source.
	 *   - column: The column number in the generated source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - source: The original source file, or null.
	 *   - line: The line number in the original source, or null.
	 *   - column: The column number in the original source, or null.
	 *   - name: The original identifier, or null.
	 */
	IndexedSourceMapConsumer.prototype.originalPositionFor =
	  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	    var needle = {
	      generatedLine: util.getArg(aArgs, 'line'),
	      generatedColumn: util.getArg(aArgs, 'column')
	    };
	
	    // Find the section containing the generated position we're trying to map
	    // to an original position.
	    var sectionIndex = binarySearch.search(needle, this._sections,
	      function(needle, section) {
	        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	        if (cmp) {
	          return cmp;
	        }
	
	        return (needle.generatedColumn -
	                section.generatedOffset.generatedColumn);
	      });
	    var section = this._sections[sectionIndex];
	
	    if (!section) {
	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    }
	
	    return section.consumer.originalPositionFor({
	      line: needle.generatedLine -
	        (section.generatedOffset.generatedLine - 1),
	      column: needle.generatedColumn -
	        (section.generatedOffset.generatedLine === needle.generatedLine
	         ? section.generatedOffset.generatedColumn - 1
	         : 0),
	      bias: aArgs.bias
	    });
	  };
	
	/**
	 * Return true if we have the source content for every source in the source
	 * map, false otherwise.
	 */
	IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	  function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	    return this._sections.every(function (s) {
	      return s.consumer.hasContentsOfAllSources();
	    });
	  };
	
	/**
	 * Returns the original source content. The only argument is the url of the
	 * original source file. Returns null if no original source content is
	 * available.
	 */
	IndexedSourceMapConsumer.prototype.sourceContentFor =
	  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      var content = section.consumer.sourceContentFor(aSource, true);
	      if (content) {
	        return content;
	      }
	    }
	    if (nullOnMissing) {
	      return null;
	    }
	    else {
	      throw new Error('"' + aSource + '" is not in the SourceMap.');
	    }
	  };
	
	/**
	 * Returns the generated line and column information for the original source,
	 * line, and column positions provided. The only argument is an object with
	 * the following properties:
	 *
	 *   - source: The filename of the original source.
	 *   - line: The line number in the original source.
	 *   - column: The column number in the original source.
	 *
	 * and an object is returned with the following properties:
	 *
	 *   - line: The line number in the generated source, or null.
	 *   - column: The column number in the generated source, or null.
	 */
	IndexedSourceMapConsumer.prototype.generatedPositionFor =
	  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	
	      // Only consider this section if the requested source is in the list of
	      // sources of the consumer.
	      if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	        continue;
	      }
	      var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	      if (generatedPosition) {
	        var ret = {
	          line: generatedPosition.line +
	            (section.generatedOffset.generatedLine - 1),
	          column: generatedPosition.column +
	            (section.generatedOffset.generatedLine === generatedPosition.line
	             ? section.generatedOffset.generatedColumn - 1
	             : 0)
	        };
	        return ret;
	      }
	    }
	
	    return {
	      line: null,
	      column: null
	    };
	  };
	
	/**
	 * Parse the mappings in a string in to a data structure which we can easily
	 * query (the ordered arrays in the `this.__generatedMappings` and
	 * `this.__originalMappings` properties).
	 */
	IndexedSourceMapConsumer.prototype._parseMappings =
	  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	    this.__generatedMappings = [];
	    this.__originalMappings = [];
	    for (var i = 0; i < this._sections.length; i++) {
	      var section = this._sections[i];
	      var sectionMappings = section.consumer._generatedMappings;
	      for (var j = 0; j < sectionMappings.length; j++) {
	        var mapping = sectionMappings[j];
	
	        var source = section.consumer._sources.at(mapping.source);
	        if (section.consumer.sourceRoot !== null) {
	          source = util.join(section.consumer.sourceRoot, source);
	        }
	        this._sources.add(source);
	        source = this._sources.indexOf(source);
	
	        var name = section.consumer._names.at(mapping.name);
	        this._names.add(name);
	        name = this._names.indexOf(name);
	
	        // The mappings coming from the consumer for the section have
	        // generated positions relative to the start of the section, so we
	        // need to offset them to be relative to the start of the concatenated
	        // generated file.
	        var adjustedMapping = {
	          source: source,
	          generatedLine: mapping.generatedLine +
	            (section.generatedOffset.generatedLine - 1),
	          generatedColumn: mapping.generatedColumn +
	            (section.generatedOffset.generatedLine === mapping.generatedLine
	            ? section.generatedOffset.generatedColumn - 1
	            : 0),
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: name
	        };
	
	        this.__generatedMappings.push(adjustedMapping);
	        if (typeof adjustedMapping.originalLine === 'number') {
	          this.__originalMappings.push(adjustedMapping);
	        }
	      }
	    }
	
	    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	    quickSort(this.__originalMappings, util.compareByOriginalPositions);
	  };
	
	exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;


/***/ },
/* 351 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	exports.GREATEST_LOWER_BOUND = 1;
	exports.LEAST_UPPER_BOUND = 2;
	
	/**
	 * Recursive implementation of binary search.
	 *
	 * @param aLow Indices here and lower do not contain the needle.
	 * @param aHigh Indices here and higher do not contain the needle.
	 * @param aNeedle The element being searched for.
	 * @param aHaystack The non-empty array being searched.
	 * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 */
	function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	  // This function terminates when one of the following is true:
	  //
	  //   1. We find the exact element we are looking for.
	  //
	  //   2. We did not find the exact element, but we can return the index of
	  //      the next-closest element.
	  //
	  //   3. We did not find the exact element, and there is no next-closest
	  //      element than the one we are searching for, so we return -1.
	  var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	  var cmp = aCompare(aNeedle, aHaystack[mid], true);
	  if (cmp === 0) {
	    // Found the element we are looking for.
	    return mid;
	  }
	  else if (cmp > 0) {
	    // Our needle is greater than aHaystack[mid].
	    if (aHigh - mid > 1) {
	      // The element is in the upper half.
	      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // The exact needle element was not found in this haystack. Determine if
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return aHigh < aHaystack.length ? aHigh : -1;
	    } else {
	      return mid;
	    }
	  }
	  else {
	    // Our needle is less than aHaystack[mid].
	    if (mid - aLow > 1) {
	      // The element is in the lower half.
	      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	    }
	
	    // we are in termination case (3) or (2) and return the appropriate thing.
	    if (aBias == exports.LEAST_UPPER_BOUND) {
	      return mid;
	    } else {
	      return aLow < 0 ? -1 : aLow;
	    }
	  }
	}
	
	/**
	 * This is an implementation of binary search which will always try and return
	 * the index of the closest element if there is no exact hit. This is because
	 * mappings between original and generated line/col pairs are single points,
	 * and there is an implicit region between each of them, so a miss just means
	 * that you aren't on the very start of a region.
	 *
	 * @param aNeedle The element you are looking for.
	 * @param aHaystack The array that is being searched.
	 * @param aCompare A function which takes the needle and an element in the
	 *     array and returns -1, 0, or 1 depending on whether the needle is less
	 *     than, equal to, or greater than the element, respectively.
	 * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	 *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	 *     closest element that is smaller than or greater than the one we are
	 *     searching for, respectively, if the exact element cannot be found.
	 *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	 */
	exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	  if (aHaystack.length === 0) {
	    return -1;
	  }
	
	  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	  if (index < 0) {
	    return -1;
	  }
	
	  // We have found either the exact element, or the next-closest element than
	  // the one we are searching for. However, there may be more than one such
	  // element. Make sure we always return the smallest of these.
	  while (index - 1 >= 0) {
	    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	      break;
	    }
	    --index;
	  }
	
	  return index;
	};


/***/ },
/* 352 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	// It turns out that some (most?) JavaScript engines don't self-host
	// `Array.prototype.sort`. This makes sense because C++ will likely remain
	// faster than JS when doing raw CPU-intensive sorting. However, when using a
	// custom comparator function, calling back and forth between the VM's C++ and
	// JIT'd JS is rather slow *and* loses JIT type information, resulting in
	// worse generated code for the comparator function than would be optimal. In
	// fact, when sorting with a comparator, these costs outweigh the benefits of
	// sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	// a ~3500ms mean speed-up in `bench/bench.html`.
	
	/**
	 * Swap the elements indexed by `x` and `y` in the array `ary`.
	 *
	 * @param {Array} ary
	 *        The array.
	 * @param {Number} x
	 *        The index of the first item.
	 * @param {Number} y
	 *        The index of the second item.
	 */
	function swap(ary, x, y) {
	  var temp = ary[x];
	  ary[x] = ary[y];
	  ary[y] = temp;
	}
	
	/**
	 * Returns a random integer within the range `low .. high` inclusive.
	 *
	 * @param {Number} low
	 *        The lower bound on the range.
	 * @param {Number} high
	 *        The upper bound on the range.
	 */
	function randomIntInRange(low, high) {
	  return Math.round(low + (Math.random() * (high - low)));
	}
	
	/**
	 * The Quick Sort algorithm.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 * @param {Number} p
	 *        Start index of the array
	 * @param {Number} r
	 *        End index of the array
	 */
	function doQuickSort(ary, comparator, p, r) {
	  // If our lower bound is less than our upper bound, we (1) partition the
	  // array into two pieces and (2) recurse on each half. If it is not, this is
	  // the empty array and our base case.
	
	  if (p < r) {
	    // (1) Partitioning.
	    //
	    // The partitioning chooses a pivot between `p` and `r` and moves all
	    // elements that are less than or equal to the pivot to the before it, and
	    // all the elements that are greater than it after it. The effect is that
	    // once partition is done, the pivot is in the exact place it will be when
	    // the array is put in sorted order, and it will not need to be moved
	    // again. This runs in O(n) time.
	
	    // Always choose a random pivot so that an input array which is reverse
	    // sorted does not cause O(n^2) running time.
	    var pivotIndex = randomIntInRange(p, r);
	    var i = p - 1;
	
	    swap(ary, pivotIndex, r);
	    var pivot = ary[r];
	
	    // Immediately after `j` is incremented in this loop, the following hold
	    // true:
	    //
	    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	    //
	    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	    for (var j = p; j < r; j++) {
	      if (comparator(ary[j], pivot) <= 0) {
	        i += 1;
	        swap(ary, i, j);
	      }
	    }
	
	    swap(ary, i + 1, j);
	    var q = i + 1;
	
	    // (2) Recurse on each half.
	
	    doQuickSort(ary, comparator, p, q - 1);
	    doQuickSort(ary, comparator, q + 1, r);
	  }
	}
	
	/**
	 * Sort the given array in-place with the given comparator function.
	 *
	 * @param {Array} ary
	 *        An array to sort.
	 * @param {function} comparator
	 *        Function to use to compare two items.
	 */
	exports.quickSort = function (ary, comparator) {
	  doQuickSort(ary, comparator, 0, ary.length - 1);
	};


/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	
	var SourceMapGenerator = __webpack_require__(344).SourceMapGenerator;
	var util = __webpack_require__(347);
	
	// Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	// operating systems these days (capturing the result).
	var REGEX_NEWLINE = /(\r?\n)/;
	
	// Newline character code for charCodeAt() comparisons
	var NEWLINE_CODE = 10;
	
	// Private symbol for identifying `SourceNode`s when multiple versions of
	// the source-map library are loaded. This MUST NOT CHANGE across
	// versions!
	var isSourceNode = "$$$isSourceNode$$$";
	
	/**
	 * SourceNodes provide a way to abstract over interpolating/concatenating
	 * snippets of generated JavaScript source code while maintaining the line and
	 * column information associated with the original source code.
	 *
	 * @param aLine The original line number.
	 * @param aColumn The original column number.
	 * @param aSource The original source's filename.
	 * @param aChunks Optional. An array of strings which are snippets of
	 *        generated JS, or other SourceNodes.
	 * @param aName The original identifier.
	 */
	function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	  this.children = [];
	  this.sourceContents = {};
	  this.line = aLine == null ? null : aLine;
	  this.column = aColumn == null ? null : aColumn;
	  this.source = aSource == null ? null : aSource;
	  this.name = aName == null ? null : aName;
	  this[isSourceNode] = true;
	  if (aChunks != null) this.add(aChunks);
	}
	
	/**
	 * Creates a SourceNode from generated code and a SourceMapConsumer.
	 *
	 * @param aGeneratedCode The generated code
	 * @param aSourceMapConsumer The SourceMap for the generated code
	 * @param aRelativePath Optional. The path that relative sources in the
	 *        SourceMapConsumer should be relative to.
	 */
	SourceNode.fromStringWithSourceMap =
	  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	    // The SourceNode we want to fill with the generated code
	    // and the SourceMap
	    var node = new SourceNode();
	
	    // All even indices of this array are one line of the generated code,
	    // while all odd indices are the newlines between two adjacent lines
	    // (since `REGEX_NEWLINE` captures its match).
	    // Processed fragments are removed from this array, by calling `shiftNextLine`.
	    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	    var shiftNextLine = function() {
	      var lineContents = remainingLines.shift();
	      // The last line of a file might not have a newline.
	      var newLine = remainingLines.shift() || "";
	      return lineContents + newLine;
	    };
	
	    // We need to remember the position of "remainingLines"
	    var lastGeneratedLine = 1, lastGeneratedColumn = 0;
	
	    // The generate SourceNodes we need a code range.
	    // To extract it current and last mapping is used.
	    // Here we store the last mapping.
	    var lastMapping = null;
	
	    aSourceMapConsumer.eachMapping(function (mapping) {
	      if (lastMapping !== null) {
	        // We add the code from "lastMapping" to "mapping":
	        // First check if there is a new line in between.
	        if (lastGeneratedLine < mapping.generatedLine) {
	          // Associate first line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	          lastGeneratedLine++;
	          lastGeneratedColumn = 0;
	          // The remaining code is added without mapping
	        } else {
	          // There is no new line in between.
	          // Associate the code between "lastGeneratedColumn" and
	          // "mapping.generatedColumn" with "lastMapping"
	          var nextLine = remainingLines[0];
	          var code = nextLine.substr(0, mapping.generatedColumn -
	                                        lastGeneratedColumn);
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                              lastGeneratedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	          addMappingWithCode(lastMapping, code);
	          // No more remaining code, continue
	          lastMapping = mapping;
	          return;
	        }
	      }
	      // We add the generated code until the first mapping
	      // to the SourceNode without any mapping.
	      // Each line is added as separate string.
	      while (lastGeneratedLine < mapping.generatedLine) {
	        node.add(shiftNextLine());
	        lastGeneratedLine++;
	      }
	      if (lastGeneratedColumn < mapping.generatedColumn) {
	        var nextLine = remainingLines[0];
	        node.add(nextLine.substr(0, mapping.generatedColumn));
	        remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	        lastGeneratedColumn = mapping.generatedColumn;
	      }
	      lastMapping = mapping;
	    }, this);
	    // We have processed all mappings.
	    if (remainingLines.length > 0) {
	      if (lastMapping) {
	        // Associate the remaining code in the current line with "lastMapping"
	        addMappingWithCode(lastMapping, shiftNextLine());
	      }
	      // and add the remaining lines without any mapping
	      node.add(remainingLines.join(""));
	    }
	
	    // Copy sourcesContent into SourceNode
	    aSourceMapConsumer.sources.forEach(function (sourceFile) {
	      var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	      if (content != null) {
	        if (aRelativePath != null) {
	          sourceFile = util.join(aRelativePath, sourceFile);
	        }
	        node.setSourceContent(sourceFile, content);
	      }
	    });
	
	    return node;
	
	    function addMappingWithCode(mapping, code) {
	      if (mapping === null || mapping.source === undefined) {
	        node.add(code);
	      } else {
	        var source = aRelativePath
	          ? util.join(aRelativePath, mapping.source)
	          : mapping.source;
	        node.add(new SourceNode(mapping.originalLine,
	                                mapping.originalColumn,
	                                source,
	                                code,
	                                mapping.name));
	      }
	    }
	  };
	
	/**
	 * Add a chunk of generated JS to this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.add = function SourceNode_add(aChunk) {
	  if (Array.isArray(aChunk)) {
	    aChunk.forEach(function (chunk) {
	      this.add(chunk);
	    }, this);
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    if (aChunk) {
	      this.children.push(aChunk);
	    }
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Add a chunk of generated JS to the beginning of this source node.
	 *
	 * @param aChunk A string snippet of generated JS code, another instance of
	 *        SourceNode, or an array where each member is one of those things.
	 */
	SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	  if (Array.isArray(aChunk)) {
	    for (var i = aChunk.length-1; i >= 0; i--) {
	      this.prepend(aChunk[i]);
	    }
	  }
	  else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	    this.children.unshift(aChunk);
	  }
	  else {
	    throw new TypeError(
	      "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	    );
	  }
	  return this;
	};
	
	/**
	 * Walk over the tree of JS snippets in this node and its children. The
	 * walking function is called once for each snippet of JS and is passed that
	 * snippet and the its original associated source's line/column location.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	  var chunk;
	  for (var i = 0, len = this.children.length; i < len; i++) {
	    chunk = this.children[i];
	    if (chunk[isSourceNode]) {
	      chunk.walk(aFn);
	    }
	    else {
	      if (chunk !== '') {
	        aFn(chunk, { source: this.source,
	                     line: this.line,
	                     column: this.column,
	                     name: this.name });
	      }
	    }
	  }
	};
	
	/**
	 * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	 * each of `this.children`.
	 *
	 * @param aSep The separator.
	 */
	SourceNode.prototype.join = function SourceNode_join(aSep) {
	  var newChildren;
	  var i;
	  var len = this.children.length;
	  if (len > 0) {
	    newChildren = [];
	    for (i = 0; i < len-1; i++) {
	      newChildren.push(this.children[i]);
	      newChildren.push(aSep);
	    }
	    newChildren.push(this.children[i]);
	    this.children = newChildren;
	  }
	  return this;
	};
	
	/**
	 * Call String.prototype.replace on the very right-most source snippet. Useful
	 * for trimming whitespace from the end of a source node, etc.
	 *
	 * @param aPattern The pattern to replace.
	 * @param aReplacement The thing to replace the pattern with.
	 */
	SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	  var lastChild = this.children[this.children.length - 1];
	  if (lastChild[isSourceNode]) {
	    lastChild.replaceRight(aPattern, aReplacement);
	  }
	  else if (typeof lastChild === 'string') {
	    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	  }
	  else {
	    this.children.push(''.replace(aPattern, aReplacement));
	  }
	  return this;
	};
	
	/**
	 * Set the source content for a source file. This will be added to the SourceMapGenerator
	 * in the sourcesContent field.
	 *
	 * @param aSourceFile The filename of the source file
	 * @param aSourceContent The content of the source file
	 */
	SourceNode.prototype.setSourceContent =
	  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	  };
	
	/**
	 * Walk over the tree of SourceNodes. The walking function is called for each
	 * source file content and is passed the filename and source content.
	 *
	 * @param aFn The traversal function.
	 */
	SourceNode.prototype.walkSourceContents =
	  function SourceNode_walkSourceContents(aFn) {
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      if (this.children[i][isSourceNode]) {
	        this.children[i].walkSourceContents(aFn);
	      }
	    }
	
	    var sources = Object.keys(this.sourceContents);
	    for (var i = 0, len = sources.length; i < len; i++) {
	      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	    }
	  };
	
	/**
	 * Return the string representation of this source node. Walks over the tree
	 * and concatenates all the various snippets together to one string.
	 */
	SourceNode.prototype.toString = function SourceNode_toString() {
	  var str = "";
	  this.walk(function (chunk) {
	    str += chunk;
	  });
	  return str;
	};
	
	/**
	 * Returns the string representation of this source node along with a source
	 * map.
	 */
	SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	  var generated = {
	    code: "",
	    line: 1,
	    column: 0
	  };
	  var map = new SourceMapGenerator(aArgs);
	  var sourceMappingActive = false;
	  var lastOriginalSource = null;
	  var lastOriginalLine = null;
	  var lastOriginalColumn = null;
	  var lastOriginalName = null;
	  this.walk(function (chunk, original) {
	    generated.code += chunk;
	    if (original.source !== null
	        && original.line !== null
	        && original.column !== null) {
	      if(lastOriginalSource !== original.source
	         || lastOriginalLine !== original.line
	         || lastOriginalColumn !== original.column
	         || lastOriginalName !== original.name) {
	        map.addMapping({
	          source: original.source,
	          original: {
	            line: original.line,
	            column: original.column
	          },
	          generated: {
	            line: generated.line,
	            column: generated.column
	          },
	          name: original.name
	        });
	      }
	      lastOriginalSource = original.source;
	      lastOriginalLine = original.line;
	      lastOriginalColumn = original.column;
	      lastOriginalName = original.name;
	      sourceMappingActive = true;
	    } else if (sourceMappingActive) {
	      map.addMapping({
	        generated: {
	          line: generated.line,
	          column: generated.column
	        }
	      });
	      lastOriginalSource = null;
	      sourceMappingActive = false;
	    }
	    for (var idx = 0, length = chunk.length; idx < length; idx++) {
	      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	        generated.line++;
	        generated.column = 0;
	        // Mappings end at eol
	        if (idx + 1 === length) {
	          lastOriginalSource = null;
	          sourceMappingActive = false;
	        } else if (sourceMappingActive) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	      } else {
	        generated.column++;
	      }
	    }
	  });
	  this.walkSourceContents(function (sourceFile, sourceContent) {
	    map.setSourceContent(sourceFile, sourceContent);
	  });
	
	  return { code: generated.code, map: map };
	};
	
	exports.SourceNode = SourceNode;


/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(342);
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	
	function RawSource(value) {
		Source.call(this);
		this._value = value;
	}
	module.exports = RawSource;
	
	RawSource.prototype = Object.create(Source.prototype);
	RawSource.prototype.constructor = RawSource;
	
	RawSource.prototype.source = function() {
		return this._value;
	};
	
	RawSource.prototype.map = function(options) {
		return null;
	};
	
	RawSource.prototype.node = function(options) {
		return new SourceNode(null, null, null, this._value);
	};
	
	RawSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value);
	};
	
	RawSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceMapConsumer = __webpack_require__(343).SourceMapConsumer;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(342);
	
	function isSplitter(c) {
		switch(c) {
			case 10: // \n
			case 13: // \r
			case 59: // ;
			case 123: // {
			case 125: // }
				return true;
		}
		return false;
	}
	
	function _splitCode(code) {
		var result = [];
		var i = 0;
		var j = 0;
		for(; i < code.length; i++) {
			if(isSplitter(code.charCodeAt(i))) {
				while(isSplitter(code.charCodeAt(++i)));
				result.push(code.substring(j, i));
				j = i;
			}
		}
		if(j < code.length)
			result.push(code.substr(j));
		return result;
	}
	
	function OriginalSource(value, name) {
		Source.call(this);
		this._value = value;
		this._name = name;
	}
	
	module.exports = OriginalSource;
	
	OriginalSource.prototype = Object.create(Source.prototype);
	OriginalSource.prototype.constructor = OriginalSource;
	
	OriginalSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(356)(OriginalSource.prototype);
	
	OriginalSource.prototype.node = function(options) {
		options = options || {};
		var sourceMap = this._sourceMap;
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				var pos = 0;
				if(options.columns === false) {
					var content = line + (idx != lines.length - 1 ? "\n" : "");
					return new SourceNode(idx + 1, 0, name, content);
				}
				return new SourceNode(null, null, null,
					_splitCode(line + (idx != lines.length - 1 ? "\n" : "")).map(function(item) {
						if(/^\s*$/.test(item)) return item;
						var res = new SourceNode(idx + 1, pos, name, item);
						pos += item.length;
						return res;
					})
				);
			})
		);
		node.setSourceContent(name, value);
		return node;
	};
	
	OriginalSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._value)
	};
	
	OriginalSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
	};


/***/ },
/* 356 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function mixinSourceAndMap(proto) {
		proto.map = function(options) {
			options = options || {};
			if(options.columns === false) {
				return this.listMap(options).toStringWithSourceMap({
					file: "x"
				}).map;
			}
	
			return this.node(options).toStringWithSourceMap({
				file: "x"
			}).map.toJSON();
		};
	
		proto.sourceAndMap = function(options) {
			options = options || {};
			if(options.columns === false) {
				//console.log(this.listMap(options).debugInfo());
				return this.listMap(options).toStringWithSourceMap({
					file: "x"
				});
			}
	
			var res = this.node(options).toStringWithSourceMap({
				file: "x"
			});
			return {
				source: res.code,
				map: res.map.toJSON()
			};
		};
	}


/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceMapConsumer = __webpack_require__(343).SourceMapConsumer;
	var SourceMapGenerator = __webpack_require__(343).SourceMapGenerator;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(31).fromStringWithSourceMap;
	var Source = __webpack_require__(342);
	
	function SourceMapSource(value, name, sourceMap, originalSource, innerSourceMap) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._sourceMap = sourceMap;
		this._originalSource = originalSource;
		this._innerSourceMap = innerSourceMap;
	}
	module.exports = SourceMapSource;
	
	SourceMapSource.prototype = Object.create(Source.prototype);
	SourceMapSource.prototype.constructor = SourceMapSource;
	
	SourceMapSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(356)(SourceMapSource.prototype);
	
	SourceMapSource.prototype.node = function(options) {
		var innerSourceMap = this._innerSourceMap;
		var sourceMap = this._sourceMap;
		if(innerSourceMap) {
			sourceMap = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));
			if(this._originalSource)
				sourceMap.setSourceContent(this._name, this._originalSource);
			innerSourceMap = new SourceMapConsumer(innerSourceMap);
			sourceMap.applySourceMap(innerSourceMap, this._name);
			sourceMap = sourceMap.toJSON();
		}
		return SourceNode.fromStringWithSourceMap(this._value, new SourceMapConsumer(sourceMap));
	};
	
	SourceMapSource.prototype.listMap = function(options) {
		if(options.module === false)
			return new SourceListMap(this._value, this._name, this._value);
		return fromStringWithSourceMap(this._value, typeof this._sourceMap === "string" ? JSON.parse(this._sourceMap) : this._sourceMap);
	};
	
	SourceMapSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		if(this._originalSource)
			hash.update(this._originalSource);
	};


/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceMapConsumer = __webpack_require__(343).SourceMapConsumer;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(342);
	
	function LineToLineMappedSource(value, name, originalSource) {
		Source.call(this);
		this._value = value;
		this._name = name;
		this._originalSource = originalSource;
	}
	
	module.exports = LineToLineMappedSource;
	
	LineToLineMappedSource.prototype = Object.create(Source.prototype);
	LineToLineMappedSource.prototype.constructor = LineToLineMappedSource;
	
	LineToLineMappedSource.prototype.source = function() {
		return this._value;
	};
	
	__webpack_require__(356)(LineToLineMappedSource.prototype);
	
	LineToLineMappedSource.prototype.node = function(options) {
		var value = this._value;
		var name = this._name;
		var lines = value.split("\n");
		var node = new SourceNode(null, null, null,
			lines.map(function(line, idx) {
				return new SourceNode(idx + 1, 0, name, (line + (idx != lines.length - 1 ? "\n" : "")));
			})
		);
		node.setSourceContent(name, this._originalSource);
		return node;
	};
	
	LineToLineMappedSource.prototype.listMap = function(options) {
		return new SourceListMap(this._value, this._name, this._originalSource)
	};
	
	LineToLineMappedSource.prototype.updateHash = function(hash) {
		hash.update(this._value);
		hash.update(this._originalSource);
	};


/***/ },
/* 359 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function CachedSource(source) {
		this._source = source;
		this._cachedSource = undefined;
		this._cachedSize = undefined;
		this._cachedMaps = {};
	
		if(source.node) this.node = function(options) {
			return this._source.node(options);
		};
	
		if(source.listMap) this.listMap = function(options) {
			return this._source.listMap(options);
		};
	}
	module.exports = CachedSource;
	
	CachedSource.prototype.source = function() {
		if(typeof this._cachedSource !== "undefined") return this._cachedSource;
		return this._cachedSource = this._source.source();
	};
	
	CachedSource.prototype.size = function() {
		if(typeof this._cachedSize !== "undefined") return this._cachedSize;
		if(typeof this._cachedSource !== "undefined")
			return this._cachedSize = this._cachedSource.length;
		return this._cachedSize = this._source.size();
	};
	
	CachedSource.prototype.sourceAndMap = function(options) {
		var key = JSON.stringify(options);
		if(typeof this._cachedSource !== "undefined" && key in this._cachedMaps)
			return {
				source: this._cachedSource,
				map: this._cachedMaps[key]
			};
		else if(typeof this._cachedSource !== "undefined") {
			return {
				source: this._cachedSource,
				map: this._cachedMaps[key] = this._source.map(options)
			};
		} else if(key in this._cachedMaps) {
			return {
				source: this._cachedSource = this._source.source(),
				map: this._cachedMaps[key]
			};
		}
		var result = this._source.sourceAndMap(options);
		this._cachedSource = result.source;
		this._cachedMaps[key] = result.map;
		return {
			source: this._cachedSource,
			map: this._cachedMaps[key]
		};
	};
	
	CachedSource.prototype.map = function(options) {
		if(!options) options = {};
		var key = JSON.stringify(options);
		if(key in this._cachedMaps)
			return this._cachedMaps[key];
		return this._cachedMaps[key] = this._source.map();
	};
	
	CachedSource.prototype.updateHash = function(hash) {
		this._source.updateHash(hash);
	};


/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var Source = __webpack_require__(342);
	
	function ConcatSource() {
		Source.call(this);
		this.children = Array.prototype.slice.call(arguments);
	}
	module.exports = ConcatSource;
	
	ConcatSource.prototype = Object.create(Source.prototype);
	ConcatSource.prototype.constructor = ConcatSource;
	
	ConcatSource.prototype.add = function(item) {
		this.children.push(item);
	};
	
	ConcatSource.prototype.source = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item : item.source();
		}).join("");
	};
	
	ConcatSource.prototype.size = function() {
		return this.children.map(function(item) {
			return typeof item === "string" ? item.length : item.size();
		}).reduce(function(sum, s) {
			return sum + s;
		}, 0);
	};
	
	__webpack_require__(356)(ConcatSource.prototype);
	
	ConcatSource.prototype.node = function(options) {
		var node = new SourceNode(null, null, null, this.children.map(function(item) {
			return typeof item === "string" ? item : item.node(options);
		}));
		return node;
	};
	
	ConcatSource.prototype.listMap = function(options) {
		var map = new SourceListMap();
		this.children.forEach(function(item) {
			if(typeof item === "string")
				map.add(item);
			else
				map.add(item.listMap(options));
		});
		return map;
	};
	
	ConcatSource.prototype.updateHash = function(hash) {
		this.children.forEach(function(item) {
			if(typeof item === "string")
				hash.update(item);
			else
				item.updateHash(hash);
		});
	};


/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(342);
	var SourceNode = __webpack_require__(343).SourceNode;
	var SourceListMap = __webpack_require__(31).SourceListMap;
	var fromStringWithSourceMap = __webpack_require__(31).fromStringWithSourceMap;
	var SourceMapConsumer = __webpack_require__(343).SourceMapConsumer;
	
	function ReplaceSource(source, name) {
		Source.call(this);
		this._source = source;
		this._name = name;
		this.replacements = [];
	}
	module.exports = ReplaceSource;
	
	ReplaceSource.prototype = Object.create(Source.prototype);
	ReplaceSource.prototype.constructor = ReplaceSource;
	
	ReplaceSource.prototype.replace = function(start, end, newValue) {
		if(typeof newValue !== "string")
			throw new Error("insertion must be a string, but is a " + typeof newValue);
		this.replacements.push([start, end, newValue, this.replacements.length]);
	};
	
	ReplaceSource.prototype.insert = function(pos, newValue) {
		if(typeof newValue !== "string")
			throw new Error("insertion must be a string, but is a " + typeof newValue + ": " + newValue);
		this.replacements.push([pos, pos - 1, newValue, this.replacements.length]);
	};
	
	ReplaceSource.prototype.source = function(options) {
		return this._replaceString(this._source.source());
	};
	
	ReplaceSource.prototype._sortReplacements = function() {
		this.replacements.sort(function(a, b) {
			var diff = b[1] - a[1];
			if(diff !== 0)
				return diff;
			diff = b[0] - a[0];
			if(diff !== 0)
				return diff;
			return b[3] - a[3];
		});
	};
	
	ReplaceSource.prototype._replaceString = function(str) {
		if(typeof str !== "string")
			throw new Error("str must be a string, but is a " + typeof str + ": " + str);
		this._sortReplacements();
		var result = [str];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitString(remSource, Math.floor(repl[1] + 1));
			var splitted2 = this._splitString(splitted1[0], Math.floor(repl[0]));
			result.push(splitted1[1], repl[2], splitted2[0]);
		}, this);
		result = result.reverse();
		return result.join("");
	};
	
	__webpack_require__(356)(ReplaceSource.prototype);
	
	ReplaceSource.prototype.node = function(options) {
		this._sortReplacements();
		var result = [this._source.node(options)];
		this.replacements.forEach(function(repl) {
			var remSource = result.pop();
			var splitted1 = this._splitSourceNode(remSource, Math.floor(repl[1] + 1));
			var splitted2;
			if(Array.isArray(splitted1)) {
				splitted2 = this._splitSourceNode(splitted1[0], Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(splitted1[1], this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(splitted1[1], this._replacementToSourceNode(splitted1[1], repl[2]), splitted1[0]);
				}
			} else {
				splitted2 = this._splitSourceNode(remSource, Math.floor(repl[0]));
				if(Array.isArray(splitted2)) {
					result.push(this._replacementToSourceNode(splitted2[1], repl[2]), splitted2[0]);
				} else {
					result.push(repl[2], remSource);
				}
			}
		}, this);
		result = result.reverse();
		return new SourceNode(null, null, null, result);
	};
	
	ReplaceSource.prototype.listMap = function(options) {
		var map = this._source.listMap(options);
		if(map.children.length !== 1) {
			var code = map.toString();
			code = this._replaceString(code).split("\n");
			var currentIndex = 0;
			map.mapGeneratedCode(function(str) {
				var idx = -1;
				var count = -1;
				do {
					count++;
					idx = str.indexOf("\n", idx + 1);
				} while (idx >= 0);
				if(!count) return "";
				var result = code.slice(currentIndex, currentIndex + count).join("\n") + "\n";
				currentIndex += count;
				return result;
			});
			map.add(code.slice(currentIndex).join("\n"));
		} else {
			map.mapGeneratedCode(this._replaceString.bind(this));
		}
		return map;
	};
	
	ReplaceSource.prototype._replacementToSourceNode = function(oldNode, newString) {
		var map = oldNode.toStringWithSourceMap({
			file: "?"
		}).map;
		var original = new SourceMapConsumer(map.toJSON()).originalPositionFor({
			line: 1,
			column: 0
		});
		if(original) {
			return new SourceNode(original.line, original.column, original.source, newString);
		} else {
			return newString;
		}
	};
	
	ReplaceSource.prototype._splitSourceNode = function(node, position) {
		if(typeof node === "string") {
			if(node.length <= position) return position - node.length;
			return position <= 0 ? ["", node] : [node.substr(0, position), node.substr(position)];
		} else {
			for(var i = 0; i < node.children.length; i++) {
				position = this._splitSourceNode(node.children[i], position);
				if(Array.isArray(position)) {
					var leftNode = new SourceNode(
						node.line,
						node.column,
						node.source,
						node.children.slice(0, i).concat([position[0]]),
						node.name
					);
					var rightNode = new SourceNode(
						node.line,
						node.column,
						node.source, [position[1]].concat(node.children.slice(i + 1)),
						node.name
					);
					leftNode.sourceContents = node.sourceContents;
					return [leftNode, rightNode];
				}
			}
			return position;
		}
	};
	
	ReplaceSource.prototype._splitString = function(str, position) {
		return position <= 0 ? ["", str] : [str.substr(0, position), str.substr(position)];
	};


/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var Source = __webpack_require__(342);
	var SourceNode = __webpack_require__(343).SourceNode;
	
	function PrefixSource(prefix, source) {
		Source.call(this);
		this._source = source;
		this._prefix = prefix;
	}
	module.exports = PrefixSource;
	
	PrefixSource.prototype = Object.create(Source.prototype);
	PrefixSource.prototype.constructor = PrefixSource;
	
	PrefixSource.prototype.source = function() {
		var node = typeof this._source === "string" ? this._source : this._source.source();
		var prefix = this._prefix;
		return prefix + node.replace(/\n(.)/g, "\n" + prefix + "$1");
	};
	
	__webpack_require__(356)(PrefixSource.prototype);
	
	PrefixSource.prototype.node = function(options) {
		var node = this._source.node(options);
		var append = [this._prefix];
		return new SourceNode(null, null, null, [
			cloneAndPrefix(node, this._prefix, append)
		]);
	};
	
	PrefixSource.prototype.listMap = function(options) {
		var prefix = this._prefix;
		var map = this._source.listMap(options);
		map.mapGeneratedCode(function(code) {
			return prefix + code.replace(/\n(.)/g, "\n" + prefix + "$1");
		});
		return map;
	};
	
	PrefixSource.prototype.updateHash = function(hash) {
		if(typeof this._source === "string")
			hash.update(this._source);
		else
			this._source.updateHash(hash);
		if(typeof this._prefix === "string")
			hash.update(this._prefix);
		else
			this._prefix.updateHash(hash);
	};
	
	function cloneAndPrefix(node, prefix, append) {
		if(typeof node === "string") {
			var result = node.replace(/\n(.)/g, "\n" + prefix + "$1");
			if(append.length > 0) result = append.pop() + result;
			if(/\n$/.test(node)) append.push(prefix);
			return result;
		} else {
			var newNode = new SourceNode(
				node.line,
				node.column,
				node.source,
				node.children.map(function(node) {
					return cloneAndPrefix(node, prefix, append);
				}),
				node.name
			);
			newNode.sourceContents = node.sourceContents;
			return newNode;
		}
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var SourceMapSource = __webpack_require__(341).SourceMapSource;
	var RawSource = __webpack_require__(341).RawSource;
	
	function ExtractedModule(identifier, originalModule, source, sourceMap, addtitionalInformation, prevModules) {
		this._identifier = identifier;
		this._originalModule = originalModule;
		this._source = source;
		this._sourceMap = sourceMap;
		this._prevModules = prevModules;
		this.addtitionalInformation = addtitionalInformation;
		this.chunks = [];
	}
	module.exports = ExtractedModule;
	
	ExtractedModule.prototype.getOrder = function() {
		// http://stackoverflow.com/a/14676665/1458162
		return /^@import url/.test(this._source) ? 0 : 1;
	};
	
	ExtractedModule.prototype.addChunk = function(chunk) {
		var idx = this.chunks.indexOf(chunk);
		if(idx < 0)
			this.chunks.push(chunk);
	};
	
	ExtractedModule.prototype._removeAndDo = __webpack_require__(42);
	
	ExtractedModule.prototype.removeChunk = function(chunk) {
		return this._removeAndDo("chunks", chunk, "removeModule");
	};
	
	ExtractedModule.prototype.rewriteChunkInReasons = function(oldChunk, newChunks) { };
	
	ExtractedModule.prototype.identifier = function() {
		return this._identifier;
	};
	
	ExtractedModule.prototype.source = function() {
		if(this._sourceMap)
			return new SourceMapSource(this._source, null, this._sourceMap);
		else
			return new RawSource(this._source);
	};
	
	ExtractedModule.prototype.getOriginalModule = function() {
		return this._originalModule;
	};
	
	ExtractedModule.prototype.getPrevModules = function() {
		return this._prevModules;
	};
	
	ExtractedModule.prototype.addPrevModules = function(prevModules) {
		prevModules.forEach(function(m) {
			if(this._prevModules.indexOf(m) < 0)
				this._prevModules.push(m);
		}, this);
	};
	
	ExtractedModule.prototype.setOriginalModule = function(originalModule) {
		this._originalModule = originalModule;
	};


/***/ },
/* 364 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	function OrderUndefinedError(module) {
		Error.call(this);
		Error.captureStackTrace(this, OrderUndefinedError);
		this.name = "OrderUndefinedError";
		this.message = "Order in extracted chunk undefined";
		this.module = module;
	}
	module.exports = OrderUndefinedError;
	
	OrderUndefinedError.prototype = Object.create(Error.prototype);


/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var JSON5 = __webpack_require__(366);
	var path = __webpack_require__(4);
	var assign = __webpack_require__(367);
	var emojiRegex = /[\uD800-\uDFFF]./;
	var emojiList = __webpack_require__(368).filter(function(emoji) {
		return emojiRegex.test(emoji)
	});
	
	var baseEncodeTables = {
		26: "abcdefghijklmnopqrstuvwxyz",
		32: "123456789abcdefghjkmnpqrstuvwxyz", // no 0lio
		36: "0123456789abcdefghijklmnopqrstuvwxyz",
		49: "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no lIO
		52: "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
		58: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ", // no 0lIO
		62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
		64: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_"
	};
	var emojiCache = {};
	
	function encodeStringToEmoji(content, length) {
		if (emojiCache[content]) return emojiCache[content];
		length = length || 1;
		var emojis = [];
		do {
			var index = Math.floor(Math.random() * emojiList.length);
			emojis.push(emojiList[index]);
			emojiList.splice(index, 1);
		} while (--length > 0);
		var emojiEncoding = emojis.join('');
		emojiCache[content] = emojiEncoding;
		return emojiEncoding;
	}
	
	function encodeBufferToBase(buffer, base) {
		var encodeTable = baseEncodeTables[base];
		if (!encodeTable) throw new Error("Unknown encoding base" + base);
	
		var readLength = buffer.length;
	
		var Big = __webpack_require__(369);
		Big.RM = Big.DP = 0;
		var b = new Big(0);
		for (var i = readLength - 1; i >= 0; i--) {
			b = b.times(256).plus(buffer[i]);
		}
	
		var output = "";
		while (b.gt(0)) {
			output = encodeTable[b.mod(base)] + output;
			b = b.div(base);
		}
	
		Big.DP = 20;
		Big.RM = 1;
	
		return output;
	}
	
	exports.parseQuery = function parseQuery(query) {
		var specialValues = {
			'null': null,
			'true': true,
			'false': false
		};
		if(!query) return {};
		if(typeof query !== "string")
			return query;
		if(query.substr(0, 1) !== "?")
			throw new Error("a valid query string passed to parseQuery should begin with '?'");
		query = query.substr(1);
		var queryLength = query.length;
		if(query.substr(0, 1) === "{" && query.substr(-1) === "}") {
			return JSON5.parse(query);
		}
		var queryArgs = query.split(/[,\&]/g);
		var result = {};
		queryArgs.forEach(function(arg) {
			var idx = arg.indexOf("=");
			if(idx >= 0) {
				var name = arg.substr(0, idx);
				var value = decodeURIComponent(arg.substr(idx+1));
				if (specialValues.hasOwnProperty(value)) {
					value = specialValues[value];
				}
				if(name.substr(-2) === "[]") {
					name = decodeURIComponent(name.substr(0, name.length-2));
					if(!Array.isArray(result[name]))
						result[name] = [];
					result[name].push(value);
				} else {
					name = decodeURIComponent(name);
					result[name] = value;
				}
			} else {
				if(arg.substr(0, 1) === "-") {
					result[decodeURIComponent(arg.substr(1))] = false;
				} else if(arg.substr(0, 1) === "+") {
					result[decodeURIComponent(arg.substr(1))] = true;
				} else {
					result[decodeURIComponent(arg)] = true;
				}
			}
		});
		return result;
	};
	
	exports.getLoaderConfig = function(loaderContext, defaultConfigKey) {
		var query = exports.parseQuery(loaderContext.query);
		var configKey = query.config || defaultConfigKey;
		if (configKey) {
			var config = loaderContext.options[configKey] || {};
			delete query.config;
			return assign({}, config, query);
		}
	
		return query;
	};
	
	exports.stringifyRequest = function(loaderContext, request) {
		var splitted = request.split("!");
		var context = loaderContext.context || (loaderContext.options && loaderContext.options.context);
		return JSON.stringify(splitted.map(function(part) {
			if(/^\/|^[A-Z]:/i.test(part) && context) {
				part = path.relative(context, part);
				if(/^[A-Z]:/i.test(part)) {
					return part;
				} else {
					return "./" + part.replace(/\\/g, "/");
				}
			}
			return part;
		}).join("!"));
	};
	
	function dotRequest(obj) {
		return obj.request;
	}
	
	exports.getRemainingRequest = function(loaderContext) {
		if(loaderContext.remainingRequest)
			return loaderContext.remainingRequest;
		var request = loaderContext.loaders.slice(loaderContext.loaderIndex+1).map(dotRequest).concat([loaderContext.resource]);
		return request.join("!");
	};
	
	exports.getCurrentRequest = function(loaderContext) {
		if(loaderContext.currentRequest)
			return loaderContext.currentRequest;
		var request = loaderContext.loaders.slice(loaderContext.loaderIndex).map(dotRequest).concat([loaderContext.resource]);
		return request.join("!");
	};
	
	exports.isUrlRequest = function(url, root) {
		// An URL is not an request if
		// 1. it's a Data Url
		// 2. it's an absolute url or and protocol-relative
		// 3. it's some kind of url for a template
		if(/^data:|^chrome-extension:|^(https?:)?\/\/|^[\{\}\[\]#*;,'§\$%&\(=?`´\^°<>]/.test(url)) return false;
		// 4. It's also not an request if root isn't set and it's a root-relative url
		if((root === undefined || root === false) && /^\//.test(url)) return false;
		return true;
	};
	
	exports.urlToRequest = function(url, root) {
		var moduleRequestRegex = /^[^?]*~/;
		var request;
	
		if(/^[a-zA-Z]:\\|^\\\\/.test(url)) {
			// absolute windows path, keep it
			request = url;
		} else if(root !== undefined && root !== false && /^\//.test(url)) {
			// if root is set and the url is root-relative
			switch(typeof root) {
				// 1. root is a string: root is prefixed to the url
				case "string":
					// special case: `~` roots convert to module request
					if (moduleRequestRegex.test(root)) {
						request = root.replace(/([^~\/])$/, "$1/") + url.slice(1);
					} else {
						request = root + url;
					}
					break;
				// 2. root is `true`: absolute paths are allowed
				//    *nix only, windows-style absolute paths are always allowed as they doesn't start with a `/`
				case "boolean":
					request = url;
					break;
				default:
					throw new Error("Unexpected parameters to loader-utils 'urlToRequest': url = " + url + ", root = " + root + ".");
			}
		} else if(/^\.\.?\//.test(url)) {
			// A relative url stays
			request = url;
		} else {
			// every other url is threaded like a relative url
			request = "./" + url;
		}
	
		// A `~` makes the url an module
		if (moduleRequestRegex.test(request)) {
			request = request.replace(moduleRequestRegex, "");
		}
	
		return request;
	};
	
	exports.parseString = function parseString(str) {
		try {
			if(str[0] === '"') return JSON.parse(str);
			if(str[0] === "'" && str.substr(str.length - 1) === "'") {
				return parseString(str.replace(/\\.|"/g, function(x) {
					if(x === '"') return '\\"';
					return x;
				}).replace(/^'|'$/g, '"'));
			}
			return JSON.parse('"' + str + '"');
		} catch(e) {
			return str;
		}
	};
	
	exports.getHashDigest = function getHashDigest(buffer, hashType, digestType, maxLength) {
		hashType = hashType || "md5";
		maxLength = maxLength || 9999;
		var hash = __webpack_require__(59).createHash(hashType);
		hash.update(buffer);
		if (digestType === "base26" || digestType === "base32" || digestType === "base36" ||
		    digestType === "base49" || digestType === "base52" || digestType === "base58" ||
		    digestType === "base62" || digestType === "base64") {
			return encodeBufferToBase(hash.digest(), digestType.substr(4)).substr(0, maxLength);
		} else {
			return hash.digest(digestType || "hex").substr(0, maxLength);
		}
	};
	
	exports.interpolateName = function interpolateName(loaderContext, name, options) {
		var filename = name || "[hash].[ext]";
		var context = options.context;
		var content = options.content;
		var regExp = options.regExp;
		var ext = "bin";
		var basename = "file";
		var directory = "";
		var folder = "";
		if(loaderContext.resourcePath) {
			var resourcePath = loaderContext.resourcePath;
			var idx = resourcePath.lastIndexOf(".");
			var i = resourcePath.lastIndexOf("\\");
			var j = resourcePath.lastIndexOf("/");
			var p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
			if(idx >= 0) {
				ext = resourcePath.substr(idx+1);
				resourcePath = resourcePath.substr(0, idx);
			}
			if(p >= 0) {
				basename = resourcePath.substr(p+1);
				resourcePath = resourcePath.substr(0, p+1);
			}
			if (typeof context !== 'undefined') {
				directory = path.relative(context, resourcePath + "_").replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
				directory = directory.substr(0, directory.length-1);
			}
			else {
				directory = resourcePath.replace(/\\/g, "/").replace(/\.\.(\/)?/g, "_$1");
			}
			if (directory.length === 1) {
				directory = "";
			} else if (directory.length > 1) {
				folder = path.basename(directory);
			}
		}
		var url = filename;
		if(content) {
			// Match hash template
			url = url.replace(/\[(?:(\w+):)?hash(?::([a-z]+\d*))?(?::(\d+))?\]/ig, function() {
				return exports.getHashDigest(content, arguments[1], arguments[2], parseInt(arguments[3], 10));
			}).replace(/\[emoji(?::(\d+))?\]/ig, function() {
				return encodeStringToEmoji(content, arguments[1]);
			});
		}
		url = url.replace(/\[ext\]/ig, function() {
			return ext;
		}).replace(/\[name\]/ig, function() {
			return basename;
		}).replace(/\[path\]/ig, function() {
			return directory;
		}).replace(/\[folder\]/ig, function() {
			return folder;
		});
		if(regExp && loaderContext.resourcePath) {
			var re = new RegExp(regExp);
			var match = loaderContext.resourcePath.match(re);
			if(match) {
				for (var i = 0; i < match.length; i++) {
					var re = new RegExp("\\[" + i + "\\]", "ig");
					url = url.replace(re, match[i]);
				}
			}
		}
		if(typeof loaderContext.options === "object" && typeof loaderContext.options.customInterpolateName === "function") {
			url = loaderContext.options.customInterpolateName.call(loaderContext, url, name, options);
		}
		return url;
	};


/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	// json5.js
	// Modern JSON. See README.md for details.
	//
	// This file is based directly off of Douglas Crockford's json_parse.js:
	// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
	
	var JSON5 = ( true ? exports : {});
	
	JSON5.parse = (function () {
	    "use strict";
	
	// This is a function that can parse a JSON5 text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON5 parser in other languages.
	
	// We are defining the function inside of another function to avoid creating
	// global variables.
	
	    var at,           // The index of the current character
	        lineNumber,   // The current line number
	        columnNumber, // The current column number
	        ch,           // The current character
	        escapee = {
	            "'":  "'",
	            '"':  '"',
	            '\\': '\\',
	            '/':  '/',
	            '\n': '',       // Replace escaped newlines in strings w/ empty string
	            b:    '\b',
	            f:    '\f',
	            n:    '\n',
	            r:    '\r',
	            t:    '\t'
	        },
	        ws = [
	            ' ',
	            '\t',
	            '\r',
	            '\n',
	            '\v',
	            '\f',
	            '\xA0',
	            '\uFEFF'
	        ],
	        text,
	
	        renderChar = function (chr) {
	            return chr === '' ? 'EOF' : "'" + chr + "'";
	        },
	
	        error = function (m) {
	
	// Call error when something is wrong.
	
	            var error = new SyntaxError();
	            // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
	            error.message = m + " at line " + lineNumber + " column " + columnNumber + " of the JSON5 data. Still to read: " + JSON.stringify(text.substring(at - 1, at + 19));
	            error.at = at;
	            // These two property names have been chosen to agree with the ones in Gecko, the only popular
	            // environment which seems to supply this info on JSON.parse
	            error.lineNumber = lineNumber;
	            error.columnNumber = columnNumber;
	            throw error;
	        },
	
	        next = function (c) {
	
	// If a c parameter is provided, verify that it matches the current character.
	
	            if (c && c !== ch) {
	                error("Expected " + renderChar(c) + " instead of " + renderChar(ch));
	            }
	
	// Get the next character. When there are no more characters,
	// return the empty string.
	
	            ch = text.charAt(at);
	            at++;
	            columnNumber++;
	            if (ch === '\n' || ch === '\r' && peek() !== '\n') {
	                lineNumber++;
	                columnNumber = 0;
	            }
	            return ch;
	        },
	
	        peek = function () {
	
	// Get the next character without consuming it or
	// assigning it to the ch varaible.
	
	            return text.charAt(at);
	        },
	
	        identifier = function () {
	
	// Parse an identifier. Normally, reserved words are disallowed here, but we
	// only use this for unquoted object keys, where reserved words are allowed,
	// so we don't check for those here. References:
	// - http://es5.github.com/#x7.6
	// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
	// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
	// TODO Identifiers can have Unicode "letters" in them; add support for those.
	
	            var key = ch;
	
	            // Identifiers must start with a letter, _ or $.
	            if ((ch !== '_' && ch !== '$') &&
	                    (ch < 'a' || ch > 'z') &&
	                    (ch < 'A' || ch > 'Z')) {
	                error("Bad identifier as unquoted key");
	            }
	
	            // Subsequent characters can contain digits.
	            while (next() && (
	                    ch === '_' || ch === '$' ||
	                    (ch >= 'a' && ch <= 'z') ||
	                    (ch >= 'A' && ch <= 'Z') ||
	                    (ch >= '0' && ch <= '9'))) {
	                key += ch;
	            }
	
	            return key;
	        },
	
	        number = function () {
	
	// Parse a number value.
	
	            var number,
	                sign = '',
	                string = '',
	                base = 10;
	
	            if (ch === '-' || ch === '+') {
	                sign = ch;
	                next(ch);
	            }
	
	            // support for Infinity (could tweak to allow other words):
	            if (ch === 'I') {
	                number = word();
	                if (typeof number !== 'number' || isNaN(number)) {
	                    error('Unexpected word for number');
	                }
	                return (sign === '-') ? -number : number;
	            }
	
	            // support for NaN
	            if (ch === 'N' ) {
	              number = word();
	              if (!isNaN(number)) {
	                error('expected word to be NaN');
	              }
	              // ignore sign as -NaN also is NaN
	              return number;
	            }
	
	            if (ch === '0') {
	                string += ch;
	                next();
	                if (ch === 'x' || ch === 'X') {
	                    string += ch;
	                    next();
	                    base = 16;
	                } else if (ch >= '0' && ch <= '9') {
	                    error('Octal literal');
	                }
	            }
	
	            switch (base) {
	            case 10:
	                while (ch >= '0' && ch <= '9' ) {
	                    string += ch;
	                    next();
	                }
	                if (ch === '.') {
	                    string += '.';
	                    while (next() && ch >= '0' && ch <= '9') {
	                        string += ch;
	                    }
	                }
	                if (ch === 'e' || ch === 'E') {
	                    string += ch;
	                    next();
	                    if (ch === '-' || ch === '+') {
	                        string += ch;
	                        next();
	                    }
	                    while (ch >= '0' && ch <= '9') {
	                        string += ch;
	                        next();
	                    }
	                }
	                break;
	            case 16:
	                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
	                    string += ch;
	                    next();
	                }
	                break;
	            }
	
	            if(sign === '-') {
	                number = -string;
	            } else {
	                number = +string;
	            }
	
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else {
	                return number;
	            }
	        },
	
	        string = function () {
	
	// Parse a string value.
	
	            var hex,
	                i,
	                string = '',
	                delim,      // double quote or single quote
	                uffff;
	
	// When parsing for string values, we must look for ' or " and \ characters.
	
	            if (ch === '"' || ch === "'") {
	                delim = ch;
	                while (next()) {
	                    if (ch === delim) {
	                        next();
	                        return string;
	                    } else if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (ch === '\r') {
	                            if (peek() === '\n') {
	                                next();
	                            }
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else if (ch === '\n') {
	                        // unescaped newlines are invalid; see:
	                        // https://github.com/aseemk/json5/issues/24
	                        // TODO this feels special-cased; are there other
	                        // invalid unescaped chars?
	                        break;
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },
	
	        inlineComment = function () {
	
	// Skip an inline comment, assuming this is one. The current character should
	// be the second / character in the // pair that begins this inline comment.
	// To finish the inline comment, we look for a newline or the end of the text.
	
	            if (ch !== '/') {
	                error("Not an inline comment");
	            }
	
	            do {
	                next();
	                if (ch === '\n' || ch === '\r') {
	                    next();
	                    return;
	                }
	            } while (ch);
	        },
	
	        blockComment = function () {
	
	// Skip a block comment, assuming this is one. The current character should be
	// the * character in the /* pair that begins this block comment.
	// To finish the block comment, we look for an ending */ pair of characters,
	// but we also watch for the end of text before the comment is terminated.
	
	            if (ch !== '*') {
	                error("Not a block comment");
	            }
	
	            do {
	                next();
	                while (ch === '*') {
	                    next('*');
	                    if (ch === '/') {
	                        next('/');
	                        return;
	                    }
	                }
	            } while (ch);
	
	            error("Unterminated block comment");
	        },
	
	        comment = function () {
	
	// Skip a comment, whether inline or block-level, assuming this is one.
	// Comments always begin with a / character.
	
	            if (ch !== '/') {
	                error("Not a comment");
	            }
	
	            next('/');
	
	            if (ch === '/') {
	                inlineComment();
	            } else if (ch === '*') {
	                blockComment();
	            } else {
	                error("Unrecognized comment");
	            }
	        },
	
	        white = function () {
	
	// Skip whitespace and comments.
	// Note that we're detecting comments by only a single / character.
	// This works since regular expressions are not valid JSON(5), but this will
	// break if there are other valid values that begin with a / character!
	
	            while (ch) {
	                if (ch === '/') {
	                    comment();
	                } else if (ws.indexOf(ch) >= 0) {
	                    next();
	                } else {
	                    return;
	                }
	            }
	        },
	
	        word = function () {
	
	// true, false, or null.
	
	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            case 'I':
	                next('I');
	                next('n');
	                next('f');
	                next('i');
	                next('n');
	                next('i');
	                next('t');
	                next('y');
	                return Infinity;
	            case 'N':
	              next( 'N' );
	              next( 'a' );
	              next( 'N' );
	              return NaN;
	            }
	            error("Unexpected " + renderChar(ch));
	        },
	
	        value,  // Place holder for the value function.
	
	        array = function () {
	
	// Parse an array value.
	
	            var array = [];
	
	            if (ch === '[') {
	                next('[');
	                white();
	                while (ch) {
	                    if (ch === ']') {
	                        next(']');
	                        return array;   // Potentially empty array
	                    }
	                    // ES5 allows omitting elements in arrays, e.g. [,] and
	                    // [,null]. We don't allow this in JSON5.
	                    if (ch === ',') {
	                        error("Missing array element");
	                    } else {
	                        array.push(value());
	                    }
	                    white();
	                    // If there's no comma after this value, this needs to
	                    // be the end of the array.
	                    if (ch !== ',') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },
	
	        object = function () {
	
	// Parse an object value.
	
	            var key,
	                object = {};
	
	            if (ch === '{') {
	                next('{');
	                white();
	                while (ch) {
	                    if (ch === '}') {
	                        next('}');
	                        return object;   // Potentially empty object
	                    }
	
	                    // Keys can be unquoted. If they are, they need to be
	                    // valid JS identifiers.
	                    if (ch === '"' || ch === "'") {
	                        key = string();
	                    } else {
	                        key = identifier();
	                    }
	
	                    white();
	                    next(':');
	                    object[key] = value();
	                    white();
	                    // If there's no comma after this pair, this needs to be
	                    // the end of the object.
	                    if (ch !== ',') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };
	
	    value = function () {
	
	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.
	
	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	        case "'":
	            return string();
	        case '-':
	        case '+':
	        case '.':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9' ? number() : word();
	        }
	    };
	
	// Return the json_parse function. It will have access to all of the above
	// functions and variables.
	
	    return function (source, reviver) {
	        var result;
	
	        text = String(source);
	        at = 0;
	        lineNumber = 1;
	        columnNumber = 1;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }
	
	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.
	
	        return typeof reviver === 'function' ? (function walk(holder, key) {
	            var k, v, value = holder[key];
	            if (value && typeof value === 'object') {
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = walk(value, k);
	                        if (v !== undefined) {
	                            value[k] = v;
	                        } else {
	                            delete value[k];
	                        }
	                    }
	                }
	            }
	            return reviver.call(holder, key, value);
	        }({'': result}, '')) : result;
	    };
	}());
	
	// JSON5 stringify will not quote keys where appropriate
	JSON5.stringify = function (obj, replacer, space) {
	    if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
	        throw new Error('Replacer must be a function or an array');
	    }
	    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
	        var value = holder[key];
	
	        // Replace the value with its toJSON value first, if possible
	        if (value && value.toJSON && typeof value.toJSON === "function") {
	            value = value.toJSON();
	        }
	
	        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
	        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
	        if (typeof(replacer) === "function") {
	            return replacer.call(holder, key, value);
	        } else if(replacer) {
	            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
	                return value;
	            } else {
	                return undefined;
	            }
	        } else {
	            return value;
	        }
	    };
	
	    function isWordChar(c) {
	        return (c >= 'a' && c <= 'z') ||
	            (c >= 'A' && c <= 'Z') ||
	            (c >= '0' && c <= '9') ||
	            c === '_' || c === '$';
	    }
	
	    function isWordStart(c) {
	        return (c >= 'a' && c <= 'z') ||
	            (c >= 'A' && c <= 'Z') ||
	            c === '_' || c === '$';
	    }
	
	    function isWord(key) {
	        if (typeof key !== 'string') {
	            return false;
	        }
	        if (!isWordStart(key[0])) {
	            return false;
	        }
	        var i = 1, length = key.length;
	        while (i < length) {
	            if (!isWordChar(key[i])) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    }
	
	    // export for use in tests
	    JSON5.isWord = isWord;
	
	    // polyfills
	    function isArray(obj) {
	        if (Array.isArray) {
	            return Array.isArray(obj);
	        } else {
	            return Object.prototype.toString.call(obj) === '[object Array]';
	        }
	    }
	
	    function isDate(obj) {
	        return Object.prototype.toString.call(obj) === '[object Date]';
	    }
	
	    var objStack = [];
	    function checkForCircular(obj) {
	        for (var i = 0; i < objStack.length; i++) {
	            if (objStack[i] === obj) {
	                throw new TypeError("Converting circular structure to JSON");
	            }
	        }
	    }
	
	    function makeIndent(str, num, noNewLine) {
	        if (!str) {
	            return "";
	        }
	        // indentation no more than 10 chars
	        if (str.length > 10) {
	            str = str.substring(0, 10);
	        }
	
	        var indent = noNewLine ? "" : "\n";
	        for (var i = 0; i < num; i++) {
	            indent += str;
	        }
	
	        return indent;
	    }
	
	    var indentStr;
	    if (space) {
	        if (typeof space === "string") {
	            indentStr = space;
	        } else if (typeof space === "number" && space >= 0) {
	            indentStr = makeIndent(" ", space, true);
	        } else {
	            // ignore space parameter
	        }
	    }
	
	    // Copied from Crokford's implementation of JSON
	    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
	    // Begin
	    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    };
	    function escapeString(string) {
	
	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string' ?
	                c :
	                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }
	    // End
	
	    function internalStringify(holder, key, isTopLevel) {
	        var buffer, res;
	
	        // Replace the value, if necessary
	        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);
	
	        if (obj_part && !isDate(obj_part)) {
	            // unbox objects
	            // don't unbox dates, since will turn it into number
	            obj_part = obj_part.valueOf();
	        }
	        switch(typeof obj_part) {
	            case "boolean":
	                return obj_part.toString();
	
	            case "number":
	                if (isNaN(obj_part) || !isFinite(obj_part)) {
	                    return "null";
	                }
	                return obj_part.toString();
	
	            case "string":
	                return escapeString(obj_part.toString());
	
	            case "object":
	                if (obj_part === null) {
	                    return "null";
	                } else if (isArray(obj_part)) {
	                    checkForCircular(obj_part);
	                    buffer = "[";
	                    objStack.push(obj_part);
	
	                    for (var i = 0; i < obj_part.length; i++) {
	                        res = internalStringify(obj_part, i, false);
	                        buffer += makeIndent(indentStr, objStack.length);
	                        if (res === null || typeof res === "undefined") {
	                            buffer += "null";
	                        } else {
	                            buffer += res;
	                        }
	                        if (i < obj_part.length-1) {
	                            buffer += ",";
	                        } else if (indentStr) {
	                            buffer += "\n";
	                        }
	                    }
	                    objStack.pop();
	                    if (obj_part.length) {
	                        buffer += makeIndent(indentStr, objStack.length, true)
	                    }
	                    buffer += "]";
	                } else {
	                    checkForCircular(obj_part);
	                    buffer = "{";
	                    var nonEmpty = false;
	                    objStack.push(obj_part);
	                    for (var prop in obj_part) {
	                        if (obj_part.hasOwnProperty(prop)) {
	                            var value = internalStringify(obj_part, prop, false);
	                            isTopLevel = false;
	                            if (typeof value !== "undefined" && value !== null) {
	                                buffer += makeIndent(indentStr, objStack.length);
	                                nonEmpty = true;
	                                key = isWord(prop) ? prop : escapeString(prop);
	                                buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
	                            }
	                        }
	                    }
	                    objStack.pop();
	                    if (nonEmpty) {
	                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
	                    } else {
	                        buffer = '{}';
	                    }
	                }
	                return buffer;
	            default:
	                // functions and undefined should be ignored
	                return undefined;
	        }
	    }
	
	    // special case...when undefined is used inside of
	    // a compound object/array, return null.
	    // but when top-level, return undefined
	    var topLevelHolder = {"":obj};
	    if (obj === undefined) {
	        return getReplacedValueOrUndefined(topLevelHolder, '', true);
	    }
	    return internalStringify(topLevelHolder, '', true);
	};


/***/ },
/* 367 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 368 */
/***/ function(module, exports) {

	module.exports = [
	  "🀄",
	  "🃏",
	  "🅰",
	  "🅱",
	  "🅾",
	  "🅿",
	  "🆎",
	  "🆑",
	  "🆒",
	  "🆓",
	  "🆔",
	  "🆕",
	  "🆖",
	  "🆗",
	  "🆘",
	  "🆙",
	  "🆚",
	  "🇦🇨",
	  "🇦🇩",
	  "🇦🇪",
	  "🇦🇫",
	  "🇦🇬",
	  "🇦🇮",
	  "🇦🇱",
	  "🇦🇲",
	  "🇦🇴",
	  "🇦🇶",
	  "🇦🇷",
	  "🇦🇸",
	  "🇦🇹",
	  "🇦🇺",
	  "🇦🇼",
	  "🇦🇽",
	  "🇦🇿",
	  "🇦",
	  "🇧🇦",
	  "🇧🇧",
	  "🇧🇩",
	  "🇧🇪",
	  "🇧🇫",
	  "🇧🇬",
	  "🇧🇭",
	  "🇧🇮",
	  "🇧🇯",
	  "🇧🇱",
	  "🇧🇲",
	  "🇧🇳",
	  "🇧🇴",
	  "🇧🇶",
	  "🇧🇷",
	  "🇧🇸",
	  "🇧🇹",
	  "🇧🇻",
	  "🇧🇼",
	  "🇧🇾",
	  "🇧🇿",
	  "🇧",
	  "🇨🇦",
	  "🇨🇨",
	  "🇨🇩",
	  "🇨🇫",
	  "🇨🇬",
	  "🇨🇭",
	  "🇨🇮",
	  "🇨🇰",
	  "🇨🇱",
	  "🇨🇲",
	  "🇨🇳",
	  "🇨🇴",
	  "🇨🇵",
	  "🇨🇷",
	  "🇨🇺",
	  "🇨🇻",
	  "🇨🇼",
	  "🇨🇽",
	  "🇨🇾",
	  "🇨🇿",
	  "🇨",
	  "🇩🇪",
	  "🇩🇬",
	  "🇩🇯",
	  "🇩🇰",
	  "🇩🇲",
	  "🇩🇴",
	  "🇩🇿",
	  "🇩",
	  "🇪🇦",
	  "🇪🇨",
	  "🇪🇪",
	  "🇪🇬",
	  "🇪🇭",
	  "🇪🇷",
	  "🇪🇸",
	  "🇪🇹",
	  "🇪🇺",
	  "🇪",
	  "🇫🇮",
	  "🇫🇯",
	  "🇫🇰",
	  "🇫🇲",
	  "🇫🇴",
	  "🇫🇷",
	  "🇫",
	  "🇬🇦",
	  "🇬🇧",
	  "🇬🇩",
	  "🇬🇪",
	  "🇬🇫",
	  "🇬🇬",
	  "🇬🇭",
	  "🇬🇮",
	  "🇬🇱",
	  "🇬🇲",
	  "🇬🇳",
	  "🇬🇵",
	  "🇬🇶",
	  "🇬🇷",
	  "🇬🇸",
	  "🇬🇹",
	  "🇬🇺",
	  "🇬🇼",
	  "🇬🇾",
	  "🇬",
	  "🇭🇰",
	  "🇭🇲",
	  "🇭🇳",
	  "🇭🇷",
	  "🇭🇹",
	  "🇭🇺",
	  "🇭",
	  "🇮🇨",
	  "🇮🇩",
	  "🇮🇪",
	  "🇮🇱",
	  "🇮🇲",
	  "🇮🇳",
	  "🇮🇴",
	  "🇮🇶",
	  "🇮🇷",
	  "🇮🇸",
	  "🇮🇹",
	  "🇮",
	  "🇯🇪",
	  "🇯🇲",
	  "🇯🇴",
	  "🇯🇵",
	  "🇯",
	  "🇰🇪",
	  "🇰🇬",
	  "🇰🇭",
	  "🇰🇮",
	  "🇰🇲",
	  "🇰🇳",
	  "🇰🇵",
	  "🇰🇷",
	  "🇰🇼",
	  "🇰🇾",
	  "🇰🇿",
	  "🇰",
	  "🇱🇦",
	  "🇱🇧",
	  "🇱🇨",
	  "🇱🇮",
	  "🇱🇰",
	  "🇱🇷",
	  "🇱🇸",
	  "🇱🇹",
	  "🇱🇺",
	  "🇱🇻",
	  "🇱🇾",
	  "🇱",
	  "🇲🇦",
	  "🇲🇨",
	  "🇲🇩",
	  "🇲🇪",
	  "🇲🇫",
	  "🇲🇬",
	  "🇲🇭",
	  "🇲🇰",
	  "🇲🇱",
	  "🇲🇲",
	  "🇲🇳",
	  "🇲🇴",
	  "🇲🇵",
	  "🇲🇶",
	  "🇲🇷",
	  "🇲🇸",
	  "🇲🇹",
	  "🇲🇺",
	  "🇲🇻",
	  "🇲🇼",
	  "🇲🇽",
	  "🇲🇾",
	  "🇲🇿",
	  "🇲",
	  "🇳🇦",
	  "🇳🇨",
	  "🇳🇪",
	  "🇳🇫",
	  "🇳🇬",
	  "🇳🇮",
	  "🇳🇱",
	  "🇳🇴",
	  "🇳🇵",
	  "🇳🇷",
	  "🇳🇺",
	  "🇳🇿",
	  "🇳",
	  "🇴🇲",
	  "🇴",
	  "🇵🇦",
	  "🇵🇪",
	  "🇵🇫",
	  "🇵🇬",
	  "🇵🇭",
	  "🇵🇰",
	  "🇵🇱",
	  "🇵🇲",
	  "🇵🇳",
	  "🇵🇷",
	  "🇵🇸",
	  "🇵🇹",
	  "🇵🇼",
	  "🇵🇾",
	  "🇵",
	  "🇶🇦",
	  "🇶",
	  "🇷🇪",
	  "🇷🇴",
	  "🇷🇸",
	  "🇷🇺",
	  "🇷🇼",
	  "🇷",
	  "🇸🇦",
	  "🇸🇧",
	  "🇸🇨",
	  "🇸🇩",
	  "🇸🇪",
	  "🇸🇬",
	  "🇸🇭",
	  "🇸🇮",
	  "🇸🇯",
	  "🇸🇰",
	  "🇸🇱",
	  "🇸🇲",
	  "🇸🇳",
	  "🇸🇴",
	  "🇸🇷",
	  "🇸🇸",
	  "🇸🇹",
	  "🇸🇻",
	  "🇸🇽",
	  "🇸🇾",
	  "🇸🇿",
	  "🇸",
	  "🇹🇦",
	  "🇹🇨",
	  "🇹🇩",
	  "🇹🇫",
	  "🇹🇬",
	  "🇹🇭",
	  "🇹🇯",
	  "🇹🇰",
	  "🇹🇱",
	  "🇹🇲",
	  "🇹🇳",
	  "🇹🇴",
	  "🇹🇷",
	  "🇹🇹",
	  "🇹🇻",
	  "🇹🇼",
	  "🇹🇿",
	  "🇹",
	  "🇺🇦",
	  "🇺🇬",
	  "🇺🇲",
	  "🇺🇳",
	  "🇺🇸",
	  "🇺🇾",
	  "🇺🇿",
	  "🇺",
	  "🇻🇦",
	  "🇻🇨",
	  "🇻🇪",
	  "🇻🇬",
	  "🇻🇮",
	  "🇻🇳",
	  "🇻🇺",
	  "🇻",
	  "🇼🇫",
	  "🇼🇸",
	  "🇼",
	  "🇽🇰",
	  "🇽",
	  "🇾🇪",
	  "🇾🇹",
	  "🇾",
	  "🇿🇦",
	  "🇿🇲",
	  "🇿🇼",
	  "🇿",
	  "🈁",
	  "🈂",
	  "🈚",
	  "🈯",
	  "🈲",
	  "🈳",
	  "🈴",
	  "🈵",
	  "🈶",
	  "🈷",
	  "🈸",
	  "🈹",
	  "🈺",
	  "🉐",
	  "🉑",
	  "🌀",
	  "🌁",
	  "🌂",
	  "🌃",
	  "🌄",
	  "🌅",
	  "🌆",
	  "🌇",
	  "🌈",
	  "🌉",
	  "🌊",
	  "🌋",
	  "🌌",
	  "🌍",
	  "🌎",
	  "🌏",
	  "🌐",
	  "🌑",
	  "🌒",
	  "🌓",
	  "🌔",
	  "🌕",
	  "🌖",
	  "🌗",
	  "🌘",
	  "🌙",
	  "🌚",
	  "🌛",
	  "🌜",
	  "🌝",
	  "🌞",
	  "🌟",
	  "🌠",
	  "🌡",
	  "🌤",
	  "🌥",
	  "🌦",
	  "🌧",
	  "🌨",
	  "🌩",
	  "🌪",
	  "🌫",
	  "🌬",
	  "🌭",
	  "🌮",
	  "🌯",
	  "🌰",
	  "🌱",
	  "🌲",
	  "🌳",
	  "🌴",
	  "🌵",
	  "🌶",
	  "🌷",
	  "🌸",
	  "🌹",
	  "🌺",
	  "🌻",
	  "🌼",
	  "🌽",
	  "🌾",
	  "🌿",
	  "🍀",
	  "🍁",
	  "🍂",
	  "🍃",
	  "🍄",
	  "🍅",
	  "🍆",
	  "🍇",
	  "🍈",
	  "🍉",
	  "🍊",
	  "🍋",
	  "🍌",
	  "🍍",
	  "🍎",
	  "🍏",
	  "🍐",
	  "🍑",
	  "🍒",
	  "🍓",
	  "🍔",
	  "🍕",
	  "🍖",
	  "🍗",
	  "🍘",
	  "🍙",
	  "🍚",
	  "🍛",
	  "🍜",
	  "🍝",
	  "🍞",
	  "🍟",
	  "🍠",
	  "🍡",
	  "🍢",
	  "🍣",
	  "🍤",
	  "🍥",
	  "🍦",
	  "🍧",
	  "🍨",
	  "🍩",
	  "🍪",
	  "🍫",
	  "🍬",
	  "🍭",
	  "🍮",
	  "🍯",
	  "🍰",
	  "🍱",
	  "🍲",
	  "🍳",
	  "🍴",
	  "🍵",
	  "🍶",
	  "🍷",
	  "🍸",
	  "🍹",
	  "🍺",
	  "🍻",
	  "🍼",
	  "🍽",
	  "🍾",
	  "🍿",
	  "🎀",
	  "🎁",
	  "🎂",
	  "🎃",
	  "🎄",
	  "🎅🏻",
	  "🎅🏼",
	  "🎅🏽",
	  "🎅🏾",
	  "🎅🏿",
	  "🎅",
	  "🎆",
	  "🎇",
	  "🎈",
	  "🎉",
	  "🎊",
	  "🎋",
	  "🎌",
	  "🎍",
	  "🎎",
	  "🎏",
	  "🎐",
	  "🎑",
	  "🎒",
	  "🎓",
	  "🎖",
	  "🎗",
	  "🎙",
	  "🎚",
	  "🎛",
	  "🎞",
	  "🎟",
	  "🎠",
	  "🎡",
	  "🎢",
	  "🎣",
	  "🎤",
	  "🎥",
	  "🎦",
	  "🎧",
	  "🎨",
	  "🎩",
	  "🎪",
	  "🎫",
	  "🎬",
	  "🎭",
	  "🎮",
	  "🎯",
	  "🎰",
	  "🎱",
	  "🎲",
	  "🎳",
	  "🎴",
	  "🎵",
	  "🎶",
	  "🎷",
	  "🎸",
	  "🎹",
	  "🎺",
	  "🎻",
	  "🎼",
	  "🎽",
	  "🎾",
	  "🎿",
	  "🏀",
	  "🏁",
	  "🏂🏻",
	  "🏂🏼",
	  "🏂🏽",
	  "🏂🏾",
	  "🏂🏿",
	  "🏂",
	  "🏃🏻‍♀️",
	  "🏃🏻‍♂️",
	  "🏃🏻",
	  "🏃🏼‍♀️",
	  "🏃🏼‍♂️",
	  "🏃🏼",
	  "🏃🏽‍♀️",
	  "🏃🏽‍♂️",
	  "🏃🏽",
	  "🏃🏾‍♀️",
	  "🏃🏾‍♂️",
	  "🏃🏾",
	  "🏃🏿‍♀️",
	  "🏃🏿‍♂️",
	  "🏃🏿",
	  "🏃‍♀️",
	  "🏃‍♂️",
	  "🏃",
	  "🏄🏻‍♀️",
	  "🏄🏻‍♂️",
	  "🏄🏻",
	  "🏄🏼‍♀️",
	  "🏄🏼‍♂️",
	  "🏄🏼",
	  "🏄🏽‍♀️",
	  "🏄🏽‍♂️",
	  "🏄🏽",
	  "🏄🏾‍♀️",
	  "🏄🏾‍♂️",
	  "🏄🏾",
	  "🏄🏿‍♀️",
	  "🏄🏿‍♂️",
	  "🏄🏿",
	  "🏄‍♀️",
	  "🏄‍♂️",
	  "🏄",
	  "🏅",
	  "🏆",
	  "🏇🏻",
	  "🏇🏼",
	  "🏇🏽",
	  "🏇🏾",
	  "🏇🏿",
	  "🏇",
	  "🏈",
	  "🏉",
	  "🏊🏻‍♀️",
	  "🏊🏻‍♂️",
	  "🏊🏻",
	  "🏊🏼‍♀️",
	  "🏊🏼‍♂️",
	  "🏊🏼",
	  "🏊🏽‍♀️",
	  "🏊🏽‍♂️",
	  "🏊🏽",
	  "🏊🏾‍♀️",
	  "🏊🏾‍♂️",
	  "🏊🏾",
	  "🏊🏿‍♀️",
	  "🏊🏿‍♂️",
	  "🏊🏿",
	  "🏊‍♀️",
	  "🏊‍♂️",
	  "🏊",
	  "🏋🏻‍♀️",
	  "🏋🏻‍♂️",
	  "🏋🏻",
	  "🏋🏼‍♀️",
	  "🏋🏼‍♂️",
	  "🏋🏼",
	  "🏋🏽‍♀️",
	  "🏋🏽‍♂️",
	  "🏋🏽",
	  "🏋🏾‍♀️",
	  "🏋🏾‍♂️",
	  "🏋🏾",
	  "🏋🏿‍♀️",
	  "🏋🏿‍♂️",
	  "🏋🏿",
	  "🏋️‍♀️",
	  "🏋️‍♂️",
	  "🏋",
	  "🏌🏻‍♀️",
	  "🏌🏻‍♂️",
	  "🏌🏻",
	  "🏌🏼‍♀️",
	  "🏌🏼‍♂️",
	  "🏌🏼",
	  "🏌🏽‍♀️",
	  "🏌🏽‍♂️",
	  "🏌🏽",
	  "🏌🏾‍♀️",
	  "🏌🏾‍♂️",
	  "🏌🏾",
	  "🏌🏿‍♀️",
	  "🏌🏿‍♂️",
	  "🏌🏿",
	  "🏌️‍♀️",
	  "🏌️‍♂️",
	  "🏌",
	  "🏍",
	  "🏎",
	  "🏏",
	  "🏐",
	  "🏑",
	  "🏒",
	  "🏓",
	  "🏔",
	  "🏕",
	  "🏖",
	  "🏗",
	  "🏘",
	  "🏙",
	  "🏚",
	  "🏛",
	  "🏜",
	  "🏝",
	  "🏞",
	  "🏟",
	  "🏠",
	  "🏡",
	  "🏢",
	  "🏣",
	  "🏤",
	  "🏥",
	  "🏦",
	  "🏧",
	  "🏨",
	  "🏩",
	  "🏪",
	  "🏫",
	  "🏬",
	  "🏭",
	  "🏮",
	  "🏯",
	  "🏰",
	  "🏳️‍🌈",
	  "🏳",
	  "🏴‍☠️",
	  "🏴",
	  "🏵",
	  "🏷",
	  "🏸",
	  "🏹",
	  "🏺",
	  "🏻",
	  "🏼",
	  "🏽",
	  "🏾",
	  "🏿",
	  "🐀",
	  "🐁",
	  "🐂",
	  "🐃",
	  "🐄",
	  "🐅",
	  "🐆",
	  "🐇",
	  "🐈",
	  "🐉",
	  "🐊",
	  "🐋",
	  "🐌",
	  "🐍",
	  "🐎",
	  "🐏",
	  "🐐",
	  "🐑",
	  "🐒",
	  "🐓",
	  "🐔",
	  "🐕",
	  "🐖",
	  "🐗",
	  "🐘",
	  "🐙",
	  "🐚",
	  "🐛",
	  "🐜",
	  "🐝",
	  "🐞",
	  "🐟",
	  "🐠",
	  "🐡",
	  "🐢",
	  "🐣",
	  "🐤",
	  "🐥",
	  "🐦",
	  "🐧",
	  "🐨",
	  "🐩",
	  "🐪",
	  "🐫",
	  "🐬",
	  "🐭",
	  "🐮",
	  "🐯",
	  "🐰",
	  "🐱",
	  "🐲",
	  "🐳",
	  "🐴",
	  "🐵",
	  "🐶",
	  "🐷",
	  "🐸",
	  "🐹",
	  "🐺",
	  "🐻",
	  "🐼",
	  "🐽",
	  "🐾",
	  "🐿",
	  "👀",
	  "👁‍🗨",
	  "👁",
	  "👂🏻",
	  "👂🏼",
	  "👂🏽",
	  "👂🏾",
	  "👂🏿",
	  "👂",
	  "👃🏻",
	  "👃🏼",
	  "👃🏽",
	  "👃🏾",
	  "👃🏿",
	  "👃",
	  "👄",
	  "👅",
	  "👆🏻",
	  "👆🏼",
	  "👆🏽",
	  "👆🏾",
	  "👆🏿",
	  "👆",
	  "👇🏻",
	  "👇🏼",
	  "👇🏽",
	  "👇🏾",
	  "👇🏿",
	  "👇",
	  "👈🏻",
	  "👈🏼",
	  "👈🏽",
	  "👈🏾",
	  "👈🏿",
	  "👈",
	  "👉🏻",
	  "👉🏼",
	  "👉🏽",
	  "👉🏾",
	  "👉🏿",
	  "👉",
	  "👊🏻",
	  "👊🏼",
	  "👊🏽",
	  "👊🏾",
	  "👊🏿",
	  "👊",
	  "👋🏻",
	  "👋🏼",
	  "👋🏽",
	  "👋🏾",
	  "👋🏿",
	  "👋",
	  "👌🏻",
	  "👌🏼",
	  "👌🏽",
	  "👌🏾",
	  "👌🏿",
	  "👌",
	  "👍🏻",
	  "👍🏼",
	  "👍🏽",
	  "👍🏾",
	  "👍🏿",
	  "👍",
	  "👎🏻",
	  "👎🏼",
	  "👎🏽",
	  "👎🏾",
	  "👎🏿",
	  "👎",
	  "👏🏻",
	  "👏🏼",
	  "👏🏽",
	  "👏🏾",
	  "👏🏿",
	  "👏",
	  "👐🏻",
	  "👐🏼",
	  "👐🏽",
	  "👐🏾",
	  "👐🏿",
	  "👐",
	  "👑",
	  "👒",
	  "👓",
	  "👔",
	  "👕",
	  "👖",
	  "👗",
	  "👘",
	  "👙",
	  "👚",
	  "👛",
	  "👜",
	  "👝",
	  "👞",
	  "👟",
	  "👠",
	  "👡",
	  "👢",
	  "👣",
	  "👤",
	  "👥",
	  "👦🏻",
	  "👦🏼",
	  "👦🏽",
	  "👦🏾",
	  "👦🏿",
	  "👦",
	  "👧🏻",
	  "👧🏼",
	  "👧🏽",
	  "👧🏾",
	  "👧🏿",
	  "👧",
	  "👨🏻‍🌾",
	  "👨🏻‍🍳",
	  "👨🏻‍🎓",
	  "👨🏻‍🎤",
	  "👨🏻‍🎨",
	  "👨🏻‍🏫",
	  "👨🏻‍🏭",
	  "👨🏻‍💻",
	  "👨🏻‍💼",
	  "👨🏻‍🔧",
	  "👨🏻‍🔬",
	  "👨🏻‍🚀",
	  "👨🏻‍🚒",
	  "👨🏻‍⚕️",
	  "👨🏻‍⚖️",
	  "👨🏻‍✈️",
	  "👨🏻",
	  "👨🏼‍🌾",
	  "👨🏼‍🍳",
	  "👨🏼‍🎓",
	  "👨🏼‍🎤",
	  "👨🏼‍🎨",
	  "👨🏼‍🏫",
	  "👨🏼‍🏭",
	  "👨🏼‍💻",
	  "👨🏼‍💼",
	  "👨🏼‍🔧",
	  "👨🏼‍🔬",
	  "👨🏼‍🚀",
	  "👨🏼‍🚒",
	  "👨🏼‍⚕️",
	  "👨🏼‍⚖️",
	  "👨🏼‍✈️",
	  "👨🏼",
	  "👨🏽‍🌾",
	  "👨🏽‍🍳",
	  "👨🏽‍🎓",
	  "👨🏽‍🎤",
	  "👨🏽‍🎨",
	  "👨🏽‍🏫",
	  "👨🏽‍🏭",
	  "👨🏽‍💻",
	  "👨🏽‍💼",
	  "👨🏽‍🔧",
	  "👨🏽‍🔬",
	  "👨🏽‍🚀",
	  "👨🏽‍🚒",
	  "👨🏽‍⚕️",
	  "👨🏽‍⚖️",
	  "👨🏽‍✈️",
	  "👨🏽",
	  "👨🏾‍🌾",
	  "👨🏾‍🍳",
	  "👨🏾‍🎓",
	  "👨🏾‍🎤",
	  "👨🏾‍🎨",
	  "👨🏾‍🏫",
	  "👨🏾‍🏭",
	  "👨🏾‍💻",
	  "👨🏾‍💼",
	  "👨🏾‍🔧",
	  "👨🏾‍🔬",
	  "👨🏾‍🚀",
	  "👨🏾‍🚒",
	  "👨🏾‍⚕️",
	  "👨🏾‍⚖️",
	  "👨🏾‍✈️",
	  "👨🏾",
	  "👨🏿‍🌾",
	  "👨🏿‍🍳",
	  "👨🏿‍🎓",
	  "👨🏿‍🎤",
	  "👨🏿‍🎨",
	  "👨🏿‍🏫",
	  "👨🏿‍🏭",
	  "👨🏿‍💻",
	  "👨🏿‍💼",
	  "👨🏿‍🔧",
	  "👨🏿‍🔬",
	  "👨🏿‍🚀",
	  "👨🏿‍🚒",
	  "👨🏿‍⚕️",
	  "👨🏿‍⚖️",
	  "👨🏿‍✈️",
	  "👨🏿",
	  "👨‍🌾",
	  "👨‍🍳",
	  "👨‍🎓",
	  "👨‍🎤",
	  "👨‍🎨",
	  "👨‍🏫",
	  "👨‍🏭",
	  "👨‍👦‍👦",
	  "👨‍👦",
	  "👨‍👧‍👦",
	  "👨‍👧‍👧",
	  "👨‍👧",
	  "👨‍👨‍👦‍👦",
	  "👨‍👨‍👦",
	  "👨‍👨‍👧‍👦",
	  "👨‍👨‍👧‍👧",
	  "👨‍👨‍👧",
	  "👨‍👩‍👦‍👦",
	  "👨‍👩‍👦",
	  "👨‍👩‍👧‍👦",
	  "👨‍👩‍👧‍👧",
	  "👨‍👩‍👧",
	  "👨‍💻",
	  "👨‍💼",
	  "👨‍🔧",
	  "👨‍🔬",
	  "👨‍🚀",
	  "👨‍🚒",
	  "👨‍⚕️",
	  "👨‍⚖️",
	  "👨‍✈️",
	  "👨‍❤️‍👨",
	  "👨‍❤️‍💋‍👨",
	  "👨",
	  "👩🏻‍🌾",
	  "👩🏻‍🍳",
	  "👩🏻‍🎓",
	  "👩🏻‍🎤",
	  "👩🏻‍🎨",
	  "👩🏻‍🏫",
	  "👩🏻‍🏭",
	  "👩🏻‍💻",
	  "👩🏻‍💼",
	  "👩🏻‍🔧",
	  "👩🏻‍🔬",
	  "👩🏻‍🚀",
	  "👩🏻‍🚒",
	  "👩🏻‍⚕️",
	  "👩🏻‍⚖️",
	  "👩🏻‍✈️",
	  "👩🏻",
	  "👩🏼‍🌾",
	  "👩🏼‍🍳",
	  "👩🏼‍🎓",
	  "👩🏼‍🎤",
	  "👩🏼‍🎨",
	  "👩🏼‍🏫",
	  "👩🏼‍🏭",
	  "👩🏼‍💻",
	  "👩🏼‍💼",
	  "👩🏼‍🔧",
	  "👩🏼‍🔬",
	  "👩🏼‍🚀",
	  "👩🏼‍🚒",
	  "👩🏼‍⚕️",
	  "👩🏼‍⚖️",
	  "👩🏼‍✈️",
	  "👩🏼",
	  "👩🏽‍🌾",
	  "👩🏽‍🍳",
	  "👩🏽‍🎓",
	  "👩🏽‍🎤",
	  "👩🏽‍🎨",
	  "👩🏽‍🏫",
	  "👩🏽‍🏭",
	  "👩🏽‍💻",
	  "👩🏽‍💼",
	  "👩🏽‍🔧",
	  "👩🏽‍🔬",
	  "👩🏽‍🚀",
	  "👩🏽‍🚒",
	  "👩🏽‍⚕️",
	  "👩🏽‍⚖️",
	  "👩🏽‍✈️",
	  "👩🏽",
	  "👩🏾‍🌾",
	  "👩🏾‍🍳",
	  "👩🏾‍🎓",
	  "👩🏾‍🎤",
	  "👩🏾‍🎨",
	  "👩🏾‍🏫",
	  "👩🏾‍🏭",
	  "👩🏾‍💻",
	  "👩🏾‍💼",
	  "👩🏾‍🔧",
	  "👩🏾‍🔬",
	  "👩🏾‍🚀",
	  "👩🏾‍🚒",
	  "👩🏾‍⚕️",
	  "👩🏾‍⚖️",
	  "👩🏾‍✈️",
	  "👩🏾",
	  "👩🏿‍🌾",
	  "👩🏿‍🍳",
	  "👩🏿‍🎓",
	  "👩🏿‍🎤",
	  "👩🏿‍🎨",
	  "👩🏿‍🏫",
	  "👩🏿‍🏭",
	  "👩🏿‍💻",
	  "👩🏿‍💼",
	  "👩🏿‍🔧",
	  "👩🏿‍🔬",
	  "👩🏿‍🚀",
	  "👩🏿‍🚒",
	  "👩🏿‍⚕️",
	  "👩🏿‍⚖️",
	  "👩🏿‍✈️",
	  "👩🏿",
	  "👩‍🌾",
	  "👩‍🍳",
	  "👩‍🎓",
	  "👩‍🎤",
	  "👩‍🎨",
	  "👩‍🏫",
	  "👩‍🏭",
	  "👩‍👦‍👦",
	  "👩‍👦",
	  "👩‍👧‍👦",
	  "👩‍👧‍👧",
	  "👩‍👧",
	  "👩‍👩‍👦‍👦",
	  "👩‍👩‍👦",
	  "👩‍👩‍👧‍👦",
	  "👩‍👩‍👧‍👧",
	  "👩‍👩‍👧",
	  "👩‍💻",
	  "👩‍💼",
	  "👩‍🔧",
	  "👩‍🔬",
	  "👩‍🚀",
	  "👩‍🚒",
	  "👩‍⚕️",
	  "👩‍⚖️",
	  "👩‍✈️",
	  "👩‍❤️‍👨",
	  "👩‍❤️‍👩",
	  "👩‍❤️‍💋‍👨",
	  "👩‍❤️‍💋‍👩",
	  "👩",
	  "👪🏻",
	  "👪🏼",
	  "👪🏽",
	  "👪🏾",
	  "👪🏿",
	  "👪",
	  "👫🏻",
	  "👫🏼",
	  "👫🏽",
	  "👫🏾",
	  "👫🏿",
	  "👫",
	  "👬🏻",
	  "👬🏼",
	  "👬🏽",
	  "👬🏾",
	  "👬🏿",
	  "👬",
	  "👭🏻",
	  "👭🏼",
	  "👭🏽",
	  "👭🏾",
	  "👭🏿",
	  "👭",
	  "👮🏻‍♀️",
	  "👮🏻‍♂️",
	  "👮🏻",
	  "👮🏼‍♀️",
	  "👮🏼‍♂️",
	  "👮🏼",
	  "👮🏽‍♀️",
	  "👮🏽‍♂️",
	  "👮🏽",
	  "👮🏾‍♀️",
	  "👮🏾‍♂️",
	  "👮🏾",
	  "👮🏿‍♀️",
	  "👮🏿‍♂️",
	  "👮🏿",
	  "👮‍♀️",
	  "👮‍♂️",
	  "👮",
	  "👯🏻‍♀️",
	  "👯🏻‍♂️",
	  "👯🏻",
	  "👯🏼‍♀️",
	  "👯🏼‍♂️",
	  "👯🏼",
	  "👯🏽‍♀️",
	  "👯🏽‍♂️",
	  "👯🏽",
	  "👯🏾‍♀️",
	  "👯🏾‍♂️",
	  "👯🏾",
	  "👯🏿‍♀️",
	  "👯🏿‍♂️",
	  "👯🏿",
	  "👯‍♀️",
	  "👯‍♂️",
	  "👯",
	  "👰🏻",
	  "👰🏼",
	  "👰🏽",
	  "👰🏾",
	  "👰🏿",
	  "👰",
	  "👱🏻‍♀️",
	  "👱🏻‍♂️",
	  "👱🏻",
	  "👱🏼‍♀️",
	  "👱🏼‍♂️",
	  "👱🏼",
	  "👱🏽‍♀️",
	  "👱🏽‍♂️",
	  "👱🏽",
	  "👱🏾‍♀️",
	  "👱🏾‍♂️",
	  "👱🏾",
	  "👱🏿‍♀️",
	  "👱🏿‍♂️",
	  "👱🏿",
	  "👱‍♀️",
	  "👱‍♂️",
	  "👱",
	  "👲🏻",
	  "👲🏼",
	  "👲🏽",
	  "👲🏾",
	  "👲🏿",
	  "👲",
	  "👳🏻‍♀️",
	  "👳🏻‍♂️",
	  "👳🏻",
	  "👳🏼‍♀️",
	  "👳🏼‍♂️",
	  "👳🏼",
	  "👳🏽‍♀️",
	  "👳🏽‍♂️",
	  "👳🏽",
	  "👳🏾‍♀️",
	  "👳🏾‍♂️",
	  "👳🏾",
	  "👳🏿‍♀️",
	  "👳🏿‍♂️",
	  "👳🏿",
	  "👳‍♀️",
	  "👳‍♂️",
	  "👳",
	  "👴🏻",
	  "👴🏼",
	  "👴🏽",
	  "👴🏾",
	  "👴🏿",
	  "👴",
	  "👵🏻",
	  "👵🏼",
	  "👵🏽",
	  "👵🏾",
	  "👵🏿",
	  "👵",
	  "👶🏻",
	  "👶🏼",
	  "👶🏽",
	  "👶🏾",
	  "👶🏿",
	  "👶",
	  "👷🏻‍♀️",
	  "👷🏻‍♂️",
	  "👷🏻",
	  "👷🏼‍♀️",
	  "👷🏼‍♂️",
	  "👷🏼",
	  "👷🏽‍♀️",
	  "👷🏽‍♂️",
	  "👷🏽",
	  "👷🏾‍♀️",
	  "👷🏾‍♂️",
	  "👷🏾",
	  "👷🏿‍♀️",
	  "👷🏿‍♂️",
	  "👷🏿",
	  "👷‍♀️",
	  "👷‍♂️",
	  "👷",
	  "👸🏻",
	  "👸🏼",
	  "👸🏽",
	  "👸🏾",
	  "👸🏿",
	  "👸",
	  "👹",
	  "👺",
	  "👻",
	  "👼🏻",
	  "👼🏼",
	  "👼🏽",
	  "👼🏾",
	  "👼🏿",
	  "👼",
	  "👽",
	  "👾",
	  "👿",
	  "💀",
	  "💁🏻‍♀️",
	  "💁🏻‍♂️",
	  "💁🏻",
	  "💁🏼‍♀️",
	  "💁🏼‍♂️",
	  "💁🏼",
	  "💁🏽‍♀️",
	  "💁🏽‍♂️",
	  "💁🏽",
	  "💁🏾‍♀️",
	  "💁🏾‍♂️",
	  "💁🏾",
	  "💁🏿‍♀️",
	  "💁🏿‍♂️",
	  "💁🏿",
	  "💁‍♀️",
	  "💁‍♂️",
	  "💁",
	  "💂🏻‍♀️",
	  "💂🏻‍♂️",
	  "💂🏻",
	  "💂🏼‍♀️",
	  "💂🏼‍♂️",
	  "💂🏼",
	  "💂🏽‍♀️",
	  "💂🏽‍♂️",
	  "💂🏽",
	  "💂🏾‍♀️",
	  "💂🏾‍♂️",
	  "💂🏾",
	  "💂🏿‍♀️",
	  "💂🏿‍♂️",
	  "💂🏿",
	  "💂‍♀️",
	  "💂‍♂️",
	  "💂",
	  "💃🏻",
	  "💃🏼",
	  "💃🏽",
	  "💃🏾",
	  "💃🏿",
	  "💃",
	  "💄",
	  "💅🏻",
	  "💅🏼",
	  "💅🏽",
	  "💅🏾",
	  "💅🏿",
	  "💅",
	  "💆🏻‍♀️",
	  "💆🏻‍♂️",
	  "💆🏻",
	  "💆🏼‍♀️",
	  "💆🏼‍♂️",
	  "💆🏼",
	  "💆🏽‍♀️",
	  "💆🏽‍♂️",
	  "💆🏽",
	  "💆🏾‍♀️",
	  "💆🏾‍♂️",
	  "💆🏾",
	  "💆🏿‍♀️",
	  "💆🏿‍♂️",
	  "💆🏿",
	  "💆‍♀️",
	  "💆‍♂️",
	  "💆",
	  "💇🏻‍♀️",
	  "💇🏻‍♂️",
	  "💇🏻",
	  "💇🏼‍♀️",
	  "💇🏼‍♂️",
	  "💇🏼",
	  "💇🏽‍♀️",
	  "💇🏽‍♂️",
	  "💇🏽",
	  "💇🏾‍♀️",
	  "💇🏾‍♂️",
	  "💇🏾",
	  "💇🏿‍♀️",
	  "💇🏿‍♂️",
	  "💇🏿",
	  "💇‍♀️",
	  "💇‍♂️",
	  "💇",
	  "💈",
	  "💉",
	  "💊",
	  "💋",
	  "💌",
	  "💍",
	  "💎",
	  "💏",
	  "💐",
	  "💑",
	  "💒",
	  "💓",
	  "💔",
	  "💕",
	  "💖",
	  "💗",
	  "💘",
	  "💙",
	  "💚",
	  "💛",
	  "💜",
	  "💝",
	  "💞",
	  "💟",
	  "💠",
	  "💡",
	  "💢",
	  "💣",
	  "💤",
	  "💥",
	  "💦",
	  "💧",
	  "💨",
	  "💩",
	  "💪🏻",
	  "💪🏼",
	  "💪🏽",
	  "💪🏾",
	  "💪🏿",
	  "💪",
	  "💫",
	  "💬",
	  "💭",
	  "💮",
	  "💯",
	  "💰",
	  "💱",
	  "💲",
	  "💳",
	  "💴",
	  "💵",
	  "💶",
	  "💷",
	  "💸",
	  "💹",
	  "💺",
	  "💻",
	  "💼",
	  "💽",
	  "💾",
	  "💿",
	  "📀",
	  "📁",
	  "📂",
	  "📃",
	  "📄",
	  "📅",
	  "📆",
	  "📇",
	  "📈",
	  "📉",
	  "📊",
	  "📋",
	  "📌",
	  "📍",
	  "📎",
	  "📏",
	  "📐",
	  "📑",
	  "📒",
	  "📓",
	  "📔",
	  "📕",
	  "📖",
	  "📗",
	  "📘",
	  "📙",
	  "📚",
	  "📛",
	  "📜",
	  "📝",
	  "📞",
	  "📟",
	  "📠",
	  "📡",
	  "📢",
	  "📣",
	  "📤",
	  "📥",
	  "📦",
	  "📧",
	  "📨",
	  "📩",
	  "📪",
	  "📫",
	  "📬",
	  "📭",
	  "📮",
	  "📯",
	  "📰",
	  "📱",
	  "📲",
	  "📳",
	  "📴",
	  "📵",
	  "📶",
	  "📷",
	  "📸",
	  "📹",
	  "📺",
	  "📻",
	  "📼",
	  "📽",
	  "📿",
	  "🔀",
	  "🔁",
	  "🔂",
	  "🔃",
	  "🔄",
	  "🔅",
	  "🔆",
	  "🔇",
	  "🔈",
	  "🔉",
	  "🔊",
	  "🔋",
	  "🔌",
	  "🔍",
	  "🔎",
	  "🔏",
	  "🔐",
	  "🔑",
	  "🔒",
	  "🔓",
	  "🔔",
	  "🔕",
	  "🔖",
	  "🔗",
	  "🔘",
	  "🔙",
	  "🔚",
	  "🔛",
	  "🔜",
	  "🔝",
	  "🔞",
	  "🔟",
	  "🔠",
	  "🔡",
	  "🔢",
	  "🔣",
	  "🔤",
	  "🔥",
	  "🔦",
	  "🔧",
	  "🔨",
	  "🔩",
	  "🔪",
	  "🔫",
	  "🔬",
	  "🔭",
	  "🔮",
	  "🔯",
	  "🔰",
	  "🔱",
	  "🔲",
	  "🔳",
	  "🔴",
	  "🔵",
	  "🔶",
	  "🔷",
	  "🔸",
	  "🔹",
	  "🔺",
	  "🔻",
	  "🔼",
	  "🔽",
	  "🕉",
	  "🕊",
	  "🕋",
	  "🕌",
	  "🕍",
	  "🕎",
	  "🕐",
	  "🕑",
	  "🕒",
	  "🕓",
	  "🕔",
	  "🕕",
	  "🕖",
	  "🕗",
	  "🕘",
	  "🕙",
	  "🕚",
	  "🕛",
	  "🕜",
	  "🕝",
	  "🕞",
	  "🕟",
	  "🕠",
	  "🕡",
	  "🕢",
	  "🕣",
	  "🕤",
	  "🕥",
	  "🕦",
	  "🕧",
	  "🕯",
	  "🕰",
	  "🕳",
	  "🕴🏻",
	  "🕴🏼",
	  "🕴🏽",
	  "🕴🏾",
	  "🕴🏿",
	  "🕴",
	  "🕵🏻‍♀️",
	  "🕵🏻‍♂️",
	  "🕵🏻",
	  "🕵🏼‍♀️",
	  "🕵🏼‍♂️",
	  "🕵🏼",
	  "🕵🏽‍♀️",
	  "🕵🏽‍♂️",
	  "🕵🏽",
	  "🕵🏾‍♀️",
	  "🕵🏾‍♂️",
	  "🕵🏾",
	  "🕵🏿‍♀️",
	  "🕵🏿‍♂️",
	  "🕵🏿",
	  "🕵️‍♀️",
	  "🕵️‍♂️",
	  "🕵",
	  "🕶",
	  "🕷",
	  "🕸",
	  "🕹",
	  "🕺🏻",
	  "🕺🏼",
	  "🕺🏽",
	  "🕺🏾",
	  "🕺🏿",
	  "🕺",
	  "🖇",
	  "🖊",
	  "🖋",
	  "🖌",
	  "🖍",
	  "🖐🏻",
	  "🖐🏼",
	  "🖐🏽",
	  "🖐🏾",
	  "🖐🏿",
	  "🖐",
	  "🖕🏻",
	  "🖕🏼",
	  "🖕🏽",
	  "🖕🏾",
	  "🖕🏿",
	  "🖕",
	  "🖖🏻",
	  "🖖🏼",
	  "🖖🏽",
	  "🖖🏾",
	  "🖖🏿",
	  "🖖",
	  "🖤",
	  "🖥",
	  "🖨",
	  "🖱",
	  "🖲",
	  "🖼",
	  "🗂",
	  "🗃",
	  "🗄",
	  "🗑",
	  "🗒",
	  "🗓",
	  "🗜",
	  "🗝",
	  "🗞",
	  "🗡",
	  "🗣",
	  "🗨",
	  "🗯",
	  "🗳",
	  "🗺",
	  "🗻",
	  "🗼",
	  "🗽",
	  "🗾",
	  "🗿",
	  "😀",
	  "😁",
	  "😂",
	  "😃",
	  "😄",
	  "😅",
	  "😆",
	  "😇",
	  "😈",
	  "😉",
	  "😊",
	  "😋",
	  "😌",
	  "😍",
	  "😎",
	  "😏",
	  "😐",
	  "😑",
	  "😒",
	  "😓",
	  "😔",
	  "😕",
	  "😖",
	  "😗",
	  "😘",
	  "😙",
	  "😚",
	  "😛",
	  "😜",
	  "😝",
	  "😞",
	  "😟",
	  "😠",
	  "😡",
	  "😢",
	  "😣",
	  "😤",
	  "😥",
	  "😦",
	  "😧",
	  "😨",
	  "😩",
	  "😪",
	  "😫",
	  "😬",
	  "😭",
	  "😮",
	  "😯",
	  "😰",
	  "😱",
	  "😲",
	  "😳",
	  "😴",
	  "😵",
	  "😶",
	  "😷",
	  "😸",
	  "😹",
	  "😺",
	  "😻",
	  "😼",
	  "😽",
	  "😾",
	  "😿",
	  "🙀",
	  "🙁",
	  "🙂",
	  "🙃",
	  "🙄",
	  "🙅🏻‍♀️",
	  "🙅🏻‍♂️",
	  "🙅🏻",
	  "🙅🏼‍♀️",
	  "🙅🏼‍♂️",
	  "🙅🏼",
	  "🙅🏽‍♀️",
	  "🙅🏽‍♂️",
	  "🙅🏽",
	  "🙅🏾‍♀️",
	  "🙅🏾‍♂️",
	  "🙅🏾",
	  "🙅🏿‍♀️",
	  "🙅🏿‍♂️",
	  "🙅🏿",
	  "🙅‍♀️",
	  "🙅‍♂️",
	  "🙅",
	  "🙆🏻‍♀️",
	  "🙆🏻‍♂️",
	  "🙆🏻",
	  "🙆🏼‍♀️",
	  "🙆🏼‍♂️",
	  "🙆🏼",
	  "🙆🏽‍♀️",
	  "🙆🏽‍♂️",
	  "🙆🏽",
	  "🙆🏾‍♀️",
	  "🙆🏾‍♂️",
	  "🙆🏾",
	  "🙆🏿‍♀️",
	  "🙆🏿‍♂️",
	  "🙆🏿",
	  "🙆‍♀️",
	  "🙆‍♂️",
	  "🙆",
	  "🙇🏻‍♀️",
	  "🙇🏻‍♂️",
	  "🙇🏻",
	  "🙇🏼‍♀️",
	  "🙇🏼‍♂️",
	  "🙇🏼",
	  "🙇🏽‍♀️",
	  "🙇🏽‍♂️",
	  "🙇🏽",
	  "🙇🏾‍♀️",
	  "🙇🏾‍♂️",
	  "🙇🏾",
	  "🙇🏿‍♀️",
	  "🙇🏿‍♂️",
	  "🙇🏿",
	  "🙇‍♀️",
	  "🙇‍♂️",
	  "🙇",
	  "🙈",
	  "🙉",
	  "🙊",
	  "🙋🏻‍♀️",
	  "🙋🏻‍♂️",
	  "🙋🏻",
	  "🙋🏼‍♀️",
	  "🙋🏼‍♂️",
	  "🙋🏼",
	  "🙋🏽‍♀️",
	  "🙋🏽‍♂️",
	  "🙋🏽",
	  "🙋🏾‍♀️",
	  "🙋🏾‍♂️",
	  "🙋🏾",
	  "🙋🏿‍♀️",
	  "🙋🏿‍♂️",
	  "🙋🏿",
	  "🙋‍♀️",
	  "🙋‍♂️",
	  "🙋",
	  "🙌🏻",
	  "🙌🏼",
	  "🙌🏽",
	  "🙌🏾",
	  "🙌🏿",
	  "🙌",
	  "🙍🏻‍♀️",
	  "🙍🏻‍♂️",
	  "🙍🏻",
	  "🙍🏼‍♀️",
	  "🙍🏼‍♂️",
	  "🙍🏼",
	  "🙍🏽‍♀️",
	  "🙍🏽‍♂️",
	  "🙍🏽",
	  "🙍🏾‍♀️",
	  "🙍🏾‍♂️",
	  "🙍🏾",
	  "🙍🏿‍♀️",
	  "🙍🏿‍♂️",
	  "🙍🏿",
	  "🙍‍♀️",
	  "🙍‍♂️",
	  "🙍",
	  "🙎🏻‍♀️",
	  "🙎🏻‍♂️",
	  "🙎🏻",
	  "🙎🏼‍♀️",
	  "🙎🏼‍♂️",
	  "🙎🏼",
	  "🙎🏽‍♀️",
	  "🙎🏽‍♂️",
	  "🙎🏽",
	  "🙎🏾‍♀️",
	  "🙎🏾‍♂️",
	  "🙎🏾",
	  "🙎🏿‍♀️",
	  "🙎🏿‍♂️",
	  "🙎🏿",
	  "🙎‍♀️",
	  "🙎‍♂️",
	  "🙎",
	  "🙏🏻",
	  "🙏🏼",
	  "🙏🏽",
	  "🙏🏾",
	  "🙏🏿",
	  "🙏",
	  "🚀",
	  "🚁",
	  "🚂",
	  "🚃",
	  "🚄",
	  "🚅",
	  "🚆",
	  "🚇",
	  "🚈",
	  "🚉",
	  "🚊",
	  "🚋",
	  "🚌",
	  "🚍",
	  "🚎",
	  "🚏",
	  "🚐",
	  "🚑",
	  "🚒",
	  "🚓",
	  "🚔",
	  "🚕",
	  "🚖",
	  "🚗",
	  "🚘",
	  "🚙",
	  "🚚",
	  "🚛",
	  "🚜",
	  "🚝",
	  "🚞",
	  "🚟",
	  "🚠",
	  "🚡",
	  "🚢",
	  "🚣🏻‍♀️",
	  "🚣🏻‍♂️",
	  "🚣🏻",
	  "🚣🏼‍♀️",
	  "🚣🏼‍♂️",
	  "🚣🏼",
	  "🚣🏽‍♀️",
	  "🚣🏽‍♂️",
	  "🚣🏽",
	  "🚣🏾‍♀️",
	  "🚣🏾‍♂️",
	  "🚣🏾",
	  "🚣🏿‍♀️",
	  "🚣🏿‍♂️",
	  "🚣🏿",
	  "🚣‍♀️",
	  "🚣‍♂️",
	  "🚣",
	  "🚤",
	  "🚥",
	  "🚦",
	  "🚧",
	  "🚨",
	  "🚩",
	  "🚪",
	  "🚫",
	  "🚬",
	  "🚭",
	  "🚮",
	  "🚯",
	  "🚰",
	  "🚱",
	  "🚲",
	  "🚳",
	  "🚴🏻‍♀️",
	  "🚴🏻‍♂️",
	  "🚴🏻",
	  "🚴🏼‍♀️",
	  "🚴🏼‍♂️",
	  "🚴🏼",
	  "🚴🏽‍♀️",
	  "🚴🏽‍♂️",
	  "🚴🏽",
	  "🚴🏾‍♀️",
	  "🚴🏾‍♂️",
	  "🚴🏾",
	  "🚴🏿‍♀️",
	  "🚴🏿‍♂️",
	  "🚴🏿",
	  "🚴‍♀️",
	  "🚴‍♂️",
	  "🚴",
	  "🚵🏻‍♀️",
	  "🚵🏻‍♂️",
	  "🚵🏻",
	  "🚵🏼‍♀️",
	  "🚵🏼‍♂️",
	  "🚵🏼",
	  "🚵🏽‍♀️",
	  "🚵🏽‍♂️",
	  "🚵🏽",
	  "🚵🏾‍♀️",
	  "🚵🏾‍♂️",
	  "🚵🏾",
	  "🚵🏿‍♀️",
	  "🚵🏿‍♂️",
	  "🚵🏿",
	  "🚵‍♀️",
	  "🚵‍♂️",
	  "🚵",
	  "🚶🏻‍♀️",
	  "🚶🏻‍♂️",
	  "🚶🏻",
	  "🚶🏼‍♀️",
	  "🚶🏼‍♂️",
	  "🚶🏼",
	  "🚶🏽‍♀️",
	  "🚶🏽‍♂️",
	  "🚶🏽",
	  "🚶🏾‍♀️",
	  "🚶🏾‍♂️",
	  "🚶🏾",
	  "🚶🏿‍♀️",
	  "🚶🏿‍♂️",
	  "🚶🏿",
	  "🚶‍♀️",
	  "🚶‍♂️",
	  "🚶",
	  "🚷",
	  "🚸",
	  "🚹",
	  "🚺",
	  "🚻",
	  "🚼",
	  "🚽",
	  "🚾",
	  "🚿",
	  "🛀🏻",
	  "🛀🏼",
	  "🛀🏽",
	  "🛀🏾",
	  "🛀🏿",
	  "🛀",
	  "🛁",
	  "🛂",
	  "🛃",
	  "🛄",
	  "🛅",
	  "🛋",
	  "🛌🏻",
	  "🛌🏼",
	  "🛌🏽",
	  "🛌🏾",
	  "🛌🏿",
	  "🛌",
	  "🛍",
	  "🛎",
	  "🛏",
	  "🛐",
	  "🛑",
	  "🛒",
	  "🛠",
	  "🛡",
	  "🛢",
	  "🛣",
	  "🛤",
	  "🛥",
	  "🛩",
	  "🛫",
	  "🛬",
	  "🛰",
	  "🛳",
	  "🛴",
	  "🛵",
	  "🛶",
	  "🤐",
	  "🤑",
	  "🤒",
	  "🤓",
	  "🤔",
	  "🤕",
	  "🤖",
	  "🤗",
	  "🤘🏻",
	  "🤘🏼",
	  "🤘🏽",
	  "🤘🏾",
	  "🤘🏿",
	  "🤘",
	  "🤙🏻",
	  "🤙🏼",
	  "🤙🏽",
	  "🤙🏾",
	  "🤙🏿",
	  "🤙",
	  "🤚🏻",
	  "🤚🏼",
	  "🤚🏽",
	  "🤚🏾",
	  "🤚🏿",
	  "🤚",
	  "🤛🏻",
	  "🤛🏼",
	  "🤛🏽",
	  "🤛🏾",
	  "🤛🏿",
	  "🤛",
	  "🤜🏻",
	  "🤜🏼",
	  "🤜🏽",
	  "🤜🏾",
	  "🤜🏿",
	  "🤜",
	  "🤝🏻",
	  "🤝🏼",
	  "🤝🏽",
	  "🤝🏾",
	  "🤝🏿",
	  "🤝",
	  "🤞🏻",
	  "🤞🏼",
	  "🤞🏽",
	  "🤞🏾",
	  "🤞🏿",
	  "🤞",
	  "🤠",
	  "🤡",
	  "🤢",
	  "🤣",
	  "🤤",
	  "🤥",
	  "🤦🏻‍♀️",
	  "🤦🏻‍♂️",
	  "🤦🏻",
	  "🤦🏼‍♀️",
	  "🤦🏼‍♂️",
	  "🤦🏼",
	  "🤦🏽‍♀️",
	  "🤦🏽‍♂️",
	  "🤦🏽",
	  "🤦🏾‍♀️",
	  "🤦🏾‍♂️",
	  "🤦🏾",
	  "🤦🏿‍♀️",
	  "🤦🏿‍♂️",
	  "🤦🏿",
	  "🤦‍♀️",
	  "🤦‍♂️",
	  "🤦",
	  "🤧",
	  "🤰🏻",
	  "🤰🏼",
	  "🤰🏽",
	  "🤰🏾",
	  "🤰🏿",
	  "🤰",
	  "🤳🏻",
	  "🤳🏼",
	  "🤳🏽",
	  "🤳🏾",
	  "🤳🏿",
	  "🤳",
	  "🤴🏻",
	  "🤴🏼",
	  "🤴🏽",
	  "🤴🏾",
	  "🤴🏿",
	  "🤴",
	  "🤵🏻",
	  "🤵🏼",
	  "🤵🏽",
	  "🤵🏾",
	  "🤵🏿",
	  "🤵",
	  "🤶🏻",
	  "🤶🏼",
	  "🤶🏽",
	  "🤶🏾",
	  "🤶🏿",
	  "🤶",
	  "🤷🏻‍♀️",
	  "🤷🏻‍♂️",
	  "🤷🏻",
	  "🤷🏼‍♀️",
	  "🤷🏼‍♂️",
	  "🤷🏼",
	  "🤷🏽‍♀️",
	  "🤷🏽‍♂️",
	  "🤷🏽",
	  "🤷🏾‍♀️",
	  "🤷🏾‍♂️",
	  "🤷🏾",
	  "🤷🏿‍♀️",
	  "🤷🏿‍♂️",
	  "🤷🏿",
	  "🤷‍♀️",
	  "🤷‍♂️",
	  "🤷",
	  "🤸🏻‍♀️",
	  "🤸🏻‍♂️",
	  "🤸🏻",
	  "🤸🏼‍♀️",
	  "🤸🏼‍♂️",
	  "🤸🏼",
	  "🤸🏽‍♀️",
	  "🤸🏽‍♂️",
	  "🤸🏽",
	  "🤸🏾‍♀️",
	  "🤸🏾‍♂️",
	  "🤸🏾",
	  "🤸🏿‍♀️",
	  "🤸🏿‍♂️",
	  "🤸🏿",
	  "🤸‍♀️",
	  "🤸‍♂️",
	  "🤸",
	  "🤹🏻‍♀️",
	  "🤹🏻‍♂️",
	  "🤹🏻",
	  "🤹🏼‍♀️",
	  "🤹🏼‍♂️",
	  "🤹🏼",
	  "🤹🏽‍♀️",
	  "🤹🏽‍♂️",
	  "🤹🏽",
	  "🤹🏾‍♀️",
	  "🤹🏾‍♂️",
	  "🤹🏾",
	  "🤹🏿‍♀️",
	  "🤹🏿‍♂️",
	  "🤹🏿",
	  "🤹‍♀️",
	  "🤹‍♂️",
	  "🤹",
	  "🤺",
	  "🤼🏻‍♀️",
	  "🤼🏻‍♂️",
	  "🤼🏻",
	  "🤼🏼‍♀️",
	  "🤼🏼‍♂️",
	  "🤼🏼",
	  "🤼🏽‍♀️",
	  "🤼🏽‍♂️",
	  "🤼🏽",
	  "🤼🏾‍♀️",
	  "🤼🏾‍♂️",
	  "🤼🏾",
	  "🤼🏿‍♀️",
	  "🤼🏿‍♂️",
	  "🤼🏿",
	  "🤼‍♀️",
	  "🤼‍♂️",
	  "🤼",
	  "🤽🏻‍♀️",
	  "🤽🏻‍♂️",
	  "🤽🏻",
	  "🤽🏼‍♀️",
	  "🤽🏼‍♂️",
	  "🤽🏼",
	  "🤽🏽‍♀️",
	  "🤽🏽‍♂️",
	  "🤽🏽",
	  "🤽🏾‍♀️",
	  "🤽🏾‍♂️",
	  "🤽🏾",
	  "🤽🏿‍♀️",
	  "🤽🏿‍♂️",
	  "🤽🏿",
	  "🤽‍♀️",
	  "🤽‍♂️",
	  "🤽",
	  "🤾🏻‍♀️",
	  "🤾🏻‍♂️",
	  "🤾🏻",
	  "🤾🏼‍♀️",
	  "🤾🏼‍♂️",
	  "🤾🏼",
	  "🤾🏽‍♀️",
	  "🤾🏽‍♂️",
	  "🤾🏽",
	  "🤾🏾‍♀️",
	  "🤾🏾‍♂️",
	  "🤾🏾",
	  "🤾🏿‍♀️",
	  "🤾🏿‍♂️",
	  "🤾🏿",
	  "🤾‍♀️",
	  "🤾‍♂️",
	  "🤾",
	  "🥀",
	  "🥁",
	  "🥂",
	  "🥃",
	  "🥄",
	  "🥅",
	  "🥇",
	  "🥈",
	  "🥉",
	  "🥊",
	  "🥋",
	  "🥐",
	  "🥑",
	  "🥒",
	  "🥓",
	  "🥔",
	  "🥕",
	  "🥖",
	  "🥗",
	  "🥘",
	  "🥙",
	  "🥚",
	  "🥛",
	  "🥜",
	  "🥝",
	  "🥞",
	  "🦀",
	  "🦁",
	  "🦂",
	  "🦃",
	  "🦄",
	  "🦅",
	  "🦆",
	  "🦇",
	  "🦈",
	  "🦉",
	  "🦊",
	  "🦋",
	  "🦌",
	  "🦍",
	  "🦎",
	  "🦏",
	  "🦐",
	  "🦑",
	  "🧀",
	  "‼",
	  "⁉",
	  "™",
	  "ℹ",
	  "↔",
	  "↕",
	  "↖",
	  "↗",
	  "↘",
	  "↙",
	  "↩",
	  "↪",
	  "#⃣",
	  "⌚",
	  "⌛",
	  "⌨",
	  "⏏",
	  "⏩",
	  "⏪",
	  "⏫",
	  "⏬",
	  "⏭",
	  "⏮",
	  "⏯",
	  "⏰",
	  "⏱",
	  "⏲",
	  "⏳",
	  "⏸",
	  "⏹",
	  "⏺",
	  "Ⓜ",
	  "▪",
	  "▫",
	  "▶",
	  "◀",
	  "◻",
	  "◼",
	  "◽",
	  "◾",
	  "☀",
	  "☁",
	  "☂",
	  "☃",
	  "☄",
	  "☎",
	  "☑",
	  "☔",
	  "☕",
	  "☘",
	  "☝🏻",
	  "☝🏼",
	  "☝🏽",
	  "☝🏾",
	  "☝🏿",
	  "☝",
	  "☠",
	  "☢",
	  "☣",
	  "☦",
	  "☪",
	  "☮",
	  "☯",
	  "☸",
	  "☹",
	  "☺",
	  "♀",
	  "♂",
	  "♈",
	  "♉",
	  "♊",
	  "♋",
	  "♌",
	  "♍",
	  "♎",
	  "♏",
	  "♐",
	  "♑",
	  "♒",
	  "♓",
	  "♠",
	  "♣",
	  "♥",
	  "♦",
	  "♨",
	  "♻",
	  "♿",
	  "⚒",
	  "⚓",
	  "⚔",
	  "⚕",
	  "⚖",
	  "⚗",
	  "⚙",
	  "⚛",
	  "⚜",
	  "⚠",
	  "⚡",
	  "⚪",
	  "⚫",
	  "⚰",
	  "⚱",
	  "⚽",
	  "⚾",
	  "⛄",
	  "⛅",
	  "⛈",
	  "⛎",
	  "⛏",
	  "⛑",
	  "⛓",
	  "⛔",
	  "⛩",
	  "⛪",
	  "⛰",
	  "⛱",
	  "⛲",
	  "⛳",
	  "⛴",
	  "⛵",
	  "⛷🏻",
	  "⛷🏼",
	  "⛷🏽",
	  "⛷🏾",
	  "⛷🏿",
	  "⛷",
	  "⛸",
	  "⛹🏻‍♀️",
	  "⛹🏻‍♂️",
	  "⛹🏻",
	  "⛹🏼‍♀️",
	  "⛹🏼‍♂️",
	  "⛹🏼",
	  "⛹🏽‍♀️",
	  "⛹🏽‍♂️",
	  "⛹🏽",
	  "⛹🏾‍♀️",
	  "⛹🏾‍♂️",
	  "⛹🏾",
	  "⛹🏿‍♀️",
	  "⛹🏿‍♂️",
	  "⛹🏿",
	  "⛹️‍♀️",
	  "⛹️‍♂️",
	  "⛹",
	  "⛺",
	  "⛽",
	  "✂",
	  "✅",
	  "✈",
	  "✉",
	  "✊🏻",
	  "✊🏼",
	  "✊🏽",
	  "✊🏾",
	  "✊🏿",
	  "✊",
	  "✋🏻",
	  "✋🏼",
	  "✋🏽",
	  "✋🏾",
	  "✋🏿",
	  "✋",
	  "✌🏻",
	  "✌🏼",
	  "✌🏽",
	  "✌🏾",
	  "✌🏿",
	  "✌",
	  "✍🏻",
	  "✍🏼",
	  "✍🏽",
	  "✍🏾",
	  "✍🏿",
	  "✍",
	  "✏",
	  "✒",
	  "✔",
	  "✖",
	  "✝",
	  "✡",
	  "✨",
	  "✳",
	  "✴",
	  "❄",
	  "❇",
	  "❌",
	  "❎",
	  "❓",
	  "❔",
	  "❕",
	  "❗",
	  "❣",
	  "❤",
	  "➕",
	  "➖",
	  "➗",
	  "➡",
	  "➰",
	  "➿",
	  "⤴",
	  "⤵",
	  "*⃣",
	  "⬅",
	  "⬆",
	  "⬇",
	  "⬛",
	  "⬜",
	  "⭐",
	  "⭕",
	  "0⃣",
	  "〰",
	  "〽",
	  "1⃣",
	  "2⃣",
	  "㊗",
	  "㊙",
	  "3⃣",
	  "4⃣",
	  "5⃣",
	  "6⃣",
	  "7⃣",
	  "8⃣",
	  "9⃣",
	  "©",
	  "®",
	  ""
	]

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */
	;(function (global) {
	    'use strict';
	
	/*
	  big.js v3.1.3
	  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.
	  https://github.com/MikeMcl/big.js/
	  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>
	  MIT Expat Licence
	*/
	
	/***************************** EDITABLE DEFAULTS ******************************/
	
	    // The default values below must be integers within the stated ranges.
	
	    /*
	     * The maximum number of decimal places of the results of operations
	     * involving division: div and sqrt, and pow with negative exponents.
	     */
	    var DP = 20,                           // 0 to MAX_DP
	
	        /*
	         * The rounding mode used when rounding to the above decimal places.
	         *
	         * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)
	         * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)
	         * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)
	         * 3 Away from zero.                                  (ROUND_UP)
	         */
	        RM = 1,                            // 0, 1, 2 or 3
	
	        // The maximum value of DP and Big.DP.
	        MAX_DP = 1E6,                      // 0 to 1000000
	
	        // The maximum magnitude of the exponent argument to the pow method.
	        MAX_POWER = 1E6,                   // 1 to 1000000
	
	        /*
	         * The exponent value at and beneath which toString returns exponential
	         * notation.
	         * JavaScript's Number type: -7
	         * -1000000 is the minimum recommended exponent value of a Big.
	         */
	        E_NEG = -7,                   // 0 to -1000000
	
	        /*
	         * The exponent value at and above which toString returns exponential
	         * notation.
	         * JavaScript's Number type: 21
	         * 1000000 is the maximum recommended exponent value of a Big.
	         * (This limit is not enforced or checked.)
	         */
	        E_POS = 21,                   // 0 to 1000000
	
	/******************************************************************************/
	
	        // The shared prototype object.
	        P = {},
	        isValid = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	        Big;
	
	
	    /*
	     * Create and return a Big constructor.
	     *
	     */
	    function bigFactory() {
	
	        /*
	         * The Big constructor and exported function.
	         * Create and return a new instance of a Big number object.
	         *
	         * n {number|string|Big} A numeric value.
	         */
	        function Big(n) {
	            var x = this;
	
	            // Enable constructor usage without new.
	            if (!(x instanceof Big)) {
	                return n === void 0 ? bigFactory() : new Big(n);
	            }
	
	            // Duplicate.
	            if (n instanceof Big) {
	                x.s = n.s;
	                x.e = n.e;
	                x.c = n.c.slice();
	            } else {
	                parse(x, n);
	            }
	
	            /*
	             * Retain a reference to this Big constructor, and shadow
	             * Big.prototype.constructor which points to Object.
	             */
	            x.constructor = Big;
	        }
	
	        Big.prototype = P;
	        Big.DP = DP;
	        Big.RM = RM;
	        Big.E_NEG = E_NEG;
	        Big.E_POS = E_POS;
	
	        return Big;
	    }
	
	
	    // Private functions
	
	
	    /*
	     * Return a string representing the value of Big x in normal or exponential
	     * notation to dp fixed decimal places or significant digits.
	     *
	     * x {Big} The Big to format.
	     * dp {number} Integer, 0 to MAX_DP inclusive.
	     * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).
	     */
	    function format(x, dp, toE) {
	        var Big = x.constructor,
	
	            // The index (normal notation) of the digit that may be rounded up.
	            i = dp - (x = new Big(x)).e,
	            c = x.c;
	
	        // Round?
	        if (c.length > ++dp) {
	            rnd(x, i, Big.RM);
	        }
	
	        if (!c[0]) {
	            ++i;
	        } else if (toE) {
	            i = dp;
	
	        // toFixed
	        } else {
	            c = x.c;
	
	            // Recalculate i as x.e may have changed if value rounded up.
	            i = x.e + i + 1;
	        }
	
	        // Append zeros?
	        for (; c.length < i; c.push(0)) {
	        }
	        i = x.e;
	
	        /*
	         * toPrecision returns exponential notation if the number of
	         * significant digits specified is less than the number of digits
	         * necessary to represent the integer part of the value in normal
	         * notation.
	         */
	        return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ?
	
	          // Exponential notation.
	          (x.s < 0 && c[0] ? '-' : '') +
	            (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) +
	              (i < 0 ? 'e' : 'e+') + i
	
	          // Normal notation.
	          : x.toString();
	    }
	
	
	    /*
	     * Parse the number or string value passed to a Big constructor.
	     *
	     * x {Big} A Big number instance.
	     * n {number|string} A numeric value.
	     */
	    function parse(x, n) {
	        var e, i, nL;
	
	        // Minus zero?
	        if (n === 0 && 1 / n < 0) {
	            n = '-0';
	
	        // Ensure n is string and check validity.
	        } else if (!isValid.test(n += '')) {
	            throwErr(NaN);
	        }
	
	        // Determine sign.
	        x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;
	
	        // Decimal point?
	        if ((e = n.indexOf('.')) > -1) {
	            n = n.replace('.', '');
	        }
	
	        // Exponential form?
	        if ((i = n.search(/e/i)) > 0) {
	
	            // Determine exponent.
	            if (e < 0) {
	                e = i;
	            }
	            e += +n.slice(i + 1);
	            n = n.substring(0, i);
	
	        } else if (e < 0) {
	
	            // Integer.
	            e = n.length;
	        }
	
	        // Determine leading zeros.
	        for (i = 0; n.charAt(i) == '0'; i++) {
	        }
	
	        if (i == (nL = n.length)) {
	
	            // Zero.
	            x.c = [ x.e = 0 ];
	        } else {
	
	            // Determine trailing zeros.
	            for (; n.charAt(--nL) == '0';) {
	            }
	
	            x.e = e - i - 1;
	            x.c = [];
	
	            // Convert string to array of digits without leading/trailing zeros.
	            for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {
	            }
	        }
	
	        return x;
	    }
	
	
	    /*
	     * Round Big x to a maximum of dp decimal places using rounding mode rm.
	     * Called by div, sqrt and round.
	     *
	     * x {Big} The Big to round.
	     * dp {number} Integer, 0 to MAX_DP inclusive.
	     * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)
	     * [more] {boolean} Whether the result of division was truncated.
	     */
	    function rnd(x, dp, rm, more) {
	        var u,
	            xc = x.c,
	            i = x.e + dp + 1;
	
	        if (rm === 1) {
	
	            // xc[i] is the digit after the digit that may be rounded up.
	            more = xc[i] >= 5;
	        } else if (rm === 2) {
	            more = xc[i] > 5 || xc[i] == 5 &&
	              (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);
	        } else if (rm === 3) {
	            more = more || xc[i] !== u || i < 0;
	        } else {
	            more = false;
	
	            if (rm !== 0) {
	                throwErr('!Big.RM!');
	            }
	        }
	
	        if (i < 1 || !xc[0]) {
	
	            if (more) {
	
	                // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	                x.e = -dp;
	                x.c = [1];
	            } else {
	
	                // Zero.
	                x.c = [x.e = 0];
	            }
	        } else {
	
	            // Remove any digits after the required decimal places.
	            xc.length = i--;
	
	            // Round up?
	            if (more) {
	
	                // Rounding up may mean the previous digit has to be rounded up.
	                for (; ++xc[i] > 9;) {
	                    xc[i] = 0;
	
	                    if (!i--) {
	                        ++x.e;
	                        xc.unshift(1);
	                    }
	                }
	            }
	
	            // Remove trailing zeros.
	            for (i = xc.length; !xc[--i]; xc.pop()) {
	            }
	        }
	
	        return x;
	    }
	
	
	    /*
	     * Throw a BigError.
	     *
	     * message {string} The error message.
	     */
	    function throwErr(message) {
	        var err = new Error(message);
	        err.name = 'BigError';
	
	        throw err;
	    }
	
	
	    // Prototype/instance methods
	
	
	    /*
	     * Return a new Big whose value is the absolute value of this Big.
	     */
	    P.abs = function () {
	        var x = new this.constructor(this);
	        x.s = 1;
	
	        return x;
	    };
	
	
	    /*
	     * Return
	     * 1 if the value of this Big is greater than the value of Big y,
	     * -1 if the value of this Big is less than the value of Big y, or
	     * 0 if they have the same value.
	    */
	    P.cmp = function (y) {
	        var xNeg,
	            x = this,
	            xc = x.c,
	            yc = (y = new x.constructor(y)).c,
	            i = x.s,
	            j = y.s,
	            k = x.e,
	            l = y.e;
	
	        // Either zero?
	        if (!xc[0] || !yc[0]) {
	            return !xc[0] ? !yc[0] ? 0 : -j : i;
	        }
	
	        // Signs differ?
	        if (i != j) {
	            return i;
	        }
	        xNeg = i < 0;
	
	        // Compare exponents.
	        if (k != l) {
	            return k > l ^ xNeg ? 1 : -1;
	        }
	
	        i = -1;
	        j = (k = xc.length) < (l = yc.length) ? k : l;
	
	        // Compare digit by digit.
	        for (; ++i < j;) {
	
	            if (xc[i] != yc[i]) {
	                return xc[i] > yc[i] ^ xNeg ? 1 : -1;
	            }
	        }
	
	        // Compare lengths.
	        return k == l ? 0 : k > l ^ xNeg ? 1 : -1;
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big divided by the
	     * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal
	     * places using rounding mode Big.RM.
	     */
	    P.div = function (y) {
	        var x = this,
	            Big = x.constructor,
	            // dividend
	            dvd = x.c,
	            //divisor
	            dvs = (y = new Big(y)).c,
	            s = x.s == y.s ? 1 : -1,
	            dp = Big.DP;
	
	        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
	            throwErr('!Big.DP!');
	        }
	
	        // Either 0?
	        if (!dvd[0] || !dvs[0]) {
	
	            // If both are 0, throw NaN
	            if (dvd[0] == dvs[0]) {
	                throwErr(NaN);
	            }
	
	            // If dvs is 0, throw +-Infinity.
	            if (!dvs[0]) {
	                throwErr(s / 0);
	            }
	
	            // dvd is 0, return +-0.
	            return new Big(s * 0);
	        }
	
	        var dvsL, dvsT, next, cmp, remI, u,
	            dvsZ = dvs.slice(),
	            dvdI = dvsL = dvs.length,
	            dvdL = dvd.length,
	            // remainder
	            rem = dvd.slice(0, dvsL),
	            remL = rem.length,
	            // quotient
	            q = y,
	            qc = q.c = [],
	            qi = 0,
	            digits = dp + (q.e = x.e - y.e) + 1;
	
	        q.s = s;
	        s = digits < 0 ? 0 : digits;
	
	        // Create version of divisor with leading zero.
	        dvsZ.unshift(0);
	
	        // Add zeros to make remainder as long as divisor.
	        for (; remL++ < dvsL; rem.push(0)) {
	        }
	
	        do {
	
	            // 'next' is how many times the divisor goes into current remainder.
	            for (next = 0; next < 10; next++) {
	
	                // Compare divisor and remainder.
	                if (dvsL != (remL = rem.length)) {
	                    cmp = dvsL > remL ? 1 : -1;
	                } else {
	
	                    for (remI = -1, cmp = 0; ++remI < dvsL;) {
	
	                        if (dvs[remI] != rem[remI]) {
	                            cmp = dvs[remI] > rem[remI] ? 1 : -1;
	                            break;
	                        }
	                    }
	                }
	
	                // If divisor < remainder, subtract divisor from remainder.
	                if (cmp < 0) {
	
	                    // Remainder can't be more than 1 digit longer than divisor.
	                    // Equalise lengths using divisor with extra leading zero?
	                    for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {
	
	                        if (rem[--remL] < dvsT[remL]) {
	                            remI = remL;
	
	                            for (; remI && !rem[--remI]; rem[remI] = 9) {
	                            }
	                            --rem[remI];
	                            rem[remL] += 10;
	                        }
	                        rem[remL] -= dvsT[remL];
	                    }
	                    for (; !rem[0]; rem.shift()) {
	                    }
	                } else {
	                    break;
	                }
	            }
	
	            // Add the 'next' digit to the result array.
	            qc[qi++] = cmp ? next : ++next;
	
	            // Update the remainder.
	            if (rem[0] && cmp) {
	                rem[remL] = dvd[dvdI] || 0;
	            } else {
	                rem = [ dvd[dvdI] ];
	            }
	
	        } while ((dvdI++ < dvdL || rem[0] !== u) && s--);
	
	        // Leading zero? Do not remove if result is simply zero (qi == 1).
	        if (!qc[0] && qi != 1) {
	
	            // There can't be more than one zero.
	            qc.shift();
	            q.e--;
	        }
	
	        // Round?
	        if (qi > digits) {
	            rnd(q, dp, Big.RM, rem[0] !== u);
	        }
	
	        return q;
	    };
	
	
	    /*
	     * Return true if the value of this Big is equal to the value of Big y,
	     * otherwise returns false.
	     */
	    P.eq = function (y) {
	        return !this.cmp(y);
	    };
	
	
	    /*
	     * Return true if the value of this Big is greater than the value of Big y,
	     * otherwise returns false.
	     */
	    P.gt = function (y) {
	        return this.cmp(y) > 0;
	    };
	
	
	    /*
	     * Return true if the value of this Big is greater than or equal to the
	     * value of Big y, otherwise returns false.
	     */
	    P.gte = function (y) {
	        return this.cmp(y) > -1;
	    };
	
	
	    /*
	     * Return true if the value of this Big is less than the value of Big y,
	     * otherwise returns false.
	     */
	    P.lt = function (y) {
	        return this.cmp(y) < 0;
	    };
	
	
	    /*
	     * Return true if the value of this Big is less than or equal to the value
	     * of Big y, otherwise returns false.
	     */
	    P.lte = function (y) {
	         return this.cmp(y) < 1;
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big minus the value
	     * of Big y.
	     */
	    P.sub = P.minus = function (y) {
	        var i, j, t, xLTy,
	            x = this,
	            Big = x.constructor,
	            a = x.s,
	            b = (y = new Big(y)).s;
	
	        // Signs differ?
	        if (a != b) {
	            y.s = -b;
	            return x.plus(y);
	        }
	
	        var xc = x.c.slice(),
	            xe = x.e,
	            yc = y.c,
	            ye = y.e;
	
	        // Either zero?
	        if (!xc[0] || !yc[0]) {
	
	            // y is non-zero? x is non-zero? Or both are zero.
	            return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);
	        }
	
	        // Determine which is the bigger number.
	        // Prepend zeros to equalise exponents.
	        if (a = xe - ye) {
	
	            if (xLTy = a < 0) {
	                a = -a;
	                t = xc;
	            } else {
	                ye = xe;
	                t = yc;
	            }
	
	            t.reverse();
	            for (b = a; b--; t.push(0)) {
	            }
	            t.reverse();
	        } else {
	
	            // Exponents equal. Check digit by digit.
	            j = ((xLTy = xc.length < yc.length) ? xc : yc).length;
	
	            for (a = b = 0; b < j; b++) {
	
	                if (xc[b] != yc[b]) {
	                    xLTy = xc[b] < yc[b];
	                    break;
	                }
	            }
	        }
	
	        // x < y? Point xc to the array of the bigger number.
	        if (xLTy) {
	            t = xc;
	            xc = yc;
	            yc = t;
	            y.s = -y.s;
	        }
	
	        /*
	         * Append zeros to xc if shorter. No need to add zeros to yc if shorter
	         * as subtraction only needs to start at yc.length.
	         */
	        if (( b = (j = yc.length) - (i = xc.length) ) > 0) {
	
	            for (; b--; xc[i++] = 0) {
	            }
	        }
	
	        // Subtract yc from xc.
	        for (b = i; j > a;){
	
	            if (xc[--j] < yc[j]) {
	
	                for (i = j; i && !xc[--i]; xc[i] = 9) {
	                }
	                --xc[i];
	                xc[j] += 10;
	            }
	            xc[j] -= yc[j];
	        }
	
	        // Remove trailing zeros.
	        for (; xc[--b] === 0; xc.pop()) {
	        }
	
	        // Remove leading zeros and adjust exponent accordingly.
	        for (; xc[0] === 0;) {
	            xc.shift();
	            --ye;
	        }
	
	        if (!xc[0]) {
	
	            // n - n = +0
	            y.s = 1;
	
	            // Result must be zero.
	            xc = [ye = 0];
	        }
	
	        y.c = xc;
	        y.e = ye;
	
	        return y;
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big modulo the
	     * value of Big y.
	     */
	    P.mod = function (y) {
	        var yGTx,
	            x = this,
	            Big = x.constructor,
	            a = x.s,
	            b = (y = new Big(y)).s;
	
	        if (!y.c[0]) {
	            throwErr(NaN);
	        }
	
	        x.s = y.s = 1;
	        yGTx = y.cmp(x) == 1;
	        x.s = a;
	        y.s = b;
	
	        if (yGTx) {
	            return new Big(x);
	        }
	
	        a = Big.DP;
	        b = Big.RM;
	        Big.DP = Big.RM = 0;
	        x = x.div(y);
	        Big.DP = a;
	        Big.RM = b;
	
	        return this.minus( x.times(y) );
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big plus the value
	     * of Big y.
	     */
	    P.add = P.plus = function (y) {
	        var t,
	            x = this,
	            Big = x.constructor,
	            a = x.s,
	            b = (y = new Big(y)).s;
	
	        // Signs differ?
	        if (a != b) {
	            y.s = -b;
	            return x.minus(y);
	        }
	
	        var xe = x.e,
	            xc = x.c,
	            ye = y.e,
	            yc = y.c;
	
	        // Either zero?
	        if (!xc[0] || !yc[0]) {
	
	            // y is non-zero? x is non-zero? Or both are zero.
	            return yc[0] ? y : new Big(xc[0] ? x : a * 0);
	        }
	        xc = xc.slice();
	
	        // Prepend zeros to equalise exponents.
	        // Note: Faster to use reverse then do unshifts.
	        if (a = xe - ye) {
	
	            if (a > 0) {
	                ye = xe;
	                t = yc;
	            } else {
	                a = -a;
	                t = xc;
	            }
	
	            t.reverse();
	            for (; a--; t.push(0)) {
	            }
	            t.reverse();
	        }
	
	        // Point xc to the longer array.
	        if (xc.length - yc.length < 0) {
	            t = yc;
	            yc = xc;
	            xc = t;
	        }
	        a = yc.length;
	
	        /*
	         * Only start adding at yc.length - 1 as the further digits of xc can be
	         * left as they are.
	         */
	        for (b = 0; a;) {
	            b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;
	            xc[a] %= 10;
	        }
	
	        // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	
	        if (b) {
	            xc.unshift(b);
	            ++ye;
	        }
	
	         // Remove trailing zeros.
	        for (a = xc.length; xc[--a] === 0; xc.pop()) {
	        }
	
	        y.c = xc;
	        y.e = ye;
	
	        return y;
	    };
	
	
	    /*
	     * Return a Big whose value is the value of this Big raised to the power n.
	     * If n is negative, round, if necessary, to a maximum of Big.DP decimal
	     * places using rounding mode Big.RM.
	     *
	     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.
	     */
	    P.pow = function (n) {
	        var x = this,
	            one = new x.constructor(1),
	            y = one,
	            isNeg = n < 0;
	
	        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
	            throwErr('!pow!');
	        }
	
	        n = isNeg ? -n : n;
	
	        for (;;) {
	
	            if (n & 1) {
	                y = y.times(x);
	            }
	            n >>= 1;
	
	            if (!n) {
	                break;
	            }
	            x = x.times(x);
	        }
	
	        return isNeg ? one.div(y) : y;
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big rounded to a
	     * maximum of dp decimal places using rounding mode rm.
	     * If dp is not specified, round to 0 decimal places.
	     * If rm is not specified, use Big.RM.
	     *
	     * [dp] {number} Integer, 0 to MAX_DP inclusive.
	     * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)
	     */
	    P.round = function (dp, rm) {
	        var x = this,
	            Big = x.constructor;
	
	        if (dp == null) {
	            dp = 0;
	        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
	            throwErr('!round!');
	        }
	        rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);
	
	        return x;
	    };
	
	
	    /*
	     * Return a new Big whose value is the square root of the value of this Big,
	     * rounded, if necessary, to a maximum of Big.DP decimal places using
	     * rounding mode Big.RM.
	     */
	    P.sqrt = function () {
	        var estimate, r, approx,
	            x = this,
	            Big = x.constructor,
	            xc = x.c,
	            i = x.s,
	            e = x.e,
	            half = new Big('0.5');
	
	        // Zero?
	        if (!xc[0]) {
	            return new Big(x);
	        }
	
	        // If negative, throw NaN.
	        if (i < 0) {
	            throwErr(NaN);
	        }
	
	        // Estimate.
	        i = Math.sqrt(x.toString());
	
	        // Math.sqrt underflow/overflow?
	        // Pass x to Math.sqrt as integer, then adjust the result exponent.
	        if (i === 0 || i === 1 / 0) {
	            estimate = xc.join('');
	
	            if (!(estimate.length + e & 1)) {
	                estimate += '0';
	            }
	
	            r = new Big( Math.sqrt(estimate).toString() );
	            r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
	        } else {
	            r = new Big(i.toString());
	        }
	
	        i = r.e + (Big.DP += 4);
	
	        // Newton-Raphson iteration.
	        do {
	            approx = r;
	            r = half.times( approx.plus( x.div(approx) ) );
	        } while ( approx.c.slice(0, i).join('') !==
	                       r.c.slice(0, i).join('') );
	
	        rnd(r, Big.DP -= 4, Big.RM);
	
	        return r;
	    };
	
	
	    /*
	     * Return a new Big whose value is the value of this Big times the value of
	     * Big y.
	     */
	    P.mul = P.times = function (y) {
	        var c,
	            x = this,
	            Big = x.constructor,
	            xc = x.c,
	            yc = (y = new Big(y)).c,
	            a = xc.length,
	            b = yc.length,
	            i = x.e,
	            j = y.e;
	
	        // Determine sign of result.
	        y.s = x.s == y.s ? 1 : -1;
	
	        // Return signed 0 if either 0.
	        if (!xc[0] || !yc[0]) {
	            return new Big(y.s * 0);
	        }
	
	        // Initialise exponent of result as x.e + y.e.
	        y.e = i + j;
	
	        // If array xc has fewer digits than yc, swap xc and yc, and lengths.
	        if (a < b) {
	            c = xc;
	            xc = yc;
	            yc = c;
	            j = a;
	            a = b;
	            b = j;
	        }
	
	        // Initialise coefficient array of result with zeros.
	        for (c = new Array(j = a + b); j--; c[j] = 0) {
	        }
	
	        // Multiply.
	
	        // i is initially xc.length.
	        for (i = b; i--;) {
	            b = 0;
	
	            // a is yc.length.
	            for (j = a + i; j > i;) {
	
	                // Current sum of products at this digit position, plus carry.
	                b = c[j] + yc[i] * xc[j - i - 1] + b;
	                c[j--] = b % 10;
	
	                // carry
	                b = b / 10 | 0;
	            }
	            c[j] = (c[j] + b) % 10;
	        }
	
	        // Increment result exponent if there is a final carry.
	        if (b) {
	            ++y.e;
	        }
	
	        // Remove any leading zero.
	        if (!c[0]) {
	            c.shift();
	        }
	
	        // Remove trailing zeros.
	        for (i = c.length; !c[--i]; c.pop()) {
	        }
	        y.c = c;
	
	        return y;
	    };
	
	
	    /*
	     * Return a string representing the value of this Big.
	     * Return exponential notation if this Big has a positive exponent equal to
	     * or greater than Big.E_POS, or a negative exponent equal to or less than
	     * Big.E_NEG.
	     */
	    P.toString = P.valueOf = P.toJSON = function () {
	        var x = this,
	            Big = x.constructor,
	            e = x.e,
	            str = x.c.join(''),
	            strL = str.length;
	
	        // Exponential notation?
	        if (e <= Big.E_NEG || e >= Big.E_POS) {
	            str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') +
	              (e < 0 ? 'e' : 'e+') + e;
	
	        // Negative exponent?
	        } else if (e < 0) {
	
	            // Prepend zeros.
	            for (; ++e; str = '0' + str) {
	            }
	            str = '0.' + str;
	
	        // Positive exponent?
	        } else if (e > 0) {
	
	            if (++e > strL) {
	
	                // Append zeros.
	                for (e -= strL; e-- ; str += '0') {
	                }
	            } else if (e < strL) {
	                str = str.slice(0, e) + '.' + str.slice(e);
	            }
	
	        // Exponent zero.
	        } else if (strL > 1) {
	            str = str.charAt(0) + '.' + str.slice(1);
	        }
	
	        // Avoid '-0'
	        return x.s < 0 && x.c[0] ? '-' + str : str;
	    };
	
	
	    /*
	     ***************************************************************************
	     * If toExponential, toFixed, toPrecision and format are not required they
	     * can safely be commented-out or deleted. No redundant code will be left.
	     * format is used only by toExponential, toFixed and toPrecision.
	     ***************************************************************************
	     */
	
	
	    /*
	     * Return a string representing the value of this Big in exponential
	     * notation to dp fixed decimal places and rounded, if necessary, using
	     * Big.RM.
	     *
	     * [dp] {number} Integer, 0 to MAX_DP inclusive.
	     */
	    P.toExponential = function (dp) {
	
	        if (dp == null) {
	            dp = this.c.length - 1;
	        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
	            throwErr('!toExp!');
	        }
	
	        return format(this, dp, 1);
	    };
	
	
	    /*
	     * Return a string representing the value of this Big in normal notation
	     * to dp fixed decimal places and rounded, if necessary, using Big.RM.
	     *
	     * [dp] {number} Integer, 0 to MAX_DP inclusive.
	     */
	    P.toFixed = function (dp) {
	        var str,
	            x = this,
	            Big = x.constructor,
	            neg = Big.E_NEG,
	            pos = Big.E_POS;
	
	        // Prevent the possibility of exponential notation.
	        Big.E_NEG = -(Big.E_POS = 1 / 0);
	
	        if (dp == null) {
	            str = x.toString();
	        } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {
	            str = format(x, x.e + dp);
	
	            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
	            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	            if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {
	        //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
	                str = '-' + str;
	            }
	        }
	        Big.E_NEG = neg;
	        Big.E_POS = pos;
	
	        if (!str) {
	            throwErr('!toFix!');
	        }
	
	        return str;
	    };
	
	
	    /*
	     * Return a string representing the value of this Big rounded to sd
	     * significant digits using Big.RM. Use exponential notation if sd is less
	     * than the number of digits necessary to represent the integer part of the
	     * value in normal notation.
	     *
	     * sd {number} Integer, 1 to MAX_DP inclusive.
	     */
	    P.toPrecision = function (sd) {
	
	        if (sd == null) {
	            return this.toString();
	        } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
	            throwErr('!toPre!');
	        }
	
	        return format(this, sd - 1, 2);
	    };
	
	
	    // Export
	
	
	    Big = bigFactory();
	
	    //AMD.
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return Big;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	    // Node and other CommonJS-like environments that support module.exports.
	    } else if (typeof module !== 'undefined' && module.exports) {
	        module.exports = Big;
	
	    //Browser.
	    } else {
	        global.Big = Big;
	    }
	})(this);


/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var loaderUtils = __webpack_require__(365);
	var NodeTemplatePlugin = __webpack_require__(203);
	var NodeTargetPlugin = __webpack_require__(303);
	var LibraryTemplatePlugin = __webpack_require__(308);
	var SingleEntryPlugin = __webpack_require__(98);
	var LimitChunkCountPlugin = __webpack_require__(321);
	module.exports = function(source) {
		if(this.cacheable) this.cacheable();
		return source;
	};
	module.exports.pitch = function(request) {
		if(this.cacheable) this.cacheable();
		var query = loaderUtils.parseQuery(this.query);
		this.addDependency(this.resourcePath);
		// We already in child compiler, return empty bundle
		if(this[__dirname] === undefined) {
			throw new Error(
				'"extract-text-webpack-plugin" loader is used without the corresponding plugin, ' +
				'refer to https://github.com/webpack/extract-text-webpack-plugin for the usage example'
			);
		} else if(this[__dirname] === false) {
			return "";
		} else if(this[__dirname](null, query)) {
			if(query.omit) {
				this.loaderIndex += +query.omit + 1;
				request = request.split("!").slice(+query.omit).join("!");
			}
			var resultSource;
			if(query.remove) {
				resultSource = "// removed by extract-text-webpack-plugin";
			} else {
				resultSource = undefined;
			}
	
			if(query.extract !== false) {
				var childFilename = "extract-text-webpack-plugin-output-filename"; // eslint-disable-line no-path-concat
				var publicPath = typeof query.publicPath === "string" ? query.publicPath : this._compilation.outputOptions.publicPath;
				var outputOptions = {
					filename: childFilename,
					publicPath: publicPath
				};
				var childCompiler = this._compilation.createChildCompiler("extract-text-webpack-plugin", outputOptions);
				childCompiler.apply(new NodeTemplatePlugin(outputOptions));
				childCompiler.apply(new LibraryTemplatePlugin(null, "commonjs2"));
				childCompiler.apply(new NodeTargetPlugin());
				childCompiler.apply(new SingleEntryPlugin(this.context, "!!" + request));
				childCompiler.apply(new LimitChunkCountPlugin({ maxChunks: 1 }));
				var subCache = "subcache " + __dirname + " " + request; // eslint-disable-line no-path-concat
				childCompiler.plugin("compilation", function(compilation) {
					if(compilation.cache) {
						if(!compilation.cache[subCache])
							compilation.cache[subCache] = {};
						compilation.cache = compilation.cache[subCache];
					}
				});
				// We set loaderContext[__dirname] = false to indicate we already in
				// a child compiler so we don't spawn another child compilers from there.
				childCompiler.plugin("this-compilation", function(compilation) {
					compilation.plugin("normal-module-loader", function(loaderContext) {
						loaderContext[__dirname] = false;
					});
				});
				var source;
				childCompiler.plugin("after-compile", function(compilation, callback) {
					source = compilation.assets[childFilename] && compilation.assets[childFilename].source();
	
					// Remove all chunk assets
					compilation.chunks.forEach(function(chunk) {
						chunk.files.forEach(function(file) {
							delete compilation.assets[file];
						});
					});
	
					callback();
				});
				var callback = this.async();
				childCompiler.runAsChild(function(err, entries, compilation) {
					if(err) return callback(err);
	
					if(compilation.errors.length > 0) {
						return callback(compilation.errors[0]);
					}
					compilation.fileDependencies.forEach(function(dep) {
						this.addDependency(dep);
					}, this);
					compilation.contextDependencies.forEach(function(dep) {
						this.addContextDependency(dep);
					}, this);
					if(!source) {
						return callback(new Error("Didn't get a result from child compiler"));
					}
					try {
						var text = this.exec(source, request);
						if(typeof text === "string")
							text = [[0, text]];
						text.forEach(function(item) {
							var id = item[0];
							compilation.modules.forEach(function(module) {
								if(module.id === id)
									item[0] = module.identifier();
							});
						});
						this[__dirname](text, query);
						if(text.locals && typeof resultSource !== "undefined") {
							resultSource += "\nmodule.exports = " + JSON.stringify(text.locals) + ";";
						}
					} catch(e) {
						return callback(e);
					}
					if(resultSource)
						callback(null, resultSource);
					else
						callback();
				}.bind(this));
			} else {
				this[__dirname]("", query);
				return resultSource;
			}
		}
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,